<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfSchedule.WPF</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.UI.Xaml.Schedule.BuilderCommandBehaviorBase`3">
            <summary>
            
            </summary>
            <typeparam name="TControl"></typeparam>
            <typeparam name="TEventArgs"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1">
            <summary>
            Base behavior to handle connecting a <see cref="T:System.Windows.Controls.Control"/> to a Command.
            </summary>
            <typeparam name="T">The target object must derive from Control</typeparam>
            <remarks>
            CommandBehaviorBase can be used to provide new behaviors for commands.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.#ctor">
            <summary>
            Constructor specifying the target object.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.GetCommandParameter``1">
            <summary>
            
            </summary>
            <typeparam name="TParameter"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.SetCommandParameter``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="tParameter"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.UpdateEnabledState">
            <summary>
            Updates the target object's IsEnabled property based on the commands ability to execute.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.ExecuteCommand">
            <summary>
            Executes the command, if it's set, providing the <see cref="P:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.CommandParameter"/>
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.SetTargetObject(`0)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.OnTargetAttached">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.Command">
            <summary>
            Corresponding command to be execute and monitored for <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.CommandParameter">
            <summary>
            The parameter to supply the command during execution
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.TargetObject">
            <summary>
            Object to which this behavior is attached.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CommandBehaviorBase`1.CommandCanExecuteCheckEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.BuilderCommandBehaviorBase`3.builder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.BuilderCommandBehaviorBase`3.#ctor(System.Func{System.Object,`1,`2})">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.BuilderCommandBehaviorBase`3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.BuilderCommandBehaviorBase`3.OnEventRaised(System.Object,`1)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2">
            <summary>
            
            </summary>
            <typeparam name="TBehavior"></typeparam>
            <typeparam name="TControl"></typeparam>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2.CommandProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2.CommandParameterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2.SetCommand(`1,System.Windows.Input.ICommand)">
            <summary>
            
            </summary>
            <param name="selector"></param>
            <param name="command"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2.GetCommand(`1)">
            <summary>
            
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2.SetCommandParameter(`1,System.Object)">
            <summary>
            
            </summary>
            <param name="selector"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ControlCommandBase`2.GetCommandParameter(`1)">
            <summary>
            
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DelegateCommand`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:DelegateCommand"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DelegateCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:DelegateCommand"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.DelegateCommand`1.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ResourceWrapper">
            <summary>
            Â Represents a wrapper for the resources
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ResourceWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ResourceWrapper">ResourceWrapper</see> class. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleCommands.AddNewCommand">
            <summary>
             Defines a command to add schedule appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleCommands.EditCommand">
            <summary>
             Defines a command to edit schedule appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleCommands.DeleteCommand">
            <summary>
             Defines a command to delete schedule appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleCommands.DragAndDropCommand">
            <summary>
             Defines a command to drag schedule appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleCommands.CopyCommand">
            <summary>
             Defines a command to copy schedule appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleCommands.PasteCommand">
            <summary>
             Defines a command to paste schedule appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleCommand"/> class.
            </summary>
            <param name="executeAction">The action to be executed.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">
            Data used by the command. 
            </param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used by the command. 
            </param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.ScheduleCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHelper">
            <summary>
            Represents a helper for handling recurrence appointments.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHelper.GetRecurrenceDateTimeCollection(System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns the collection of dates which are the occurances of recurrence appointment based on rule string passed to the method.
            </summary>
            <param name="RRule">RRule of recurrence appointment.</param>
            <param name="RecStartDate">Start date of recuurence appointment.</param>
            <param name="specificStartDate"> Optional paramenter, can be passed to get the occurances of recurrance appointment from specified start date of date ranges</param>
            <param name="specificEndDate"> Optional paramenter, can be passed to get the occurances of recurrance appointment up to the specified end date of date ranges</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHelper.RRuleGenerator(Syncfusion.UI.Xaml.Schedule.RecurrenceProperties,System.DateTime,System.DateTime)">
            <summary>
            Method to generate RRule for recurrence appointment's.
            </summary>
            <param name="RecProp">RecurrenceProperties for an appointment.</param>
            <param name="AppStartTime">Starttime of recurrence appointment</param>
            <param name="AppEndTime">Endtime of recurrence appointment</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHelper.RRuleParser(System.String,System.DateTime)">
            <summary>
            Method to get the RecurrenceProperties of recurrence appointment's.
            </summary>
            <param name="RRule">RRule of Recurrence appointment's.</param>
            <param name="RecStartDate">RangeStartDate of ScheduleAppointment's RecurrenceProperites.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.GetItemsCount">
            <summary>
            Get Items Source count items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.OnManipulationDelta(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            On manipulation delta
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.UpdatePositionsWithAnimation(System.Double,System.Double)">
            <summary>
            Updating with an animation (after a tap)
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.UpdatePositions(System.Double)">
            <summary>
            Updating position
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.UpdatePosition(System.Int32,System.Int32,System.Double)">
            <summary>
            Translate items to a new offset
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange all items
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.LoopItemsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure items 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.EnvironmentTest">
            <summary>
            Validating the license moved from Shared.Wpf.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.EnvironmentTest.IsSecurityGranted">
            <summary>
            Gets a value indicating whether security permission can be granted. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.Syncfusion_Schedule_WPF">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.Syncfusion_Schedule_WPF.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.Syncfusion_Schedule_WPF.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.Syncfusion_Schedule_WPF.AppointmentEdit">
            <summary>
              Looks up a localized string similar to Subject:.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentEditor">
            <summary>
            Represents an appointment editor window.
            </summary>
            <summary>
            AppointmentEditor
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.AppointmentEditor">AppointmentEditor</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.ScheduleResourceTypeCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScheduleResourceTypeCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.startProperty">
            <summary>
            Using a DependencyProperty as the backing store for start.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.endProperty">
            <summary>
            Using a DependencyProperty as the backing store for end.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.ReminderTimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for ReminderTime.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EndDateEnableProperty">
            <summary>
            Using a DependencyProperty as the backing store for EndDateEnable.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentResourceNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentResourceName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AllDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentEditorBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentEditorBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.StartAccordionBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for AccordionBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EndAccordionBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for AccordionBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.RecurrenceAccordionBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for AccordionBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentEditorForegroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentEditorForeground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.ShowMoreVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowMoreVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsWarningMsgVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWarningMsgVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsRecursiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRecursive.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsRecurrenceTypeEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecurrenceTypeVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsEditingAllowedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditingAllowed.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.DeleteButtonVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for DeleteButtonVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentStatusCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentStatusCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.StartTimeZoneProperty">
            <summary>
            Using a DependencyProperty as the backing store for StartTimeZone.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EndTimeZoneProperty">
            <summary>
            Using a DependencyProperty as the backing store for EndTimeZone.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.TimeZoneCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeZoneCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.RecurrenceTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecurrenceType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EditedAppointmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditedAppointment.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsRecursiveModifiedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRecursiveModified.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.ScheduleResourceTypeCollection">
            <summary>
            Gets or sets the collection of resource type.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ResourceType"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.start">
            <summary>
            Gets or sets the start time value of appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.end">
            <summary>
            Gets or sets the end time value of appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.ReminderTime">
            <summary>
            Gets or sets the reminder time for appointment using appointment editor.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ReminderTimeType"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EndDateEnable">
            <summary>
            Gets or sets a value indicating whether the end date should be enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentResourceName">
            <summary>
            Gets or sets the resource name for appointment using appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AllDay">
            <summary>
            Gets or sets a value indicating whether the appointment should be all day appointment using appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentEditorBackground">
            <summary>
            Gets or sets the background color for appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.StartAccordionBackground">
            <summary>
            Gets or sets the background color for accordion which specifies start time.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EndAccordionBackground">
            <summary>
            Gets or sets the background color for accordion which specifies end time.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.RecurrenceAccordionBackground">
            <summary>
            Gets or sets the background color for accordion which specifies recurrence properties.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentEditorForeground">
            <summary>
            Gets or sets the foreground for appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.ShowMoreVisibility">
            <summary>
            Gets or sets the visibility of show more panel in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsWarningMsgVisible">
            <summary>
            Gets or sets the visibility of warning message in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsRecursive">
            <summary>
            Gets or sets a value indicating whether the appointment is recurring appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsRecurrenceTypeEnabled">
            <summary>
            Gets or sets a value indicating whether the recurrence properties for appointment should be enabled in editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsEditingAllowed">
            <summary>
            Gets or sets a value indicating whether the appointment can be edited or not.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.DeleteButtonVisibility">
            <summary>
            Gets or sets the visibility of delete button in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.AppointmentStatusCollection">
            <summary>
            Gets or sets the collection of appointment status in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.StartTimeZone">
            <summary>
            Gets or sets the time zone for start time value in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EndTimeZone">
            <summary>
            Gets or sets the time zone for end time value in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.TimeZoneCollection">
            <summary>
            Gets or sets the collection of time zones in appointment editor.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.RecurrenceType">
            <summary>
            Gets or sets the type of recurrence.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.EditedAppointment">
            <summary>
            Gets or sets the appointment that is edited.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AppointmentEditor.IsRecursiveModified">
            <summary>
            Gets or sets a value indicating whether the option IsRecursive has been modified or not.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.OpenRecurringAppointment">
            <summary>
            Represents recurrence appointment window.
            </summary>
            <summary>
            OpenRecurringAppointment
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.OpenRecurringAppointment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.OpenRecurringAppointment">OpenRecurringAppointment</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.OpenRecurringAppointment.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl">
            <summary>
            Represents a reminder window.
            </summary>
            <summary>
            ScheduleReminderControl
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl">ScheduleReminderControl</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl.ReminderAppointmentCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ReminderAppointmentCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl.ReminderAppointmentCollection">
            <summary>
            Gets or sets a collection of appointments with reminder.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl.DueConverter">
            <summary>
            Represents a converter that converts date time value to due time.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleReminderControl.Snooze">
            <summary>
            Represents a class to denote snooze objects.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.Clip">
            <summary>
            Represents a class to clip the contents of element to fit into the size of the containing element.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.Clip.GetToBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the bound value.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.Clip.SetToBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the bound value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.Clip.ToBoundsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToBounds.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DaysCoverter">
            <summary>
            Represents a converter that converts datetime value.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DaysCoverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts datetime value to string.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DaysCoverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts String to datetime value.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.SelectedDatesToHeaderTextConverter">
            <summary>
            Represents a converter that converts selected dates to and from header text.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SelectedDatesToHeaderTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts selected dates to header text.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SelectedDatesToHeaderTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts header text to selected dates.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.BoolToVisibilityConverter">
            <summary>
            Represents a converter that converts boolean values to and from visibility enumeration values. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean value to a visibility enumeration value.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a visibility enumeration value to boolean value.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.BoolToBoolConverter">
            <summary>
            Represents a converter that converts boolean value to vice versa.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ValueToIndexConverter">
            <summary>
            Represents a converter that converts value to index.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ValueToIndexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to index
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ValueToIndexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an index to a value.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.IsAlldaytoWordellipseConverter">
            <summary>
            Represents a converter that converts all day panel to text trimming.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.IsAlldaytoWordellipseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the text when text overflows .
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.StartTimeConverter">
            <summary>
            Represents a converter that converts the start time of schedule appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.StartTimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the schedule appointment start time.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.CustomTextBlock">
            <summary>
            Represents a custom text block.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.CustomTextBlock">CustomTextBlock</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.DateTimeFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for DateTimeFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.TimeSpanValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeSpanValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.HourFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for HourFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.MinuteFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinuteFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.DateTimeValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for DateTimeValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.MonthDateFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthDateFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.TextWrappingProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextWrapping.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.DateTimeFormat">
            <summary>
            Gets or sets a format for formatting date time value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.TimeSpanValue">
            <summary>
            Gets or sets a time span value for custom text block.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.HourFormat">
            <summary>
            Gets or sets a format for formatting hour value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.MinuteFormat">
            <summary>
            Gets or sets a format for formatting minute value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.DateTimeValue">
            <summary>
            Gets or sets a date time content of custom text block.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.MonthDateFormat">
            <summary>
            Gets or sets a format for formatting date in month.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.Text">
            <summary>
            Represents a text content of custom text block.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.CustomTextBlock.TextWrapping">
            <summary>
            Gets or sets how the custom text block should wrap text. 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DateTimeExtensions">
            <summary>
            Contains date time extension methods.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.EditorAction">
            <summary>
            Specifies the action while opening appointment editor.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.EditorClosedAction">
            <summary>
            Specifies the action while closing appointment editor.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleType">
            <summary>
            Specifies the type of schedule views.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.CurrentTimeIndicatorLocation">
            <summary>
            Specifies the CurrentTimeIndicator Location
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.TimeInterval">
            <summary>
            Specifies the time interval value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.FiveMin">
            <summary>
            5 minutes interval.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.SixMin">
            <summary>
            6 minutes interval.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.TenMin">
            <summary>
            10 minutes interval.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.FifteenMin">
            <summary>
            15 minutes interval.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.TwentyMin">
            <summary>
            20 minutes interval.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.ThirtyMin">
            <summary>
            30 minutes interval.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeInterval.OneHour">
            <summary>
            1 hour interval.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.RecurrenceType">
            <summary>
            Specifies the type of recurrence in appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceType.Daily">
            <summary>
            Daily.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceType.Weekly">
            <summary>
            Weekly.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceType.Monthly">
            <summary>
            Monthly.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceType.Yearly">
            <summary>
            Yearly.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ReminderTimeType">
            <summary>
            Specifies the type of reminder time for schedule appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ReminderTimeType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DayHeaderOrder">
            <summary>
            Specifies the order of resources in schedule.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.TimeModes">
            <summary>
            Specifies the time mode value.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.MenuType">
            <summary>
            Specifies the type of context menu.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentBehavior">
            <summary>
            Specifies the behavior of the AllDayAppointment
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ResizeType">
            <summary>
            Specifies whether the resize is done at starttime or endtime.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.NonAccessibleBlock">
            <summary>
            Represents a non accessible block.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.NonAccessibleBlockCollection">
            <summary>
            Represents a collection of non accessible blocks in schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleCollapsedHour">
            <summary>
            Represents a Schedule's Collapsed hour.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.CollapsedHourCollection">
            <summary>
            Represents a collection of non accessible blocks in schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1">
            <summary> 
            Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed. 
            </summary> 
            <typeparam name="T"></typeparam> 
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Adds the elements of the specified collection to the end of the ObservableCollection(Of T). 
            </summary> 
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes the first occurence of each item in the specified collection from ObservableCollection(Of T). 
            </summary> 
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1.Replace(`0)">
            <summary> 
            Clears the current collection and replaces it with the specified item. 
            </summary> 
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Clears the current collection and replaces it with the specified collection. 
            </summary> 
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1.#ctor">
            <summary> 
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class. 
            </summary> 
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ObservableRangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class that contains elements copied from the specified collection. 
            </summary> 
            <param name="collection">collection: The collection from which the elements are copied.</param> 
            <exception cref="T:System.ArgumentNullException">The collection parameter cannot be null.</exception> 
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.MinHeight">
            <summary>
            Set the minimum resize height
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.MaxHeight">
            <summary>
            Set the maximum resize height
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.MinWidth">
            <summary>
            Set the minimum resize width
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.MaxWidth">
            <summary>
            Set the maximum resize width
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.DragSpace">
            <summary>
            Set the space from border for start resize mode
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.DragIndicatorsFill">
            <summary>
            Set the drags indicator BackGround
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.DragIndicatorsOpacity">
            <summary>
            Set the drags indicator Opacity
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsLeftDraggable">
            <summary>
            Indicate if is possible resize dragging the left part
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsRightDraggable">
            <summary>
            Indicate if is possible resize dragging the right part
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsTopDraggable">
            <summary>
            Indicate if is possible resize dragging the top part
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsBottomDraggable">
            <summary>
            Indicate if is possible resize dragging the bottom part
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsTopLeftDraggable">
            <summary>
            Indicate if is possible resize dragging the top left corner
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsTopRightDraggable">
            <summary>
            Indicate if is possible resize dragging the top right corner
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsBottomLeftDraggable">
            <summary>
            Indicate if is possible resize dragging the bottom left corner
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.IsBottomRightDraggable">
            <summary>
            Indicate if is possible resize dragging the bottom right corner
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.StayInParent">
            <summary>
            Indicate if the element stay or not into parent bounds
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.ResizeBehavior.SizeChanged">
            <summary>
            Expose this event because when size is changed by behavior the FrameworkElement.SizeChanged event
            is not raised.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.UniformGrid">
            <summary>
            Represents a uniform grid.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.UniformGrid.RowsProperty">
             <summary>
            Using a DependencyProperty as the backing store for Rows.  This enables animation, styling, binding, etc...
             </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.UniformGrid.ColumnsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Columns.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.UniformGrid.FirstColumnProperty">
            <summary>
            Using a DependencyProperty as the backing store for FirstColumn.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.UniformGrid.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange the children of the UniformGrid by distributing space evenly
            among the children, making each child the size equal to a cell
            portion of the arrangeSize parameter.
            </summary>
            <param name="arrangeSize">The arrange size.</param>
            <returns>Returns the updated Size.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.UniformGrid.Rows">
            <summary>
            Gets or sets the number of rows in a grid.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.UniformGrid.Columns">
            <summary>
            Gets or sets the number of columns in a grid.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.UniformGrid.FirstColumn">
            <summary>
            Gets or sets the fist column in a grid.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DependencyObjectExtensions">
            <summary>
            Represents an extension to find parent of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DependencyObjectExtensions.FindElementOfType``1(System.Windows.FrameworkElement)">
            <summary>
                Searches the sub tree of an element (including that element) 
                for an element of a particular type.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DependencyObjectExtensions.FindElementOfTypeWithName``1(System.Windows.FrameworkElement,System.String)">
            <summary>
                Searches the sub tree of an element (including that element) 
                for an element of a particular type.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.UniformTimeSlotPanel">
            <summary>
            Represents a uniform time slot panel.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.UniformStackPanel">
            <summary>
            Represents a uniform stack panel.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnOrientationChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.OnOrientationChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises OrientationChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "arrange" pass of Silverlight layout. Classes can override this method to define their own arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.Orientation">
            <summary>
            Gets or sets the orientation by which child elements are stacked.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.OrientationChanged">
            <summary>
            Event that is raised when <see cref="P:Syncfusion.UI.Xaml.Schedule.UniformStackPanel.Orientation"/> property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.SfSchedule">
            <summary>
            Represents the Schedule.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.SfSchedule">SfSchedule</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScheduleType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AllowEditingProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowEditing.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentSelectionBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Appointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentStatusCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentStatusCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ItemsSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsSource.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentMappingProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentMapping.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.MonthHeaderDateFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthHeaderDateFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.HeaderDateFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderDateFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickTimeFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickTimeFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickTimeFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickTimeFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ShowAllDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAllDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ShowAppointmentNavigationButtonsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAppointmentNavigationButtons.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.PreviousNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for PreviousNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.NextNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for NextNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleResourceTypeCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScheduleResourceTypeCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ResourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for Resource.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.DayHeaderOrderProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayHeaderOrder.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.DayViewColumnCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewColumnCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeLineViewRowCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeLineViewRowCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.FocusedMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusedMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonFocusedMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for NonFocusedMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.CellSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.MonthViewLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.DayViewVerticalLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewVerticalLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentDateBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonWorkingDaysProperty">
            <summary>
            Using a DependencyProperty as the backing store for WorkingDays.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonWorkingHourBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for NonWorkingHourBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.ShowNonWorkingHoursProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowNonWorkingHours.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.WorkStartHourProperty">
            <summary>
            Using a DependencyProperty as the backing store for WorkStartHour.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.WorkEndHourProperty">
            <summary>
            Using a DependencyProperty as the backing store for WorkEndHour.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.IsHighLightWorkingHoursProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsHightLightWorkingHours.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.IntervalHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.EnableTouchProperty">
            <summary>
            Using a DependencyProperty as the backing store for EnableTouch.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.TouchMenuTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TouchMenuType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentTimeIndicatorTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentTimeIndicatorTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentTimeIndicatorVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentTimeIndicatorVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.EnableReminderTimerProperty">
            <summary>
            Using a DependencyProperty as the backing store for EnableReminderTimer.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.EnableAutoFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for EnableAutoFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeZoneCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeZoneCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonWorkingDateCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for NonWorkingDateCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.VisibleDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisibleDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.VisibleAppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisibleAppointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.RecursiveModifiedAppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecursiveModifiedAppointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.RecursiveExceptionDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecursiveExceptionDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.SfSchedule.HeaderFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.CompareNearestReminderTime(System.Nullable{System.DateTime},Syncfusion.UI.Xaml.Schedule.ScheduleAppointment)">
            <summary>
            Comparing the nearest reminder time.
            </summary>
            <param name="nearest"></param>
            <param name="remappointment"></param>
            <returns>DateTime </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.Refresh">
            <summary>
            Method to refresh the schedule appointment's.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.MoveToNextView">
            <summary>
            Method to navigate next view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.MoveToPreviousView">
            <summary>
            Method to navigate previous view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.MoveToNextAppointment">
            <summary>
            Method to move to next appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.MoveToPreviousAppointment">
            <summary>
            Method to move to previous appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.MoveToDate(System.DateTime)">
            <summary>
            Method to navigate to the specified date in schedule.
            </summary>
            <param name="date">The date that needs to be shown.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.MoveToTime(System.TimeSpan)">
            <summary>
            Method to navigate to the specified time in schedule.
            </summary>
            <param name="span">TimeSpan value that needs to be scroll.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.ImportICS">
            <summary>
            Method to import the required .ics file as schedule.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.ExportICS">
            <summary>
            Method to export the schedule information as .ics file.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.Export(System.String)">
            <summary>
            Method to export the schedule information as .ics file.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.Import(System.String)">
            <summary>
            Method to import the required .ics file as schedule.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.RemoveRecursiveAppointment(Syncfusion.UI.Xaml.Schedule.ScheduleAppointment)">
            <summary>
            Method to remove the recursive appointment in schedule.
            </summary>
            <param name="recApp">The schedule appointment that needs to be remove.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.Dispose">
            <summary>
            Method to release allocated resources of Schedule.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.GetAppointmentWindowOpeningEvents(Syncfusion.UI.Xaml.Schedule.AppointmentEditorOpeningEventArgs)">
            <summary>
            Gets the appointment window opening events.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.UI.Xaml.Schedule.AppointmentEditorOpeningEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.GetAppointmentWindowClosedEvents(Syncfusion.UI.Xaml.Schedule.AppointmentEditorClosedEventArgs)">
            <summary>
            Gets the appointment window closed events.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.UI.Xaml.Schedule.AppointmentEditorClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.SfSchedule.GetContextMenuOpeningEvent(Syncfusion.UI.Xaml.Schedule.ContextMenuOpeningEventArgs)">
            <summary>
            Gets the context menu opening event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.UI.Xaml.Schedule.ContextMenuOpeningEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentTimeIndicatorLocation">
            <summary>
            Gets or sets the location to Current time indicator.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.CurrentTimeIndicatorLocation"/>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CurrentTimeIndicatorLocation = CurrentTimeIndicatorLocation.OnTimeLine;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleType">
            <summary>
            Gets or sets the type of schedule view.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleType = ScheduleType.TimeLine;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentBehavior">
            <summary>
            Gets or sets the behavior of all-day appointments.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.AppointmentBehavior"/>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.AppointmentBehavior = AppointmentBehavior.Default;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AllowEditing">
            <summary>
            Gets or sets a value indicating whether the appointment editor should be allowed
            to create or edit appointment.
            </summary>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleWinRT
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.AllowEditing = false;
                        Grid.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of Schedule appointment's tooltip.
            </summary>
            <remarks>
            AppointmentTooltipTemplate of Schedule must be set to view the tooltip.
            </remarks>
            <example>
            using System;
            using System.Windows;
            using System.Windows.Controls;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.AddHours(9),
                            EndTime = DateTime.Now.Date.AddHours(12)
                        });
                        schedule.AppointmentTooltipVisibility = Visibility.Visible;
                        schedule.AppointmentToolTipTemplate = (ControlTemplate)this.Resources["AppointmentToolTipTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentToolTipTemplate">
            <summary>
            Gets or sets the template for Schedule appointment's tooltip.
            </summary>
            <remarks>
            AppointmentTooltipVisibility of Schedule must be set as "Visible" to view the tooltip.
            </remarks>
            <example>
            using System;
            using System.Windows;
            using System.Windows.Controls;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.AddHours(9),
                            EndTime = DateTime.Now.Date.AddHours(12)
                        });
                        schedule.AppointmentTooltipVisibility = Visibility.Visible;
                        schedule.AppointmentToolTipTemplate = (ControlTemplate)this.Resources["AppointmentToolTipTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentSelectionBrush">
            <summary>
            Gets or sets a brush that describes the border background of schedule appointment.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.AppointmentSelectionBrush"/>
            <example>
            using System;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.AddHours(9),
                            EndTime = DateTime.Now.Date.AddHours(12)
                        });
                        schedule.AppointmentSelectionBrush = new SolidColorBrush(Colors.Yellow);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing schedule appointment.
            </summary>
            <example>
            using System;
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.AddHours(9),
                            EndTime = DateTime.Now.Date.AddHours(12)
                        });
                        schedule.AppointmentTemplate =
            (DataTemplate)this.Resources["AppointmentTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.Appointments">
            <summary>
            Gets or sets the schedule appointments.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.AddHours(9),
                            EndTime = DateTime.Now.Date.AddHours(12)
                        });
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentCollection"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentStatusCollection">
            <summary>
            Gets or sets the collection of status required for adding appointments.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatusCollection"/>
            <example>
            using System.Windows.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.AppointmentStatusCollection = new ScheduleAppointmentStatusCollection
                        {
                            new ScheduleAppointmentStatus{Status="Idle", Brush = new SolidColorBrush(Colors.Pink)},
                            new ScheduleAppointmentStatus{Status="Busy", Brush = new SolidColorBrush(Colors.Red)}
                        };
                        Layout.Children.Add(schedule);
                    }
                }
            }
            
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ItemsSource" -->
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentMapping">
            <summary>
            Gets or sets the AppointmentMapping attributes to map the properties in the
            underlying ItemsSource of Schedule.
            </summary>
            <example>
            using System;
            using System.Collections.ObjectModel;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ObservableCollection<MappedAppointment> mappedAppointments = new ObservableCollection</MappedAppointment>
                        {
                            new MappedAppointment{MappedSubject = "Meeting", MappedStartTime = DateTime.Now.Date.AddHours(10), 
                                MappedEndTime = DateTime.Now.Date.AddHours(13)},
                            new MappedAppointment{MappedSubject = "Conference", MappedStartTime = DateTime.Now.Date.AddHours(15), 
                                MappedEndTime = DateTime.Now.Date.AddHours(18)},
                        };
                        schedule.AppointmentMapping = new ScheduleAppointmentMapping
                        {
                            SubjectMapping = "MappedSubject",
                            StartTimeMapping = "MappedStartTime",
                            EndTimeMapping = "MappedEndTime"
                        };
                        schedule.ItemsSource = mappedAppointments;
                        Layout.Children.Add(schedule);
                    }
                    public class MappedAppointment
                    {
                        public string MappedSubject { get; set; }
                        public DateTime MappedStartTime { get; set; }
                        public DateTime MappedEndTime { get; set; }
                    }
                }
            }
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MonthHeaderDateFormat">
            <summary>
            Gets or sets the date format in schedule month view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MonthHeaderDateFormat"/>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleType = ScheduleType.Month;
                        schedule.MonthHeaderDateFormat = "MMM dd yyyy";
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.HeaderDateFormat">
            <summary>
            Gets or sets the DateTime format for date displayed in schedule header.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.HeaderDateFormat = "MMM dd yyyy";
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickTimeFormat">
            <summary>
            Gets or sets the DateTime format of schedule minor ticks
            which is used to represents the minutes in timeslot.
            </summary>
            <remarks>
            TimeInterval must be specified other than OneHour to view the minor ticks.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.TimeInterval = TimeInterval.ThirtyMin;
                        schedule.MinorTickTimeFormat = "mm:ss";
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickTimeFormat">
            <summary>
            Gets or sets the DateTime format of schedule major ticks
            which represents the hour in timeslot.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MajorTickTimeFormat = "hh:mm tt";
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickVisibility">
            <summary>
            Gets or sets the visibility of minor ticks which represents minute in time slot.
            </summary>
            <remarks>
            TimeInterval must be specified other than OneHour to view the minor ticks.
            </remarks>
            <example>
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.TimeInterval = TimeInterval.ThirtyMin;
                        schedule.MinorTickVisibility = Visibility.Collapsed;
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickVisibility">
            <summary>
            Gets or sets the visibility of major ticks which represents hour in time slot.
            </summary>
            <example>
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MajorTickVisibility = Visibility.Collapsed;
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickStroke">
            <summary>
            Gets or sets the Brush that specifies the color of schedule minor ticks.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MinorTickStroke"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MinorTickStroke = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickStroke">
            <summary>
            Gets or sets the Brush that specifies the color of schedule major ticks.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MajorTickStroke"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MajorTickStroke = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickLabelStroke">
            <summary>
            Gets or sets the Brush to apply to the minor tick label content of schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MinorTickLabelStroke"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MinorTickLabelStroke = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickLabelStroke">
            <summary>
            Gets or sets the Brush to apply to the major tick label content of schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MajorTickLabelStroke"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MajorTickLabelStroke = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MinorTickStrokeDashArray">
            <summary>
            Gets or sets the dashed line pattern of Schedule minor tick.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MinorTickStrokeDashArray"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MinorTickStrokeDashArray = new DoubleCollection(){10,10};
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MajorTickStrokeDashArray">
            <summary>
            Gets or sets the dashed line pattern of Schedule major tick.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MajorTickStrokeDashArray"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MajorTickStrokeDashArray = new DoubleCollection(){10,10};
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ShowAllDay">
            <summary>
            Gets or sets a value indicating whether the AllDay panel should be shown.
            </summary>
            <remarks>
            AllDay panel is viewed only in day view and week view.
            </remarks>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ShowAllDay = false;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ShowAppointmentNavigationButtons">
            <summary>
            Gets or sets a value indicating whether the appointment navigation buttons
            should be shown to view previous and next appointments from current view.
            </summary>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.SubtractDays(2),
                            EndTime = DateTime.Now.Date.SubtractDays(2).AddHours(2)
                        });
                        schedule.ShowAppointmentNavigationButtons = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.PreviousNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button which navigates to previous
            appointments from current view.
            </summary>
            <remarks>
            To view the customized previous navigation button,
            ShowAppointmentNavigationButtons of Schedule must be enabled.
            </remarks>
            <example>
            using System;
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.SubtractDays(2),
                            EndTime = DateTime.Now.Date.SubtractDays(2).AddHours(2)
                        });
                        schedule.ShowAppointmentNavigationButtons = true;
                        schedule.PreviousNavigationButtonTemplate = (DataTemplate)this.Resources["PreviousNavigationButtonTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NextNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button which navigates to next
            appointments from current view.
            </summary>
            <remarks>
            To view the customized next navigation button, ShowAppointmentNavigationButtons
            of Schedule must be enabled.
            </remarks>
            <example>
            using System;
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.Date.AddDays(2),
                            EndTime = DateTime.Now.Date.AddDays(2).AddHours(2)
                        });
                        schedule.ShowAppointmentNavigationButtons = true;
                        schedule.NextNavigationButtonTemplate = (DataTemplate)this.Resources["NextNavigationButtonTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleResourceTypeCollection">
            <summary>
            Gets or sets the ResourceType collection for defining various resource collection to Schedule.
            </summary>
            <remarks>
            TypeName of ResourceType differentiates the resource collection.
            </remarks>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ResourceType"/>
            <example>
            using System.Collections.ObjectModel;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ResourceType resourceType = new ResourceType { TypeName = "Doctors" };
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource1", TypeName = "Dr.John", DisplayName = "Dr.John, M.B.B.S" });
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource2", TypeName = "Dr.Jessie", DisplayName = "Dr.Jessie, M.B.B.S" });
                        schedule.ScheduleResourceTypeCollection.Add(resourceType);
                        schedule.Resource = "Doctors";
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.Resource">
            <summary>
            Gets or sets the resource for Schedule from ScheduleResourceTypeCollection.
            </summary>
            <remarks>
            Resource must be assigned with TypeName of ScheduleResourceTypeCollection.
            </remarks>
            <example>
            using System.Collections.ObjectModel;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ResourceType resourceType = new ResourceType { TypeName = "Doctors" };
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource1", TypeName = "Dr.John", DisplayName = "Dr.John, M.B.B.S" });
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource2", TypeName = "Dr.Jessie", DisplayName = "Dr.Jessie, M.B.B.S" });
                        schedule.ScheduleResourceTypeCollection.Add(resourceType);
                        schedule.Resource = "Doctors";
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.DayHeaderOrder">
            <summary>
            Gets or sets the order by which resources have to be displayed.
            </summary>
            <example>
            using System.Collections.ObjectModel;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ResourceType resourceType = new ResourceType { TypeName = "Doctors" };
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource1", TypeName = "Dr.John", DisplayName = "Dr.John, M.B.B.S" });
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource2", TypeName = "Dr.Jessie", DisplayName = "Dr.Jessie, M.B.B.S" });
                        schedule.ScheduleResourceTypeCollection.Add(resourceType);
                        schedule.Resource = "Doctors";
                        schedule.DayHeaderOrder = DayHeaderOrder.OrderByDate;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.DayViewColumnCount">
            <summary>
            Gets or sets the number of resources (resource column count) to be displayed in day view.
            </summary>
            <example>
            using System.Collections.ObjectModel;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ResourceType resourceType = new ResourceType { TypeName = "Doctors" };
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource1", TypeName = "Dr.John", DisplayName = "Dr.John, M.B.B.S" });
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource2", TypeName = "Dr.Jessie", DisplayName = "Dr.Jessie, M.B.B.S" });
                        schedule.ScheduleResourceTypeCollection.Add(resourceType);
                        schedule.Resource = "Doctors";
                        schedule.DayViewColumnCount = 2;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeLineViewRowCount">
            <summary>
            Gets or sets the number of resources (resource row count) to be displayed in timeline view.
            </summary>
            <example>
            using System.Collections.ObjectModel;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ResourceType resourceType = new ResourceType { TypeName = "Doctors" };
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource1", TypeName = "Dr.John", DisplayName = "Dr.John, M.B.B.S" });
                        resourceType.ResourceCollection.Add(new Resource { ResourceName = "Resource2", TypeName = "Dr.Jessie", DisplayName = "Dr.Jessie, M.B.B.S" });
                         schedule.ScheduleResourceTypeCollection.Add(resourceType);
                        schedule.Resource = "Doctors";
                        schedule.TimeLineViewRowCount = 2;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.FocusedMonth">
            <summary>
            Gets or sets a brush that provides the background for current month dates in schedule.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleType = ScheduleType.Month;
                        schedule.FocusedMonth = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonFocusedMonth">
            <summary>
            Gets or sets a brush that provides the background for previous and next month dates in current view.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleType = ScheduleType.Month;
                        schedule.NonFocusedMonth = new SolidColorBrush(Colors.LightGray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CellSelectionBrush">
            <summary>
            Gets or sets a brush that provides the background of the SfSchedule cell selection.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.CellSelectionBrush"/>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CellSelectionBrush = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.MonthViewLineStroke">
            <summary>
            Gets or sets the Brush that specifies the painted  
            horizontal and vertical line's in month view.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.MonthViewLineStroke = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.DayViewVerticalLineStroke">
            <summary>
             Gets or sets the Brush that specifies the painted  
             vertical lines that separate dates in the week view.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.DayViewVerticalLineStroke = new SolidColorBrush(Colors.Gray);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.HeaderBackground">
            <summary>
            Gets or sets the Brush that provide the background for schedule's header.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.HeaderBackground = new SolidColorBrush(Colors.Green);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentDateForeground">
            <summary>
             Gets or sets the Brush to apply to the current date of Schedule.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CurrentDateForeground = new SolidColorBrush(Colors.Green);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentDateBackground">
            <summary>
            Gets or sets the Brush that provide the background for schedule current date.
            </summary>
            <example>
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CurrentDateBackground = new SolidColorBrush(Colors.Blue);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonWorkingDays">
            <summary>
            Gets or sets the collection of non working days.
            </summary>
            <remarks>
            IsHighlightWorkingHours of schedule must be set as "True" to view non working days.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.NonWorkingDays = "Thursday,Friday";
                        schedule.IsHighLightWorkingHours = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonWorkingHourBrush">
            <summary>
            Gets or sets the brush for highlighting non working hours.
            </summary>
            <remarks>
            IsHighlightWorkingHours of schedule must be set as "True" to view non working hours.
            </remarks>
            <example>
            using System.Windows.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.NonWorkingHourBrush = new SolidColorBrush(Colors.Brown);
                        schedule.IsHighLightWorkingHours = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ShowNonWorkingHours">
            <summary>
            Gets or sets a value indicating whether the non working hours should be shown.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ShowNonWorkingHours = false;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.WorkStartHour">
            <summary>
            Gets or sets the start hour time of working hours.
            </summary>
            <remarks>
            IsHighlightWorkingHours of schedule must be set as "True" to view working hours.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.WorkStartHour = 10;
                        schedule.IsHighLightWorkingHours = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.WorkEndHour">
            <summary>
            Gets or sets the end hour time of working hours.
            </summary>
            <remarks>
            IsHighlightWorkingHours of schedule must be set as "True" to view working hours.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.WorkEndHour = 17;
                        schedule.IsHighLightWorkingHours = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.IsHighLightWorkingHours">
            <summary>
            Gets or sets a value indicating whether the working hours should be highlighted.
            </summary>
            <value>
            <see langword="true" /> if this instance ; otherwise, <see langword="false" />.
            </value>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.IsHighLightWorkingHours = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeMode">
            <summary>
            Gets or sets the time mode which may be 12 hrs or 24 hrs.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeModes"></seealso>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.TimeMode = TimeModes.TwelveHours;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeInterval">
            <summary>
            Gets or sets the time interval which may differs based on enum "TimeInterval" of Schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.TimeInterval = TimeInterval.ThirtyMin;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.IntervalHeight">
            <summary>
            Gets or sets the height of interval set for Schedule.
            </summary>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.IntervalHeight = 30;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.EnableTouch">
            <summary>
            Gets or sets a value indicating whether the touch interactivity for schedule
            should be enabled.
            </summary>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.EnableTouch = true;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.TouchMenuType">
            <summary>
            Gets or sets the type of touch context menu which may be default menu or radial menu.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.MenuType"></seealso>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.TouchMenuType = MenuType.RadialMenu;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentTimeIndicatorTemplate">
            <summary>
            Gets or sets the template for customizing current time indicator.
            </summary>
            <remarks>
            CurrentTimeIndicatorVisibility of Schedule should be set as Visible to view the
            current time indicator.
            </remarks>
            <example>
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CurrentTimeIndicatorVisibility = Visibility.Visible;
                        schedule.CurrentTimeIndicatorTemplate = (DataTemplate)this.Resources["CurrentTimeIndicatorTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CurrentTimeIndicatorVisibility">
            <summary>
            Gets or sets the visibility of current time indicator.
            </summary>
            <example>
            using System.Windows;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CurrentTimeIndicatorVisibility = Visibility.Visible;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.EnableReminderTimer">
            <summary>
            Gets or sets a value indicating whether the reminder timer should be enabled.
            </summary>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.Appointments.Add(new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.AddHours(1),
                            EndTime = DateTime.Now.AddHours(2),
                            ReminderTime = ReminderTimeType.OneHour
                        });
                        schedule.EnableReminderTimer = false;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.EnableAutoFormat">
            <summary>
            Gets or sets a value indicating whether the auto format should be enabled.
            </summary>
            <value>
            <see langword="true" /> if ; otherwise, <see langword="false" />.
            </value>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.EnableAutoFormat = false;
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleDateRange">
            <summary>
            Gets or sets the dates that need to be displayed in day view and timeline view of schedule.
            </summary>
            <remarks>
            CustomVisibleDate property helps user to view particular dates in a single view.
            </remarks>
            <example>
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleDateRange.Add(new DateTime(2013, 11, 21));
                        schedule.ScheduleDateRange.Add(new DateTime(2013, 11, 23));
                        schedule.ScheduleDateRange.Add(new DateTime(2013, 11, 25));
                        schedule.ScheduleDateRange.Add(new DateTime(2013, 11, 27));   
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.CollapsedHours">
            <summary>
            Gets or sets the hour's that need to be collapsed in day view and timeline view of schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.CollapsedHourCollection"/>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.CollapsedHours.Add(new CollapsedHour
                        {
                            StartHour = 2,
                            EndHour = 4,
                        });
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonAccessibleBlocks">
            <summary>
            Gets or sets the non accessible blocks in schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.NonAccessibleBlockCollection"/>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.NonAccessibleBlocks.Add(new NonAccessibleBlock
                        {
                            StartHour = 2,
                            EndHour = 4,
                            Label = "Main Block",
                        });
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonAccessibleBlockTemplate">
            <summary>
            Gets or sets the template for customizing non accessible blocks of schedule.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.NonAccessibleBlocks.Add(new NonAccessibleBlock
                        {
                            StartHour = 2,
                            EndHour = 4,
                            Label = "Main Block",
                        });
                        schedule.NonAccessibleBlockTemplate = (DataTemplate)this.Resources["NonAccessibleBlockTemplate"];
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.FirstDayOfWeek">
            <summary>
            Gets or sets the day of the week in Schedule.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.FirstDayOfWeek"/>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.FirstDayOfWeek = DayOfWeek.Friday; 
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.TimeZoneCollection">
            <summary>
            Gets the collection of time zones available in schedule.
            </summary>
            <seealso
            cref="T:Syncfusion.UI.Xaml.Schedule.TimeZoneCollection">TimeZoneCollection</seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.NonWorkingDateCollection">
            <summary>
            Gets the collection of non-working days.
            </summary>
            <seealso cref="T:System.DayOfWeek"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.VisibleDates">
            <summary>
            Gets the visible dates of Schedule's current view.
            </summary>
            <seealso cref="T:System.DateTime"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.VisibleAppointments">
            <summary>
            Gets the collection of appointments that are visible.
            </summary>
            <seealso
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentCollection"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.RecursiveModifiedAppointments">
            <summary>
            Gets the reference for exception in recursive appointments
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.SfSchedule.RecursiveExceptionDates">
            <summary>
            Gets the reference for exception in recursive appointments
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ItemsSourceChanged">
            <summary>
            Occurs when Schedule ItemsSource collection will be changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentCollectionChanged">
            <summary>
            Occurs when the Schedule appointments collection will be changed. 
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ReminderClosed">
            <summary>
            Occurs when reminder will be closed. 
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ReminderOpening">
            <summary>
            Occurs when opening the reminder. 
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentEditorClosed">
            <summary>
             Occurs when the SfSchedule appointment editor will be closed. 
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentEditorOpening">
            <summary>
             Occurs when opening the Schedule appointment editor . 
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ContextMenuClosed">
            <summary>
            Occurs when the Schedule Context Menu will be closed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ContextMenuOpening">
            <summary>
            Occurs when opening the Schedule Context Menu.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleClick">
            <summary>
            Occurs when clicking the Schedule.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleDoubleClick">
            <summary>
            Occurs when double clicking the Schedule.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.DragStarting">
            <summary>
            Occurs when darg the Schedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentStartDragging">
            <summary>
            Occurs when start to drag the SfSchedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentDragging">
            <summary>
            Occurs when dragging the SfSchedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentEndDragging">
            <summary>
            Occurs when dropped the SfSchedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentStartResizing">
            <summary>
            Occurs when start to resize the SfSchedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentResizing">
            <summary>
            Occurs when resizing the SfSchedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.AppointmentEndResizing">
            <summary>
            Occurs when release the resized SfSchedule appointment.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.VisibleDatesChanging">
            <summary>
            Occurs when SfSchedule visible dates will be changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.SfSchedule.ScheduleTypeChanging">
            <summary>
            Occurs when changing the ScheduleType.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentEditorOpeningEventArgs">
            <summary>
            Provides data for a AppointmentEditorOpening event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ReminderControlOpeningEventArgs">
            <summary>
            Provides data for a ReminderControlOpening event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ContextMenuOpeningEventArgs">
            <summary>
            Provides data for a ContextMenuOpening event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleClickEventArgs">
            <summary>
            Provides data for a ScheduleClick event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DragStartingEventArgs">
            <summary>
            Provides data for a DragStarting event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentStartDraggingEventArgs">
            <summary>
            Provides data for a AppointmentStartDragging event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentDraggingEventArgs">
            <summary>
            Provides data for a AppointmentDragging event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentEndDraggingEventArgs">
            <summary>
            Provides data for a AppointmentEndDragging event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentStartResizingEventArgs">
            <summary>
            Provides data for a AppointmentStartResizing event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentResizingEventArgs">
            <summary>
            Provides data for a AppointmentResizing event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentEndResizingEventArgs">
            <summary>
            Provides data for a AppointmentEndResizing event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.VisibleDatesChangingEventArgs">
            <summary>
            Provides data for a VisibleDatesChanging event.
            </summary>  
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleTypeChangingEventArgs">
            <summary>
            Provides data for a ScheduleTypeChanging event.
            </summary> 
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView">
            <summary>
            Represents a header.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView">HeaderTitleBarView</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.HeaderTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.CurrentScheduleTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentScheduleType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.HeaderDateFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderDateFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.HeaderFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.Dispose">
            <summary>
            Method to release allocated resources of HeaderTitleBarView.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.HeaderText">
            <summary>
            Gets the header as text.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.CurrentScheduleType">
            <summary>
            Gets the schedule type of current view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleType"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.HeaderTitleBarView.SelectedDates">
            <summary>
            Gets the collection of selected dates.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties">
            <summary>
            Represents the Recurrence Properties.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RecurrenceTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecurrenceType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RecurrenceRuleProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecurrenceRule.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsRangeRecurrenceCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRangeRecurrenceCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsRangeEndDateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRangeEndDate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsRangeNoEndDateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRangeNoEndDate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RangeStartDateProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangeStartDate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RangeEndDateProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangeEndDate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RangeRecurrenceCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for RangeRecurrenceCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsDailyEveryNDaysProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDailyEveryNDays.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.DailyNDaysProperty">
            <summary>
            Using a DependencyProperty as the backing store for DailyNDays.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.WeeklyEveryNWeeksProperty">
            <summary>
            Using a DependencyProperty as the backing store for WeeklyEveryNWeeks.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklySundayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWeeklySunday.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyMondayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWeeklyMonday.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyTuesdayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWeeklyTuesday.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyThursdayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWeeklyThursday.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyFridayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWeeklyFriday.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklySaturdayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWeeklySaturday.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlyEveryNMonthsProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthlyEveryNMonths.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsMonthlySpecificProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMonthlySpecific.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlySpecificMonthDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthlySpecificMonthDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlyNthWeekProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthlyNthWeek.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlyWeekDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthlyWeekDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyEveryNYearsProperty">
            <summary>
            Using a DependencyProperty as the backing store for YearlyEveryNYears.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsYearlySpecificProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsYearlySpecific.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlySpecificMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for YearlySpecificMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlySpecificMonthDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for YearlySpecificMonthDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyNthWeekProperty">
            <summary>
            Using a DependencyProperty as the backing store for YearlyNthWeek.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyWeekDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for YearlyWeekDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyGenericMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for YearlyGenericMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RecurrenceType">
            <summary>
            Gets or sets the recurrence type.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RecurrenceRule">
            <summary>
            Gets or sets the recurrence rule.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsRangeRecurrenceCount">
            <summary>
            Gets or sets a value indicating whether the count of recurrence should be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsRangeEndDate">
            <summary>
            Gets or sets a value indicating whether the date should be specified for ending the recurrence.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsRangeNoEndDate">
            <summary>
            Gets or sets a value indicating whether the recurrence should be ended.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RangeStartDate">
            <summary>
            Gets or sets the date to start the recurrence.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RangeEndDate">
            <summary>
            Gets or sets the date to end the recurrence.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.RangeRecurrenceCount">
            <summary>
            Gets or sets the count for recurring appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsDailyEveryNDays">
            <summary>
            Gets or sets a value indicating whether the recurrence should be set based on specified day interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.DailyNDays">
            <summary>
            Gets or sets the day interval on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.WeeklyEveryNWeeks">
            <summary>
            Gets or sets the week interval on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklySunday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Sundays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyMonday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Mondays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyTuesday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Tuesdays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyWednesday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Wednesdays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyThursday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Thursdays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklyFriday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Fridays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsWeeklySaturday">
            <summary>
            Gets or sets a value indicating whether the recurrence should be applied on Saturdays with specified week interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlyEveryNMonths">
            <summary>
            Gets or sets the month interval on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsMonthlySpecific">
            <summary>
            Gets or sets a value indicating whether the recurrence has to be set for particular month day i.e. MonthlySpecificMonthDay
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlySpecificMonthDay">
            <summary>
            Gets or sets the day on which recurrence has to be set for every month.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlyNthWeek">
            <summary>
            Gets or sets the week of month on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.MonthlyWeekDay">
            <summary>
            Gets or sets the day of week on which monthly recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyEveryNYears">
            <summary>
            Gets or sets the year interval on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.IsYearlySpecific">
            <summary>
            Gets or sets a value indicating whether the recurrence should be set based on specific year interval.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlySpecificMonth">
            <summary>
            Gets or sets the specific month of year on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlySpecificMonthDay">
            <summary>
            Gets or sets the specific day of month on which yearly recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyNthWeek">
            <summary>
            Gets or sets the week of year on which recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyWeekDay">
            <summary>
            Gets or sets the day of week on which yearly recurrence has to be set.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties.YearlyGenericMonth">
            <summary>
            Gets or sets the generic month of year on which recurrence has to be set.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.Resource">
            <summary>
            Represents the Resource of Schedule.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.Resource.ResourceNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResourceName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.Resource.DisplayNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for DisplayName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.Resource.ResourceName">
            <summary>
            Gets or sets the name for resource.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.Resource.DisplayName">
            <summary>
            Gets or sets the name to be displayed for resource.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.Resource.TypeName">
            <summary>
            Gets or sets the type name for resource.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.Resource.PropertyChanged">
            <summary>
             Occurs when a Resource's property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ResourceType">
            <summary>
            Represents the Resource Type of Schedule.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ResourceType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ResourceType">ResourceType</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ResourceType.ResourceCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResourceCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ResourceType.TypeNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for TypeName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ResourceType.SubResourceTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for SubResourceType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResourceType.ResourceCollection">
            <summary>
            Gets or sets the collection of schedule resources.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResourceType.TypeName">
            <summary>
            Gets or sets the type name for resource type.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ResourceType.SubResourceType">
            <summary>
            Gets or sets the sub resource type.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.TimeZone">
            <summary>
            Represents a TimeZone of Schedule.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.TimeZone.TimeZoneValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeZoneValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.TimeZone.TimeZoneValue">
            <summary>
            Gets or sets the value for time zone.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.TimeZoneCollection">
            <summary>
            Represents a collection of TimeZone.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeZone"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment">
            <summary>
            Represents a schedule appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment">ScheduleAppointment</see> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.IsRecursiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRecursive.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.RecurrenceRuleProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecurrenceRule.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.StartTimeZoneProperty">
            <summary>
            Using a DependencyProperty as the backing store for StartTimeZone.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.EndTimeZoneProperty">
            <summary>
            Using a DependencyProperty as the backing store for EndTimeZone.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ReminderTimeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ReminderTime.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.AllDayProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllDay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.StartTimeProperty">
            <summary>
            Using a DependencyProperty as the backing store for StartTime.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.EndTimeProperty">
            <summary>
            Using a DependencyProperty as the backing store for EndTime.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.StatusProperty">
            <summary>
            Using a DependencyProperty as the backing store for Status.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.SubjectProperty">
            <summary>
            Using a DependencyProperty as the backing store for Subject.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.LocationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Location.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.NotesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Notes.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.AppointmentBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ReadOnlyProperty">
            <summary>
            Using a DependencyProperty as the backing store for ReadOnly.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ResourceCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResourceCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ReadOnlyVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for ReadOnlyVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.RecurrenceIDProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecurrenceID.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ObjectIDProperty">
            <summary>
            Using a DependencyProperty as the backing store for ObjectID.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.IsRecursive">
            <summary>
            Gets or sets a value indicating whether the appointment should be recursive.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleWinRT
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleType = ScheduleType.Month;
                        ScheduleAppointment appointment = new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.AddHours(1),
                            EndTime = DateTime.Now.AddHours(2)
                        };
                        RecurrenceProperties RecProp = new RecurrenceProperties
                        {
                            RecurrenceType = RecurrenceType.Daily,
                            IsDailyEveryNDays = false,
                            DailyNDays = 2,
                            IsRangeNoEndDate = true,
                            RangeEndDate = DateTime.Now.AddDays(10),
                            RangeRecurrenceCount = 100
                        };
                        // Generating RRule using ScheduleHelper
                        appointment.RecurrenceRule = ScheduleHelper.RRuleGenerator(RecProp, appointment.StartTime, appointment.EndTime);
                        appointment.IsRecursive = true;
                        schedule.Appointments.Add(appointment);
                        Grid.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.RecurrenceRule">
            <summary>
            Gets or sets the rule for recurrence appointments.
            </summary>
            <remarks>
            To set recurring appointment, IsRecursive of schedule appointment must be set as true.
            </remarks>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleWinRT
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        schedule.ScheduleType = ScheduleType.Month;
                        ScheduleAppointment appointment = new ScheduleAppointment
                        {
                            Subject = "Meeting",
                            StartTime = DateTime.Now.AddHours(1),
                            EndTime = DateTime.Now.AddHours(2)
                        };
                        RecurrenceProperties RecProp = new RecurrenceProperties
                        {
                            RecurrenceType = RecurrenceType.Daily,
                            IsDailyEveryNDays = false,
                            DailyNDays = 2,
                            IsRangeNoEndDate = true,
                            RangeEndDate = DateTime.Now.AddDays(10),
                            RangeRecurrenceCount = 100
                        };
                        // Generating RRule using ScheduleHelper
                        appointment.RecurrenceRule = ScheduleHelper.RRuleGenerator(RecProp, appointment.StartTime, appointment.EndTime);
                        appointment.IsRecursive = true;
                        schedule.Appointments.Add(appointment);
                        Grid.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.StartTimeZone">
            <summary>
            Gets or sets the time zone for appointment's start time.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.StartTimeZone = new TimeZone { TimeZoneValue = TimeZoneInfo.Local.ToString() };
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.EndTimeZone">
            <summary>
            Gets or sets the time zone for appointment's end time.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.EndTimeZone = new TimeZone { TimeZoneValue = TimeZoneInfo.Local.ToString() };
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ReminderTime">
            <summary>
            Gets or sets the reminder time for appointments
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.ReminderTime = ReminderTimeType.OneHour;
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.AllDay">
            <summary>
            Gets or sets the value indicating whether the appointment should be extended for an entire day.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.AllDay = true;
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.StartTime">
            <summary>
            Gets the sets the appointment's start time.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.EndTime">
            <summary>
            Gets the sets the appointment's end time.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.Status">
            <summary>
            Gets or sets the appointment's status.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.Status = schedule.AppointmentStatusCollection[0];
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.Subject">
            <summary>
            Gets or sets the subject for an appointment.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.Subject = "Meeting";
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.Location">
            <summary>
            Gets or sets the location for an appointment.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.Location = "Chennai";
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.Notes">
            <summary>
            Gets or sets the notes for an appointment.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.Notes = "Inauguration";
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.AppointmentBackground">
            <summary>
            Gets or sets Brush that provides the background for an appointment.
            </summary>
            <example>
            using System;
            using Windows.UI;
            using Windows.UI.Xaml.Media;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.AppointmentBackground = new
            SolidColorBrush(Colors.Orange);
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the appointment should be readable.
            </summary>
            <example>
            using System;
            using Syncfusion.UI.Xaml.Schedule;
            namespace ScheduleDemo
            {
                public sealed partial class ScheduleSample
                {
                    public ScheduleSample()
                    {
                        this.InitializeComponent();
                        SfSchedule schedule = new SfSchedule();
                        ScheduleAppointment appointment = new ScheduleAppointment();
                        appointment.StartTime = DateTime.Now.AddHours(1);
                        appointment.EndTime = DateTime.Now.AddHours(2);
                        appointment.ReadOnly = true;
                        schedule.Appointments.Add(appointment);
                        Layout.Children.Add(schedule);
                    }
                }
            }
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ResourceCollection" -->
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.RecurrenceProperites">
            <summary>
            Gets the recurrence properties of schedule appointments.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.RecurrenceProperties"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.IsSelected">
            <summary>
            Gets a value indicating whether the appointment gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ReadOnlyVisibility">
            <summary>
            Gets the visibility of read only appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.RecurrenceID">
            <summary>
            Gets an unique ID for referring recurrence appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.ObjectID">
            <summary>
            Gets an unique ID for referring items in ItemsSource of Schedule.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.AllDayChanged">
            <summary>
             Occurs when a schedule all-day appointment is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.LocationChanged">
            <summary>
             Occurs when location of schedule appointment is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.SubjectChanged">
            <summary>
             Occurs when subject of schedule appointment is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment.PropertyChanged">
            <summary>
             Occurs when a ScheduleAppointment's property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentCollection">
            <summary>
            Represents a collection of Schedule appointment
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping">
            <summary>
            Represents a schedule appointment mapping.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.AllDayMapping">
            <summary>
            Gets or Sets the AllDay mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.SubjectMapping">
            <summary>
            Gets or sets the subject mapping.
            </summary>
            <value>The subject mapping.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.StartTimeMapping">
            <summary>
            Gets or sets the start time mapping.
            </summary>
            <value>The start time mapping.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.EndTimeMapping">
            <summary>
            Gets or Sets the EndTimeMapping property for the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.LocationMapping">
            <summary>
            Gets or Sets the Location mapping property for the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.NotesMapping">
            <summary>
            Gets or Sets the notes mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.StatusMapping">
            <summary>
            Gets or Sets the status mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.AppointmentBackgroundMapping">
            <summary>
            Gets or Sets the AppointmentBackground mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.ReminderTimeMapping">
            <summary>
            Gets or Sets the reminder time mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.RecurrenceTypeMapping">
            <summary>
            Gets or Sets the RecurrenceType mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.RecurrenceRuleMapping">
            <summary>
            Gets or Sets the RecurrenceRule mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.RecurrenceProperitesMapping">
            <summary>
            Gets or Sets the RecurrenceProperites mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.StartTimeZoneMapping">
            <summary>
            Gets or Sets the StartTimeZone mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.EndTimeZoneMapping">
            <summary>
            Gets or Sets the  EndTimeZone mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.IsRecursiveMapping">
            <summary>
            Gets or Sets the  IsRecursiveMapping mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.ReadOnlyMapping">
            <summary>
            Gets or Sets the  ReadOnly mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.ResourceCollectionMapping">
            <summary>
            Gets or Sets the  ResourceCollection mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.TypeNameMapping">
            <summary>
            Gets or Sets the  TypeName mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.ResourceNameMapping">
            <summary>
            Gets or Sets the  ResourceName mapping property on the bound object.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentMapping.DisplayNameMapping">
            <summary>
            Gets or Sets the  DisplayName mapping property on the bound object.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatus">
            <summary>
            Represents a schedule appointment's status. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatus.BrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for Brush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatus.Status">
            <summary>
            Gets or sets the status of appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatus.Brush">
            <summary>
            Gets or sets the brush for representing corresponding status.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatusCollection">
            <summary>
            Represents a collection of schedule appointment's status.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentStatus"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DayViewItemHeader">
            <summary>
            Represent a day view item header.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DayViewItemHeader.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.DayViewItemHeader">DayViewItemHeader</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleNonWorkingDayPanel">
            <summary>
            Represents a panel for arranging non working days in day view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol">
            <summary>
            Represents an items control for arranging all day appointment collection.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol">AllDayAppointmentItemscontrol</see> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol.ChildCollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ChildCollection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol.DayViewVerticalLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewVerticalLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol.AppointmentTemplate">
            <summary>
            Gets or sets the template for schedule appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.AllDayAppointmentItemscontrol.ChildCollection">
            <summary>
            Gets or sets the list of schedule appointment.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointment"></seealso>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.CollapsedScheduleAppointment">
            <summary>
            Represents a schedule appointment which is collapsed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleNonWorkingDayItemsControl">
            <summary>
            Represents an items control for arranging non working days in day view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl">
            <summary>
            Represents an items control for arranging all day appointments.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl">ScheduleAllDaysAppointmentItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl.AppointmentSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentSelectionBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl.AppointmentSelectionBrush">
            <summary>
            Gets the border color of all day appointment while it gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentItemsControl.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing all day appointment.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ResourceHeaderItemsControl">
            <summary>
            Represents an items control for arranging resource headers.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ResourceHeaderItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ResourceHeaderItemsControl">ResourceHeaderItemsControl</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleAllDaysAppointmentLayoutPanel">
            <summary>
            Represents a layout panel for arranging all day appointments.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl">
            <summary>
            Represents a layout items control for arranging appointments in day view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl">ScheduleDaysAppointmentLayoutItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentSelectionBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentSelectionBrush">
            <summary>
            Gets or sets the border color of day view appointment while it gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing day view appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutItemsControl.AppointmentToolTipTemplate">
            <summary>
            Gets or sets a template for customizing appointment tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutPanel">
            <summary>
            Represents a layout panel for arranging appointments in day view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutPanel.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutPanel">ScheduleDaysAppointmentLayoutPanel</see>
            class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentLayoutPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "arrange" pass of Silverlight layout. Classes can override this method to define their own arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AppointmentPostionInfo">
            <summary>
            Represents a information regarding appointment's position.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl">
            <summary>
            Represents a day view appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl">ScheduleDaysAppointmentViewControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.CustomTemplateDataContextProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomTemplateDataContext.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.CustomTemplateVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomTemplateVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.DefaultTemplateVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for DefaultTemplateVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleDaysAppointmentViewControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing appointment in day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.CustomTemplateDataContext">
            <summary>
            Gets or sets the data context for custom appointment in day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.CustomTemplateVisibility">
            <summary>
            Gets or sets the visibility of custom appointment in day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.DefaultTemplateVisibility">
            <summary>
            Gets or sets the visibility of default appointment in day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysAppointmentViewControl.AppointmentToolTipTemplate">
            <summary>
            Gets or sets a template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.DragDropControl">
            <summary>
            Represents a control for appointment drag and drop
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.DragDropControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.DragDropControl">DragDropControl</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AddAppintmentControl">
            <summary>
            Represents a default menu for adding appointment
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.AddAppintmentControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.AddAppintmentControl">AddAppintmentControl</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.AddRadialMenuControl">
            <summary>
            Represents a radial menu for adding appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.AddRadialMenuControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.AddRadialMenuControl">AddRadialMenuControl</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.EditRadialMenuControl">
            <summary>
            Represents a radial menu for editing appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.EditRadialMenuControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.EditRadialMenuControl">EditRadialMenuControl</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl">
            <summary>
            Represents a header in day view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl">ScheduleDaysHeaderViewControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl.DateTimeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DateTime.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl.IsCurrentDateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCurrentDate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl.DayViewVerticalLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewVerticalLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl.DateTime">
            <summary>
            Gets or sets the header date.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewControl.IsCurrentDate">
            <summary>
            Gets or sets a value indicating whether the header date will be current date.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl">
            <summary>
            Represents an items control for arranging day view headers.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl">ScheduleDaysHeaderViewItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.ResourceCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResourceCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.CurrentDateBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.CurrentScheduleTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentScheduleType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.DayHeaderOrderProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayHeaderOrder.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.DayViewVerticalLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewVerticalLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.ResourceCount">
            <summary>
            Gets the count of resources in day view header.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.CurrentDateBackground">
            <summary>
            Gets the header background for current date.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.SelectedDates">
            <summary>
            Gets the collection of selected dates.
            </summary>
            <seealso cref="T:System.DateTime"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.CurrentScheduleType">
            <summary>
            Gets the schedule type of current view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewItemsControl.DayHeaderOrder">
            <summary>
            Gets the order by which resources in day view have to be arranged.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysHeaderViewLayoutPanel">
            <summary>
            Represents a layout panel for arranging day view headers.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView">
            <summary>
            Represents a schedule's day view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView">ScheduleDaysView</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.VisibleAppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisibleAppointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.CellSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.ShowAppointmentNavigationButtonsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAppointmentNavigationButtons.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.PreviousNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for PreviousNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.NextNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for NextNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppoointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.MinorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.MajorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.IntervalHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.TimeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.CurrentScheduleTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentScheduleType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.DayViewVerticalLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewVerticalLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.Dispose">
            <summary>
            Method to release allocated resources of ScheduleDayView.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.VisibleAppointments">
            <summary>
            Gets or sets the collection of visible appointments in day view.
            </summary>
            <seealso
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleAppointmentCollection">ScheduleAppointmentCollection</seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.SelectedDates">
            <summary>
            Gets or sets the selected dates of day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.ShowAppointmentNavigationButtons">
            <summary>
            Gets or sets a value indicating whether the appointment navigation buttons should be shown in day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.PreviousNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button which navigates to previous appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.NextNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button which navigates to next appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.AppointmentToolTipTemplate">
            <summary>
            Gets or sets a template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.MinorTickVisibility">
            <summary>
            Gets the visibility of minor ticks which represents minute in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.MajorTickVisibility">
            <summary>
            Gets the visibility of major ticks which represent hour in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.IntervalHeight">
            <summary>
            Gets the height of interval in day view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.TimeMode">
            <summary>
            Gets the time mode of day view which may be 12 hrs or 24 hrs.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.TimeInterval">
            <summary>
            Gets the time interval of day view which may differs based on schedule's enum "TimeInterval".
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleDaysView.CurrentScheduleType">
            <summary>
            Gets the schedule type of current view. 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl">
            <summary>
            Represents an items control for arranging time lines.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl">ScheduleTimeLineItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.TimeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MajorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MinorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MajorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MinorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MajorTickStrokeDashArrayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStrokeDashArray.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleTimeLineItemsControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.TimeMode">
            <summary>
            Gets the time mode for time line which may be 12 hrs or 24 hrs.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.TimeInterval">
            <summary>
            Gets the time interval for time line.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MajorTickStroke">
            <summary>
            Gets the stroke for major ticks that represents hour in time line.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MinorTickStroke">
            <summary>
            Gets the stroke for minor ticks that represents minute in time line.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MajorTickVisibility">
            <summary>
            Gets the visibility of major ticks that represent hour in time line.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MinorTickVisibility">
            <summary>
            Gets the visibility of minor ticks that represent minute in time line.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MajorTickStrokeDashArray">
            <summary>
            Gets the collection of double values that indicates the pattern of dashes and gaps for major tick lines.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineItemsControl.MinorTickStrokeDashArray">
            <summary>
            Gets the collection of double values that indicates the pattern of dashes and gaps for minor tick lines.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl">
            <summary>
            Represents an items control for arranging items in day view's horizontal time slot.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl">ScheduleHorizontalTimeSlotItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.ResourceCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResourceCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.IntervalHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MajorTickStrokeDashArrayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStrokeDashArray.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MinorTickStrokeDashArrayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStrokeDashArray.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MajorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MinorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleHorizontalTimeSlotItemsControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.ResourceCount">
            <summary>
            Gets the count of resources in horizontal time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.TimeInterval">
            <summary>
            Gets the time interval of horizontal time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.IntervalHeight">
            <summary>
            Gets the interval height of horizontal time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MajorTickStrokeDashArray">
            <summary>
            Gets the collection of double values that indicates the pattern of dashes and gaps for major tick lines.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MinorTickStrokeDashArray">
            <summary>
            Gets the collection of double values that indicates the pattern of dashes and gaps for minor tick lines.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MajorTickStroke">
            <summary>
            Gets the stroke of major ticks which represents hour in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotItemsControl.MinorTickStroke">
            <summary>
            Gets the stroke of minor ticks which represents minute in time slot.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl">
            <summary>
            Represents an items control for arranging items in day view's vertical time slot.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl">ScheduleVerticalTimeSlotItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.ResourceCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResourceCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.IntervalHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.DayViewVerticalLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayViewVerticalLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleVerticalTimeSlotItemsControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.TimeInterval">
            <summary>
            Gets the time interval of vertical time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.ResourceCount">
            <summary>
            Gets the count of resources in vertical time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.IntervalHeight">
            <summary>
            Gets the interval height in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleVerticalTimeSlotItemsControl.SelectedDates">
            <summary>
            Gets the collection of selected dates in vertical time slot.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.MonthViewItem">
            <summary>
            Represents a month view item.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.MonthViewItem.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.MonthViewItem">MonthViewItem</see> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.MonthViewItem.AppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisibleAppointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.MonthViewItem.MonthViewLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.MonthViewItem.Dispose">
            <summary>
            Method to release allocated resources of MonthViewItem.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.MonthViewItem.Appointments">
            <summary>
            Gets or sets the appointments of date in month view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.MonthViewItemHeader">
            <summary>
            Represents a header for month view item.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.MonthViewItemHeader.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.MonthViewItemHeader">MonthViewItemHeader</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl">
            <summary>
            Represents a layout items control for arranging appointments in month view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl">ScheduleMonthAppointmentLayoutItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentSelectionBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentSelectionBrush">
            <summary>
            Gets the border color of appointment while it gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing month view appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutItemsControl.AppointmentToolTipTemplate">
            <summary>
            Gets or sets the template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentLayoutPanel">
            <summary>
            Represents a layout panel for arranging month view appointments.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl">
            <summary>
            Represents a appointment in month view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl">ScheduleMonthAppointmentViewControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.CustomTemplateDataContextProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomTemplateDataContext.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.CustomTemplateVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomTemplateVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.DefaultTemplateVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for DefaultTemplateVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.EventCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for EventCount.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.TextForegroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextForeground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleMonthAppointmentViewControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing month view appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.CustomTemplateDataContext">
            <summary>
            Gets or sets the data context for custom appointment in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.CustomTemplateVisibility">
            <summary>
            Gets or sets the visibility of custom appointment in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.DefaultTemplateVisibility">
            <summary>
            Gets or sets the visibility of default appointment in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.EventCount">
            <summary>
            Gets or sets the count of events in a month view item.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.TextForeground">
            <summary>
            Gets or sets the foreground for specifying number of events in a month view item.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthAppointmentViewControl.AppointmentToolTipTemplate">
            <summary>
            Gets or sets the template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl">
            <summary>
            Represents a date in month view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl">ScheduleMonthDateContentControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.MonthDateFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthDateFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.DateProperty">
            <summary>
            Using a DependencyProperty as the backing store for Date.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.DateTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for DateText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.ScheduleBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScheduleBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.MonthViewLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.StrokeLineProperty">
            <summary>
            Using a DependencyProperty as the backing store for StrokeLine.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.StrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for StrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.IsCurrentDateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCurrentDate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.IsCurrentMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCurrentMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleMonthDateContentControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.MonthDateFormat">
            <summary>
            Gets or sets the DateTime format for date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.Date">
            <summary>
            Gets or sets the date for date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.DateText">
            <summary>
            Gets or sets the date as text for date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.ScheduleBackground">
            <summary>
            Gets or sets the background for date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.StrokeLine">
            <summary>
            Gets or sets the border color of date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.StrokeThickness">
            <summary>
            Gets or sets the border thickness of date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.IsCurrentDate">
            <summary>
            Gets or sets a value indicating whether the date in month view will be current date.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthDateContentControl.IsCurrentMonth">
            <summary>
            Gets or sets a value indicating whether the date will be in current month.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView">
            <summary>
            Represents the schedule's month view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView">ScheduleMonthView</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.VisibleAppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisibleAppointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.CellSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.ShowAppointmentNavigationButtonsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAppointmentNavigationButtons.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.PreviousNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for PreviousNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.NextNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for NextNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.MonthViewLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.Dispose">
            <summary>
            Method to release allocated resources of ScheduleMonthView.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.SelectedDates">
            <summary>
            Gets the collection of selected dates in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing month view appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.VisibleAppointments">
            <summary>
            Gets or sets the collection of appointments that are visible in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.ShowAppointmentNavigationButtons">
            <summary>
            Gets or sets a value indicating whether the appointment navigation buttons should be shown.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.PreviousNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button that navigates to previous appointments from current view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthView.NextNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button that navigates to next appointments from current view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl">
            <summary>
            Represents a month view header.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl">ScheduleMonthViewHeaderControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl.DayTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl.DayOfWeekProperty">
            <summary>
            Using a DependencyProperty as the backing store for DayOfWeek.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl.DayText">
            <summary>
            Gets or sets the month view header.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderControl.DayOfWeek">
            <summary>
            Gets or sets the day of week header in month view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderItemsControl">
            <summary>
            Represents an items control for arranging month view headers.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderItemsControl">ScheduleMonthViewHeaderItemsControl</see>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewHeaderItemsLayoutPanel">
            <summary>
            Represents a layout panel for arranging month view headers.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl">
            <summary>
            Represents an items control for arranging month view items.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl">ScheduleMonthViewItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.MonthHeaderDateFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthHeaderDateFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.FocusedMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusedMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.NonFocusedMonthProperty">
            <summary>
            Using a DependencyProperty as the backing store for NonFocusedMonth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.CurrentDateBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentDateBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.MonthViewLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.AutoHeaderFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoHeaderFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleMonthViewItemsControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.MonthHeaderDateFormat">
            <summary>
            Gets the DateTime format for header in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.SelectedDates">
            <summary>
            Gets the collection of selected dates in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.FocusedMonth">
            <summary>
            Gets the color for dates of selected month.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.NonFocusedMonth">
            <summary>
            Gets the color for dates of previous and next months.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.CurrentDateBackground">
            <summary>
            Gets the background for current date in month view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleMonthViewItemsControl.AutoHeaderFormat">
            <summary>
            Gets the DateTime format for header in Auto view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder">
            <summary>
            Represents a border for date in month view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder">ScheduleRectangleBorder</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.LeftBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for LeftBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.RightBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for RightBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.TopBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for TopBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.BottomBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for BottomBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.LeftBrush">
            <summary>
            Gets or sets the color of left border for date in month view
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.RightBrush">
            <summary>
            Gets or sets the color of right border for date in month view
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.TopBrush">
            <summary>
            Gets or sets the color of top border for date in month view
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleRectangleBorder.BottomBrush">
            <summary>
            Gets or sets the color of bottom border for date in month view
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl">
            <summary>
            Represents a layout items control for arranging appointments in timeline view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl">ScheduleHorizontalAppointmentLayoutItemsControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.AppointmentToolTipTemplate">
            <summary>
            Gets or sets the template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutItemsControl.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing timeline view appointments.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentLayoutPanel">
            <summary>
            Represents a layout panel for arranging timeline view appointments.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl">
            <summary>
            Represents a timeline view appointment.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl">ScheduleHorizontalAppointmentViewControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleHorizontalAppointmentViewControl.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalAppointmentViewControl.AppointmentToolTipTemplate">
            <summary>
            Gets or sets the template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl">
            <summary>
            Represents an items control for arranging timeline view headers.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl">ScheduleHorizontalDaysHeaderViewItemsControl</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.CurrentDateBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentDateBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.SelectedDates">
            <summary>
            Gets or sets the selected dates in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.TimeInterval">
            <summary>
            Gets or sets the time interval for timeline view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.CurrentDateBackground">
            <summary>
            Gets or sets the background color for current date's header.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewItemsControl.HeaderBackground">
            <summary>
            Gets or sets the background color for dates' header other than current date.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl">
            <summary>
            Represents an items control for arranging items in timeline view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl">ScheduleHorizontalTimeLineItemsControl</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.TimeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.IntervalWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MinorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MajorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MinorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MajorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.SelectedDates">
            <summary>
            Gets or sets the selected dates in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.TimeInterval">
            <summary>
            Gets or sets the time interval for timeline view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.TimeMode">
            <summary>
            Gets or sets the time mode of timeline view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeModes"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.IntervalWidth">
            <summary>
            Gets the width of the interval in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MinorTickVisibility">
            <summary>
            Gets or sets the visibility of minor ticks that represent minute in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MajorTickVisibility">
            <summary>
            Gets the visibility of major ticks that represent hour in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MinorTickStroke">
            <summary>
            Gets or sets the stroke color for minor ticks that represent minute in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeLineItemsControl.MajorTickStroke">
            <summary>
            Gets or sets the stroke color for major ticks that represent hour in time slot.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotControl">
            <summary>
            Represents a time slot of timeline view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalTimeSlotControl.Dispose">
            <summary>
            Method to release allocated resources of ScheduleHorizontalTimeSlotControl.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineNonWorkingDayPanel">
            <summary>
            Represents a panel for arranging non working days in timeline view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl">
            <summary>
            Represents an items control for arranging items in time slot of timeline view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl">ScheduleTimelineTimeSlotItemsControl</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.IntervalWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MajorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MinorTickStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MajorTickStrokeDashArrayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickStrokeDashArray.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MinorTickStrokeDashArrayProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickStrokeDashArray.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.SelectedDates">
            <summary>
            Gets or sets the selected dates in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.TimeInterval">
            <summary>
            Gets or sets the time interval of timeline view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.IntervalWidth">
            <summary>
            Gets the interval width of timeline view's time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MajorTickStroke">
            <summary>
            Gets the stroke color for major ticks that represent hour in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MinorTickStroke">
            <summary>
            Gets the stroke color for minor ticks that represent minute in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MajorTickStrokeDashArray">
            <summary>
            Gets the collection of double values that indicates the pattern of dashes and gaps for major tick lines.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimelineTimeSlotItemsControl.MinorTickStrokeDashArray">
            <summary>
            Gets the collection of double values that indicates the pattern of dashes and gaps for minor tick lines.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView">
            <summary>
            Represents a schedule's timeline view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView">ScheduleTimeLineView</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.AppointmentTooltipVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppoointmentTooltipVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.AppointmentToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentToolTipTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.AppointmentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AppointmentTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.VisibleAppointmentsProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisibleAppointments.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.SelectedDatesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedDates.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.CellSelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for MonthViewLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.ShowAppointmentNavigationButtonsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAppointmentNavigationButtons.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.PreviousNavigationButtonTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for PreviousNavigationButtonTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.MinorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.MajorTickVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for MajorTickVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.IntervalHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntervalHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.TimeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.TimeIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.CurrentScheduleTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentScheduleType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.Dispose">
            <summary>
            Define a method to release allocated resources of ScheduleTimeLineView.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.AppointmentTooltipVisibility">
            <summary>
            Gets or sets the visibility of appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.AppointmentToolTipTemplate">
            <summary>
            Gets or sets the template for customizing appointment's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.AppointmentTemplate">
            <summary>
            Gets or sets the template for customizing appointment in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.VisibleAppointments">
            <summary>
            Gets or sets the appointments that are visible in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.SelectedDates">
            <summary>
            Gets or sets the selected dates in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.ShowAppointmentNavigationButtons">
            <summary>
            Gets or sets a value indicating whether the appointment navigation buttons should be shown in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.PreviousNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button which navigates to previous appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.NextNavigationButtonTemplate">
            <summary>
            Gets or sets the template for customizing button which navigates to next appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.MinorTickVisibility">
            <summary>
            Gets the visibility of minor ticks that represent minute in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.MajorTickVisibility">
            <summary>
            Gets the visibility of major ticks that represent hour in time slot.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.IntervalHeight">
            <summary>
            Gets the height of the interval in timeline view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.TimeMode">
            <summary>
            Gets the time mode of the timeline view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeModes"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.TimeInterval">
            <summary>
            Gets the time interval of timeline view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.TimeInterval"></seealso>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleTimeLineView.CurrentScheduleType">
            <summary>
            Gets the schedule type of current view.
            </summary>
            <seealso cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleType"></seealso>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.TimeLineViewItemHeader">
            <summary>
            Represents a header in timeline view.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.TimeLineViewItemHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Schedule.TimeLineViewItemHeader">TimeLineViewItemHeader</see> class. 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl">
            <summary>
            Represents a timeline view header.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl">ScheduleHorizontalDaysHeaderViewControl</see>
            class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl.TextForegroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextForeground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl.HeaderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl.TextForeground">
            <summary>
            Gets or sets the text color for timeline view header.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Schedule.ScheduleHorizontalDaysHeaderViewControl.HeaderBrush">
            <summary>
            Gets or sets the background color for timeline view header.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
