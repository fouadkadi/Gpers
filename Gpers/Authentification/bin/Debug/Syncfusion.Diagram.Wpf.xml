<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Diagram.Wpf</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.DiagramWPFAssembly">
            <summary>
            Represents the DiagramWPF assembly
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramWPFAssembly.Name">
            <summary>
            Used to store the name.
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramWPFAssembly.Assembly">
            <summary>
            Used to store the assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramWPFAssembly.RootNamespace">
            <summary>
            Used to store the root namespace.
            </summary>
        </member>
        <member name="M:Syncfusion.DiagramWPFAssembly.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.DiagramWPFAssembly"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DiagramWPFAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            Assemblies the resolver.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns>The assembly</returns>
        </member>
        <member name="T:Syncfusion.AssemblyInfo">
            <summary>
            Represents the Assembly info
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.CollectionExt">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Windows.Diagram.Node"/> and <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CollectionExt.m_cleared">
            <summary>
            Indicates whether the value is cleared.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CollectionExt.m_syncRoot">
            <summary>
            Object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CollectionExt.m_source">
            <summary>
            Refers to the Source collection object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CollectionExt.m_dataInternal">
            <summary>
            Refers to the internal data (nodes and connectors)objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.CollectionExt"/> class .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.AddIfDoesNotExist(System.Object)">
            <summary>
            Check if the element already exist before adding into collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.Add(System.Object)">
            <summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.IList"></see>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.Insert(System.Int32,System.Object)">
            <summary>Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.</summary>
            <param name="index">The zero-based index at which value should be inserted. </param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.</summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.CreateView">
            <summary>Creates a new view on the collection that implements this interface. Typically, user code does not call this method.</summary>
            <returns>The newly created view.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.</summary>
            <returns>true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.HookCollection(System.Collections.IEnumerable)">
            <summary>
            Subscribes to the CollectionChanged event.
            </summary>
            <param name="collection">Represents the IEnumerable collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.UnhookCollection(System.Collections.IEnumerable)">
            <summary>
            Unsubscribes from the CollectionChanged event.
            </summary>
            <param name="collection">Represents the IEnumerable collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.OnChangesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Reraises notifications on collection change.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
            <remarks>Notifies of the collection change.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.ValidateIListSupport">
            <summary>
            Checks whether current source supports the IList interface.
            </summary>
            <returns>The collection of objects in <see cref="T:System.Collections.IList"/></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.GetItemAt(System.Int32)">
            <summary>
            Get an item by index from the internal or external source through the IList or IEnumerable interfaces.
            </summary>
            <param name="index">The integer value representing the index</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.CollectionExt.CheckEmptySource">
            <summary>
            Checks whether the source is not set and raises an exception if the collection source is not null.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.Cleared">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Diagram.CollectionExt"/> is cleared.
            </summary>
            <value><c>true</c> if cleared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.SourceCollection">
            <summary>
            Gets or sets custom source collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.Data">
            <summary>
            Gets the source collection or internal data list  depending on the presence of the source collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.Count">
            <summary>
            Gets the count of the items in the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.CollectionExt.CollectionChanged">
            <summary>Occurs when the collection changes.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.</summary>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.CollectionExt.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeCollection">
            <summary>
            Collection, used to store <see cref="T:Syncfusion.Windows.Diagram.Node"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeCollection.m_collClear">
            <summary>
            Typed members detect collection change is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeCollection.m_members">
            <summary>
            Typed members storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeCollection.mdiagramPage">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Diagram.DiagramPage"/>. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeCollection"/> class .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.#ctor(System.Windows.Controls.Panel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeCollection"/> class .
            </summary>
            <param name="mdiagramPage">Panel instance</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.AddValue(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.Select(System.Object)">
            <summary>
            Selects an item from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.Contains(System.Object)">
            <summary>
            Specifies whether the List contains the specified value.
            </summary>
            <param name="value">The value to be searched in the list.</param>
            <returns>True, if it contains value, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.SelectAll">
            <summary>
            Selects all the members of the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item at the specified index value.
            </summary>
            <param name="index">The location.</param>
            <param name="value">Item to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range.
            </summary>
            <param name="icol">The <see cref="T:System.Collections.ICollection"/> object</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.Remove(System.Object)">
            <summary>
            Removes the specified value from the list.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index value.
            </summary>
            <param name="index">The location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.GetGroupList(Syncfusion.Windows.Diagram.INodeGroup)">
            <summary>
            Gets the group list.
            </summary>
            <param name="node">The node object.</param>
            <returns>Gets the <see cref="T:System.Collections.IEnumerable"/> collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.GetRootNodeFromGroup(System.Collections.Generic.IEnumerable{Syncfusion.Windows.Diagram.INodeGroup},Syncfusion.Windows.Diagram.INodeGroup)">
            <summary>
            Gets the root node from group.
            </summary>
            <param name="list">The collection of nodes in the list.</param>
            <param name="node">The <see cref="T:Syncfusion.Windows.Diagram.Node"/> object.</param>
            <returns>The root <see cref="T:Syncfusion.Windows.Diagram.Node"/> object. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.GetGroupList(System.Collections.Generic.IEnumerable{Syncfusion.Windows.Diagram.INodeGroup},Syncfusion.Windows.Diagram.INodeGroup)">
            <summary>
            Gets the group list.
            </summary>
            <param name="list">The collection of nodes.</param>
            <param name="parent">The parent node.</param>
            <returns>The node collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.Members">
            <summary>
            Gets the members of the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the List values are of fixed size.
            </summary>
            <returns>True, if it is of fixed size, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the List values can be only read or written to.
            </summary>
            <returns>True, if it is read only, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the node object at the specified location.
            </summary>
            <param name="index">The location</param>
            <returns>The member at the specified location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.Count">
            <summary>
            Gets the count of the members in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeCollection.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectorBase">
            <summary>
            Represents base abstract class for Connectors.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IEdge">
            <summary>
            Interface to a Connection in a hierarchy or graph of objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ICommon">
            <summary>
            Represents common property for nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ICommon.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            <c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ICommon.OldZIndex">
            <summary>
            Gets or sets the old ZIndex value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ICommon.NewZIndex">
            <summary>
            Gets or sets the new ZIndex value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IEdge.AdjacentNode(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="node">The node object.</param>
            <returns>The node at the other end.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.HeadDecoratorAngle">
            <summary>
            Gets or sets the head decorator angle.
            </summary>
            <value>The head decorator angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.TailDecoratorAngle">
            <summary>
            Gets or sets the tail decorator angle.
            </summary>
            <value>The tail decorator angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.ConnectionHeadPort">
            <summary>
            Gets or sets the connection head port.
            </summary>
            <value>The connection head port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.ConnectionTailPort">
            <summary>
            Gets or sets the connection tail port.
            </summary>
            <value>The connection tail port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.HeadNode">
            <summary>
            Gets or sets the head node.
            </summary>
            <value>The head node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.TailNode">
            <summary>
            Gets or sets the tail node.
            </summary>
            <value>The tail node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.IsDirected">
            <summary>
            Gets or sets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.ConnectorType">
            <summary>
            Gets or sets the type of the connector.
            </summary>
            <value>The type of the connector.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.HeadDecoratorPosition">
            <summary>
            Gets or sets the head decorator position.
            </summary>
            <value>The head decorator position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.TailDecoratorPosition">
            <summary>
            Gets or sets the tail decorator position.
            </summary>
            <value>The tail decorator position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.HeadDecoratorShape">
            <summary>
            Gets or sets the head decorator shape.
            </summary>
            <value>The head decorator shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.TailDecoratorShape">
            <summary>
            Gets or sets the tail decorator shape.
            </summary>
            <value>The tail decorator shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.HeadDecoratorStyle">
            <summary>
            Gets or sets the head decorator style.
            </summary>
            <value>The head decorator style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.TailDecoratorStyle">
            <summary>
            Gets or sets the tail decorator style.
            </summary>
            <value>The tail decorator style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IEdge.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.INodeGroup">
            <summary>
            Represents node collection properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.INodeGroup.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID of the node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.INodeGroup.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
            <value>The parent ID.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.INodeGroup.IsGrouped">
            <summary>
            Gets or sets a value indicating whether this instance is grouped.
            </summary>
            <value>
            <c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.INodeGroup.Groups">
            <summary>
            Gets the groups to which the INodeGroup objects belong.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.INodeGroup.ReferenceNo">
            <summary>
            Gets or sets the reference number of the INodeGroup objects. Used for serialization purposes..
            </summary>
            <value>The reference no.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.hid">
            <summary>
            Used to store head node reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.tid">
            <summary>
            Used to store tail node reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.no">
            <summary>
            Used to store the reference number of the nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.hpid">
            <summary>
            Used to store head port reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.tpid">
            <summary>
            Used to store tail port reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.m_droppoint">
            <summary>
            Used to store the connector drop point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.m_oldindex">
            <summary>
            Used to store the old ZIndex value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.m_newindex">
            <summary>
            Used to store the new ZIndex value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.mlineadorn">
            <summary>
            Used to store the line adorner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.m_groups">
            <summary>
            Used to store the groups.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.m_endpointposition">
            <summary>
            Used to store end point position value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.m_startpointposition">
            <summary>
            Used to store start point position value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectorBase"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.FirstSegmentOrientationProperty">
            <summary>
            Identifies the FirstSegmentOrientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateOrientationProperty">
            <summary>
            LabelTemplateOrientationProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LineBridgingEnabledProperty">
            <summary>
            Identifies the LabelWidth LineBridgingEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.IsVertexVisibleProperty">
            <summary>
            Identifies the IsVertexVisibleProperty dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.BridgeSpacingProperty">
            <summary>
            Identifies the BridgeSpacing dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.IsVertexMovableProperty">
            <summary>
            Identifies the IsVertexMovable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.DecoratorAdornerStyleProperty">
            <summary>
            Identifies the DecoratorAdornerStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.VertexStyleProperty">
            <summary>
            Identifies the VertexStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelWidthProperty">
            <summary>
            Identifies the LabelWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelHeightProperty">
            <summary>
            Identifies the LabelHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTextWrappingProperty">
            <summary>
            Identifies the LabelTextWrapping dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontSizeProperty">
            <summary>
            Identifies the LabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontFamilyProperty">
            <summary>
            Identifies the LabelFontFamily dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontWeightProperty">
            <summary>
            Identifies the LabelFontWeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontStyleProperty">
            <summary>
            Identifies the LabelFontStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTextTrimmingProperty">
            <summary>
            Identifies the LabelTextTrimming dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTextAlignmentProperty">
            <summary>
            Identifies the LabelTextAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.IsLabelEditableProperty">
            <summary>
            Identifies the IsLabelEditable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.ConnectionTailPortProperty">
            <summary>
            Identifies the ConnectionTailPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.ConnectionHeadPortProperty">
            <summary>
            Identifies the ConnectionHeadPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.MeasurementUnitProperty">
            <summary>
            Identifies the MeasurementUnit dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateProperty">
            <summary>
            Identifies the Label Template.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.TailNodeProperty">
            <summary>
            Identifies current TailNode.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.HeadNodeProperty">
            <summary>
            Identifies current HeadNode.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorTypeProperty">
            <summary>
            Identifies current ConnectorType.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.IntermediatePointsProperty">
            <summary>
            Identifies current IntermediatePoints.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LineRoutingEnabledProperty">
            <summary>
            Identifies the LineRoutingEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelAngleProperty">
            <summary>
            Identifies the LabelAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateAngleProperty">
            <summary>
            Identifies the LabelTemplateAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.EditorAngleProperty">
            <summary>
            Identifies the LabelAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.TextWidthProperty">
            <summary>
            Defines the TextWidth property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelPositionProperty">
            <summary>
            Identifies the LabelPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplatePositionProperty">
            <summary>
            Identifies the LabelTemplatePosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateDistanceProperty">
            <summary>
            Identifies the LabelTemplateDistance dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.CenterProperty">
            <summary>
            Identifies the Center dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelBackgroundProperty">
            <summary>
             Identifies the LabelBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.LabelForegroundProperty">
            <summary>
             Identifies the LabelForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.IsGroupedProperty">
            <summary>
            Identifies the IsGroup dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.ParentIDProperty">
            <summary>
            Identifies the ParentId dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.EnableCumulativeUpdateProperty">
            <summary>
            Identifies the CumulativeUpdate Property
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnHeadPortChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [head port changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnLineBridgingEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [line bridging enabled changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnIsVertexVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [is vertex visible changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnIsVertexMovableChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [is vertex movable changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnTerminalsTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [terminals template changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnVertexTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [vertex template changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnTailPortChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [tail port changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnUnitsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [units changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnLabelHorizontalAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label horizontal alignment changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnLabelPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label position changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnConnectorTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [connector type changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnHeadNodeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnHeadNodeChanged method of the instance, notifies of the dependency property value changes .
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnTailNodeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnTailNodeChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.Line_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the Line control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.InvalidateConnectorPathGeometry">
            <summary>
            Updates the line geometry.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.UpdateConnectorPathGeometry">
            <summary>
            Updates the line geometry.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.startPt">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.centerPt">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.endPt">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.tangentAtStartPoint">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.tangentAtCenterPoint">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.tangentAtEndPoint">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.textWidth">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.templateWidth">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.length">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorBase.pts">
            <summary>
            internal properties
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.UpdateDecoratorPosition">
            <summary>
            Updates the position of the decorator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.GetLengthAtFractionPoint(System.Windows.Media.PathFigure,System.Windows.Point,System.Double@,System.Int32@)">
            <summary>
            Gets the length at fraction point.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="at">At.</param>
            <param name="fullLength">The full length.</param>
            <param name="segmentIndex">Index of the segment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.getSlope(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the slope.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.GetPathFigureLength(System.Windows.Media.PathFigure)">
            <summary>
            Gets the length of the path figure.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.doStraightPosition">
            <summary>
            Does the straight position.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.findCenterIntermediatePoints(System.Windows.Point)">
            <summary>
            Finds the center intermediate points.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.setDecoratorAngle(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Sets the decorator angle.
            </summary>
            <param name="pts">The PTS.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.findPointofIntersections(System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the pointof intersections.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.FindPOIBetweenTwoPolyLine(System.Windows.Media.PathFigure,System.Windows.Media.PathFigure)">
            <summary>
            Finds the POI between two poly line.
            </summary>
            <param name="poly1PathFigure">The poly1 path figure.</param>
            <param name="poly2PathFigure">The poly2 path figure.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.FindPOIBetweenTwoPolyLine(System.Windows.Point,System.Collections.Generic.List{System.Windows.Point},System.Windows.Point,System.Collections.Generic.List{System.Windows.Point},System.Boolean)">
            <summary>
            Finds the POI between two poly line.
            </summary>
            <param name="polyLine1Start">The poly line1 start.</param>
            <param name="polyLine1">The poly line1.</param>
            <param name="polyLine2Start">The poly line2 start.</param>
            <param name="polyLine2">The poly line2.</param>
            <param name="self">if set to <c>true</c> [self].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.FindPOIBetweenTwoPolyLine(System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.Windows.Point},System.Boolean)">
            <summary>
            Finds the POI between two poly line.
            </summary>
            <param name="polyLine1">The poly line1.</param>
            <param name="polyLine2">The poly line2.</param>
            <param name="self">if set to <c>true</c> [self].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.FindEndPoint(System.Windows.Media.PathGeometry)">
            <summary>
            Finds the End in the Segments.
            </summary>
            <param name="geo">the PathGeometry.</param>        
            <returns>this function returns the Point of the LastSegemn</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.FindPOIBetweenLineAndPolyLine(System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Finds the POI between line and poly line.
            </summary>
            <param name="lineStart">The line start.</param>
            <param name="lineEnd">The line end.</param>
            <param name="polyLine">The poly line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.FindPOIBetweenTwoLines2(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the POI between two lines2.
            </summary>
            <param name="startRect">The start rect.</param>
            <param name="endRect">The end rect.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.IntersectsWith(Syncfusion.Windows.Diagram.Node,System.Nullable{System.Windows.Point}@)">
            <summary>
            Checks weather the node is intersecting with staring or orthogonal line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.LiesWithin(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Lieses the within.
            </summary>
            <param name="startRect">The start rect.</param>
            <param name="endRect">The end rect.</param>
            <param name="point">The point.</param>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.findAngle(System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the angle.
            </summary>
            <param name="s">The s.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.findLength(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Finds the length.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.findHypo(System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the hypo.
            </summary>
            <param name="s">The s.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.ShowAdorner">
            <summary>
            Shows the adorner
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.HideAdorner">
            <summary>
            Hides the adorner
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.AdjacentNode(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="node">The node whose adjacent node is to be found</param>
            <returns>The node at the other end.</returns>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //Creating node
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.IsLabelEditable = true;
            n1.Label = "Alarm Rings";
            n1.Level = 2;
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            //Creating a connection.
            LineConnector o2 = new LineConnector();
            o2.ConnectorType = ConnectorType.Straight;
            o2.TailNode = n1;
            o2.HeadNode = n;
            IShape node = o2.AdjacentNode(n1);
            Model.Connections.Add(o2);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.GetLineIntersect(Syncfusion.Windows.Diagram.NodeInfo,System.Windows.Point,System.Windows.Point,System.Windows.Rect,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,Syncfusion.Windows.Diagram.ConnectorType)">
            <summary>
            Calculates the intersection point of the line with any of the node sides.
            </summary>
            <param name="node">The node with which the line intersects.</param>
            <param name="pt1">The start point of line.</param>
            <param name="pt2">The end point of the line.</param>
            <param name="rect">The rectangle which contains the node.</param>
            <param name="isTop">Flag to indicate the top side.</param>
            <param name="isBottom">Flag to indicate the bottom side.</param>
            <param name="isLeft">Flag to indicate the left side.</param>
            <param name="isRight">Flag to indicate the right side.</param>
            <param name="conType">Specifies the ConnectorType.</param>
            <returns>Intersection Point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.LineSlope(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the slope.
            </summary>
            <param name="pt1">The start Point </param>
            <param name="pt2">The end point</param>
            <returns>The Slope value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.GetOrthogonalLineIntersect(Syncfusion.Windows.Diagram.NodeInfo,Syncfusion.Windows.Diagram.NodeInfo,System.Windows.Rect,System.Windows.Rect,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Calculates the intersection point of the orthogonal or Bezier line with any of the node sides.
            </summary>
            <param name="source">The head node.</param>
            <param name="target">The tail node.</param>
            <param name="rect">The rectangle which contains the head node.</param>
            <param name="trect">The rectangle which contains the tail node.</param>
            <param name="isTop">Flag to indicate the top side of rect.</param>
            <param name="isBottom">Flag to indicate the bottom side of rect.</param>
            <param name="isLeft">Flag to indicate the left side of rect.</param>
            <param name="isRight">Flag to indicate the right side of rect.</param>
            <param name="tisTop">Flag to indicate the top side of target rectangle.</param>
            <param name="tisBottom">Flag to indicate the bottom side of target rectangle.</param>
            <param name="tisLeft">Flag to indicate the left side of target rectangle.</param>
            <param name="tisRight">Flag to indicate the right side of target rectangle.</param>
            <param name="si">The intersection point with respect to head node.</param>
            <param name="ti">The intersection point with respect to tail node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.GetTreeOrthogonalLineIntersect(Syncfusion.Windows.Diagram.NodeInfo,Syncfusion.Windows.Diagram.NodeInfo,System.Windows.Rect,System.Windows.Rect,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Gets the tree orthogonal line intersect.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <param name="rect">The source rect.</param>
            <param name="trect">The target target rectangle.</param>
            <param name="isTop">if set to <c>true</c> [is top].</param>
            <param name="isBottom">if set to <c>true</c> [is bottom].</param>
            <param name="isLeft">if set to <c>true</c> [is left].</param>
            <param name="isRight">if set to <c>true</c> [is right].</param>
            <param name="tisTop">if set to <c>true</c> [tis top].</param>
            <param name="tisBottom">if set to <c>true</c> [tis bottom].</param>
            <param name="tisLeft">if set to <c>true</c> [tis left].</param>
            <param name="tisRight">if set to <c>true</c> [tis right].</param>
            <param name="si">The start point.</param>
            <param name="ti">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.Clone">
            <summary>
            Creates a clone.
            </summary>
            <returns>The cloned object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.getLinePts">
            <summary>
            Gets the line PTS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.getLinePts(System.Windows.Media.PathFigure)">
            <summary>
            Gets the line PTS.
            </summary>
            <param name="ConnectorPathGeometry">The connector path geometry.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.ParsePoints(System.String)">
            <summary>
            Parses the points.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.InitializeRelationship">
            <summary>
            Initialize the relationship.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.DeleteConnector">
            <summary>
            When connector is deleted from the Model, this funtion is called to update the relationship properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.Add">
            <summary>
            When connected added into the the Model, this funtion is called to update the relationship properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.HeadNodeChanged(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Updated relationship properties when HeadNode is changed.
            </summary>
            <param name="OldNode">OldNode</param>
            <param name="NewNode">NewNode</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorBase_HeadNodeChangedEvent(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Head of the connection is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.TailNodeChanged(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Update relationship properties when TailNode is changed.
            </summary>
            <param name="OldNode">OldNode</param>
            <param name="NewNode">NewNode</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorBase_TailNodeChangedEvent(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Tail of the connection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.BridgeSpacing">
            <summary>
            Gets or sets the bridge spacing.
            </summary>
            <value>The bridge spacing.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LineBridgingEnabled">
            <summary>
            Gets or sets a value indicating whether [line bridging is enabled].
            </summary>
            <value><c>true</c> if [line bridging is enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IsVertexVisible">
            <summary>
            Gets or sets a value indicating whether this instance is vertex visible.
            </summary>
            <value>
            	<c>true</c> if this instance is vertex visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IsVertexMovable">
            <summary>
            Gets or sets a value indicating whether this instance is vertex movable.
            </summary>
            <value>
            	<c>true</c> if this instance is vertex movable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.VertexStyle">
            <summary>
            Gets or sets the vertex style.
            </summary>
            <value>The vertex style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.DecoratorAdornerStyle">
            <summary>
            Gets or sets the decorator adorner style.
            </summary>
            <value>The decorator adorner style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.OldZIndex">
            <summary>
            Gets or sets the old ZIndex value.
            </summary>
            <value>The old ZIndex value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.NewZIndex">
            <summary>
            Gets or sets the new ZIndex value.
            </summary>
            <value>The new ZIndex value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.DropPoint">
            <summary>
            Gets or sets the point at which the Connector was dropped.
            </summary>
            <value>The drop point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.EndPointPosition">
            <summary>
            Gets or sets the end point position.
            </summary>
            <value>The end point position.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  //Specifies the node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                   Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.StartPointPosition=new Point(100,100);
                    o.EndPointPosition=new Point(200,200);
                    Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.m_TempStart">
            <summary>
            Gets or sets the start point position.
            </summary>
            <value>The start point position.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  //Specifies the node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                   Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.StartPointPosition=new Point(100,100);
                    o.EndPointPosition=new Point(200,200);
                    Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LineAdorner">
            <summary>
            Gets or sets the line adorner.
            </summary>
            <value>The line adorner.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ID">
            <summary>
            Gets or sets a unique identifier for the connector.
            </summary>
            <value>
            Type: <see cref="T:System.Guid"/>
            Unique ID for the connector.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorType">
            <summary>
            Gets or sets the type of connection to be used.This is a dependency property.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorType"/>
            Enum specifying the type of the connector to be used.
            </value>
            <remarks>
            Three types of connectors are provided namely Orthogonal, Bezier and Straight. Default value is Orthogonal.
            </remarks>
            <example>
            <para/>This example shows how to set ConnectorType in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorType"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IntermediatePoints">
            <summary>
            Gets or sets the intermediate points.
            </summary>
            <value>The intermediate points.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LineRoutingEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is line routing enabled.
            Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadDecoratorPosition">
            <summary>
            Gets or sets the point where the head decorator is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Point"/>
            The point of the head decorator position.
            </value>
            <example>
            <para/>This example shows how to set ConnectorType in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.HeadDecoratorPosition = new Point(100,100);
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadDecoratorAngle">
            <summary>
            Gets or sets the angle at which the head decorator is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Angle of the head decorator.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailDecoratorPosition">
            <summary>
            Gets or sets the point where the tail decorator is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Point"/>
            The point of the tail decorator position.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailDecoratorAngle">
            <summary>
            Gets or sets the angle at which the tail decorator is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Angle of the tail decorator.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadDecoratorShape">
            <summary>
            Gets or sets the shape to be used as the head decorator.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.DecoratorShape"/>
            Enum specifying the shape of the head decorator.
            </value>
            <example>
            <para/>This example shows how to set HeadDecoratorShape in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    connObject.HeadDecoratorShape = DecoratorShape.Arrow;
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
            <remarks>
            Several shapes like None, Arrow, Diamond and Circle have been provided. Default shape is None.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Diagram.DecoratorShape"/>        
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailDecoratorShape">
            <summary>
            Gets or sets the shape to be used as the tail decorator.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.DecoratorShape"/>
            Enum specifying the shape of the tail decorator.
            </value>
            <example>
            <para/>This example shows how to set TailDecoratorShape in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    connObject.TailDecoratorShape = DecoratorShape.Arrow;
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
            <remarks>
            Several shapes like None, Arrow, Diamond and Circle have been provided. Default shape is Arrow.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Diagram.DecoratorShape"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelPosition">
            <summary>
            Gets or sets the point where the Label is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Point"/>
            The point of the Label position.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplatePosition">
            <summary>
            Gets or sets the label template position.
            </summary>
            <value>The label template position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TextWidth">
            <summary>
            Gets or sets the text width.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Point"/>
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelBackground">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>The label background. Default value is White</value>
            <example>
            <para/>This example shows how to set LabelBackground in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    connObject.LabelBackground=Brushes.Beige;
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelForeground">
            <summary>
            Gets or sets the Label Foreground.
            </summary>
            <value>The label foreground. Default value is Black.</value>
            <example>
            <para/>This example shows how to set LabelForeground in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    connObject.LabelForeground=Brushes.Beige;
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelWidth">
            <summary>
            Gets or sets the width of the label.
            </summary>
            <value>The width of the label. By default it is set to the line width.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelWidth=50;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelHeight">
            <summary>
            Gets or sets the height of the label.
            </summary>
            <value>The height of the label.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateDistance">
            <summary>
            Gets or sets the label template distance.
            </summary>
            <value>The label template distance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelAngle">
            <summary>
            Gets or sets the angle at which the Label is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Point"/>
            The angle .
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateAngle">
            <summary>
            Gets or sets the label template angle.
            </summary>
            <value>The label template angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.Label">
            <summary>
            Gets or sets the Label for the connector.
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            Label for the connector.
            </value>
            <example>
            <para/>This example shows how to set Label in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    connObject.Label="Syncfusion";
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelVisibility">
            <summary>
            Gets or sets the label visibility.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Visibility"/>
            Enum specifying the visibility.
            </value>
            <example>
            <para/>This example shows how to set LabelVisibility in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.Label = "Alarm Rings";
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    LineConnector connObject = new LineConnector();
                    connObject.ConnectorType = ConnectorType.Straight;
                    connObject.TailNode = n1;
                    connObject.HeadNode = n;
                    connObject.ConnectorType = ConnectorType.Orthogonal;
                    connObject.LabelVisibility = Visibility.Visible;
                    Model.Connections.Add(connObject);
               }
               }
               }
            </code>
            </example>
            <remarks>
            By default label visibility is set to visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IsLabelEditable">
            <summary>
            Gets or sets a value indicating whether this instance is label editable.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it can be edited, false otherwise.
            </value>
            <example>
            <para/>This example shows how to set IsLabelEditable in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelVisibility = Visibility.Visible;
            connObject.IsLabelEitable = true;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
            <remarks>
            Default Value is true. When this is false, HitTest is also set to false.
            When set to true, clicking on the label will make the editable textbox visible.
            Enter the new label and press ENTER to apply the changed label,
            or press ESC to ignore the new label and revert back to the old one.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplate">
            <summary>
            Gets or sets  the LabelTemplate for the connector.This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Controls.ControlTemplate"/>
            LabelTemplate for the connector.
            </value>
            <example>
            <para/>This example shows how to set  LabelTemplate   in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelTemplate = (ControlTemplate)FindResource( "LabelCustomTemplate" );
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            <para/>This example shows how to write a  LabelTemplate in XAML.
            <code language="XAML">
            &lt;ControlTemplate x:Key="LabelCustomTemplate"&gt;
            &lt;StackPanel Orientation="Horizontal"&gt;
            &lt;Image Source="text.png" Width="20" Height="20"/&gt;
            &lt;TextBlock Text="Hello"/&gt;
            &lt;/StackPanel&gt;
            &lt;/ControlTemplate&gt;
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ControlTemplate"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IsSelected">
            <summary>
            Gets or sets a value indicating whether the connector has been selected or not.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True if the connector is selected, false otherwise.
            </value>
            <example>
            <para/>This example shows how to set  LabelTemplate   in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.IsSelected = true;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectorPathGeometry">
            <summary>
            Gets or sets the PathGeometry for the connector.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PathGeometry"/>
            PathGeometry of the connector.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.VirtualConnectorPathGeometry">
            <summary>
            Gets or sets the virtual connector path geometry.
            </summary>
            <value>The virtual connector path geometry.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.zOrder">
            <summary>
            Gets the z order.
            </summary>
            <value>The z order.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LineStyle">
            <summary>
            Gets or sets the line style to be used for the connector.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.ConnectorBase.LineStyle"/>
            LineStyle for the connector.
            </value>
            <remarks>
            The line connectors can be customized by using the various LineStyle properties like Fill, Stroke, StrokeThickness, StrokeStartLineCap, StrokeEndLineCap, StrokeLineJoin .
            </remarks>
            <example>
            <para/>This example shows how to set LineStyle in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LineStyle.Fill = Brushes.Red;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.ConnectorBase.LineStyle"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadDecoratorStyle">
            <summary>
            Gets or sets the  style to be used for the head decorator.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.DecoratorStyle"/>
            HeadDecoratorStyle for the connector.
            </value>
            <remarks>
            The decorator shapes can be customized by using the various DecoratorStyle properties like Fill, Stroke, StrokeThickness, StrokeStartLineCap, StrokeEndLineCap, StrokeLineJoin .
            </remarks>
            <example>
            <para/>This example shows how to set HeadDecoratorStyle in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LineStyle.Fill = Brushes.Red;
            connObject.HeadDecoratorStyle.Fill = Brushes.Orange; 
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.DecoratorStyle"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailDecoratorStyle">
            <summary>
            Gets or sets the  style to be used for the tail decorator.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.DecoratorStyle"/>
            TailDecoratorStyle for the connector.
            </value>
            <remarks>
            The decorator shapes can be customized by using the various DecoratorStyle properties like Fill, Stroke, StrokeThickness, StrokeStartLineCap, StrokeEndLineCap, StrokeLineJoin .
            </remarks>
            <example>
            <para/>This example shows how to set TailDecoratorStyle in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LineStyle.Fill = Brushes.Red;
            connObject.TailDecoratorStyle.Fill = Brushes.Orange; 
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.DecoratorStyle"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.EnableMultilineLabel">
            <summary>
            Gets or sets a value indicating whether [enable multiline label].
            </summary>
            <value>
            	<c>true</c> if [enable multiline label]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.MeasurementUnit">
            <summary>
            Gets or sets the measurement unit.
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.MeasureUnits"/>
            Current Measurement unit.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelHorizontalAlignment">
            <summary>
            Gets or sets the label horizontal alignment.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.HorizontalAlignment"/>
            Enum specifying the alignment position.
            </value>
            <remarks>Default HorizontalAlignment is at the Center. This property will take effect only if the LabelWidth is set.</remarks>
            <example>
            <para/>This example shows how to set LabelHorizontalAlignment in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.Label="Syncfusion";
            connObject.LabelHorizontalAlignment= HorizontalAlignment.Left;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateHorizontalAlignment">
            <summary>
            Gets or sets the label template horizontal alignment.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.HorizontalAlignment"/>
            Enum specifying the alignment position.
            </value>
            <remarks>Default HorizontalAlignment is at the Center.</remarks>
            <example>
            <para/>This example shows how to set LabelTemplateHorizontalAlignment in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.Label="Syncfusion";
            connObject.LabelTemplateHorizontalAlignment= HorizontalAlignment.Left;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelVerticalAlignment">
            <summary>
            Gets or sets the label vertical alignment.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.VerticalAlignment"/>
            Enum specifying the alignment position.
            </value>
            <remarks>Default VerticalAlignment is at the Top.</remarks>
            <example>
            <para/>This example shows how to set LabelVerticalAlignment in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.Label="Syncfusion";
            connObject.LabelVerticalAlignment= VerticalAlignment.Left;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTemplateVerticalAlignment">
            <summary>
            Gets or sets the label template vertical alignment.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.VerticalAlignment"/>
            Enum specifying the alignment position.
            </value>
            <remarks>Default VerticalAlignment is at the Top.</remarks>
            <example>
            <para/>This example shows how to set LabelTemplateVerticalAlignment in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelTemplateVerticalAlignment= VerticalAlignment.Left;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTextWrapping">
            <summary>
            Gets or sets the label text wrapping.
            </summary>
            <value>Default value is NoWrap.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelTextWrapping = TextWrapping.Wrap;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontSize">
            <summary>
            Gets or sets the label font size.
            </summary>
            <value>Default value is 11d.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelFontSize = 14;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontFamily">
            <summary>
            Gets or sets the label font family.
            </summary>
            <value>Default value is Arial.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelFontFamily = new FontFamily("Verdana");
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontWeight">
            <summary>
            Gets or sets the label font weight.
            </summary>
            <value>Default value is SemiBold.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelFontWeight = FontWeights.Bold;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelFontStyle">
            <summary>
            Gets or sets the label font style.
            </summary>
            <value>Default value is Normal.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelFontStyle = FontStyles.Italic;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTextTrimming">
            <summary>
            Gets or sets the label text trimming.
            </summary>
            <value>Default value is CharacterEllipsis.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelTextTrimming = TextTrimming.None;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.LabelTextAlignment">
            <summary>
            Gets or sets the label text alignment.
            </summary>
            <value>Default value is Center.</value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.Label = "Alarm Rings";
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            LineConnector connObject = new LineConnector();
            connObject.ConnectorType = ConnectorType.Straight;
            connObject.TailNode = n1;
            connObject.HeadNode = n;
            connObject.ConnectorType = ConnectorType.Orthogonal;
            connObject.LabelTextAlignment = TextAlignment.Left;
            Model.Connections.Add(connObject);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.FirstSegmentOrientation">
            <summary>
            Gets or sets the orientation of FirstSegement.
            </summary>
            <value>
            Type:<see cref="T:Syncfusion.Windows.Diagram.SegmentOrientation"/>
            Enum specifying the SegmentOrientation.
            </value>
            <remarks>
            The OrthogonalLineConnector lets you orient the FirstSegment in follwoing directions
             <para>Auto - FirstSegment of Orthogonal LineConnector is connected to the HeadNode based on the Position of HeadNode, TailNode and provided IntermediatePoint.</para>
             <para>Horizontal - FirstSegment of the Orthogonal LineConnector is connected Horizontally to the HeadNode. </para>
             <para>Vertical - FirstSegment of the Orthogonal LineConnector is connected Vertically to the HeadNode. </para>        ///  
            Default orientation is Auto.
            </remarks>       
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.EnableCumulativeUpdate">
            <summary>
            Gets or Sets wheather CumulativeUpdate is enable
             </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.ConnectorBase.HeadNodeChangedEvent">
            <summary>
            Internal event that fires when HeadNode is changed
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.ConnectorBase.TailNodeChangedEvent">
            <summary>
            Internal even that fires when TailNode is changed
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.ConnectorBase.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectionHeadPort">
            <summary>
            Gets or sets the head port of the connector.
            </summary>
            <value>The port to which the connection is to be made.</value>
            <remarks>
            When specifying the <see cref="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectionHeadPort"/>, the <see cref="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadNode"/> should also be specified.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //Creating node
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            Model.Nodes.Add(n);
            //Adding a port to the node
            ConnectionPort port = new ConnectionPort();
            port.Node=n;
            port.Left=75;
            port.Top=10;
            port.PortShape = PortShapes.Arrow;
            port.PortStyle.Fill = Brushes.Transparent;
            port.Height = 11;
            port.Width = 11;
            n.Ports.Add(port);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.IsLabelEditable = true;
            n1.Label = "Alarm Rings";
            n1.Level = 2;
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            ConnectionPort port1 = new ConnectionPort();
            port1.Node=n;
            port1.Left=75;
            port1.Top=50;
            port1.PortShape = PortShapes.Arrow;
            port1.PortStyle.Fill = Brushes.Transparent;
            port1.Height = 11;
            port1.Width = 11;
            n1.Ports.Add(port1);
            //Creating a connection.
            LineConnector o2 = new LineConnector();
            o2.ConnectorType = ConnectorType.Straight;
            o2.TailNode = n1;
            o2.HeadNode = n;
            o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
            //Specifying the port to connect to.
            o2.ConnectionHeadPort = port;
            o2.ConnectionTailPort = port1;
            o2.HeadDecoratorShape=DecoratorShape.Arrow;
            o2.TailDecoratorShape=DecoratorShape.Arrow;
            Model.Connections.Add(o2);
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectionTailPort">
            <summary>
            Gets or sets the tail port of the connector.
            </summary>
            <value>The port to which the connection is to be made.</value>
            <remarks>
            When specifying the <see cref="P:Syncfusion.Windows.Diagram.ConnectorBase.ConnectionTailPort"/>, the <see cref="P:Syncfusion.Windows.Diagram.ConnectorBase.TailNode"/> should also be specified.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //Creating node
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            Model.Nodes.Add(n);
            //Adding a port to the node
            ConnectionPort port = new ConnectionPort();
            port.Node=n;
            port.Left=75;
            port.Top=10;
            port.PortShape = PortShapes.Arrow;
            port.PortStyle.Fill = Brushes.Transparent;
            port.Height = 11;
            port.Width = 11;
            n.Ports.Add(port);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.IsLabelEditable = true;
            n1.Label = "Alarm Rings";
            n1.Level = 2;
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            ConnectionPort port1 = new ConnectionPort();
            port1.Node=n;
            port1.Left=75;
            port1.Top=50;
            port1.PortShape = PortShapes.Arrow;
            port1.PortStyle.Fill = Brushes.Transparent;
            port1.Height = 11;
            port1.Width = 11;
            n1.Ports.Add(port1);
            //Creating a connection.
            LineConnector o2 = new LineConnector();
            o2.ConnectorType = ConnectorType.Straight;
            o2.TailNode = n1;
            o2.HeadNode = n;
            o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
            //Specifying the port to connect to.
            o2.ConnectionHeadPort = port;
            o2.ConnectionTailPort = port1;
            Model.Connections.Add(o2);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadNode">
            <summary>
            Gets or sets the first, or source, node upon which this Edge is incident.
            </summary>
            <value>The head node of the connection</value>
            <remarks>
            Every node should have a unique name.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //Creating node
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.IsLabelEditable = true;
            n1.Label = "Alarm Rings";
            n1.Level = 2;
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            //Creating a connection.
            LineConnector o2 = new LineConnector();
            o2.ConnectorType = ConnectorType.Straight;
            o2.TailNode = n1;
            o2.HeadNode = n;
            Model.Connections.Add(o2);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadNodeReferenceNo">
            <summary>
            Gets or sets the head node reference no.
            </summary>
            <value>The head node reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailNodeReferenceNo">
            <summary>
            Gets or sets the tail node reference no.
            </summary>
            <value>The tail node reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.HeadPortReferenceNo">
            <summary>
            Gets or sets the head port reference no.
            </summary>
            <value>The head port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailPortReferenceNo">
            <summary>
            Gets or sets the tail port reference no.
            </summary>
            <value>The tail port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.TailNode">
            <summary>
            Gets or sets the second, or target, node upon which this Edge is incident.
            </summary>
            <value>The tail node of the connection</value>
            <remarks>
            Every Node should have unique name.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //Creating node
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            Model.Nodes.Add(n);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.IsLabelEditable = true;
            n1.Label = "Alarm Rings";
            n1.Level = 2;
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            //Creating a connection.
            LineConnector o2 = new LineConnector();
            o2.ConnectorType = ConnectorType.Straight;
            o2.TailNode = n1;
            o2.HeadNode = n;
            Model.Connections.Add(o2);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IsDirected">
            <summary>
            Gets or sets a value indicating whether the Layout is directed or not.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True if the layout is directed, false otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.Groups">
            <summary>
            Gets the groups to which the INodeGroup objects belong.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.IsGrouped">
            <summary>
            Gets or sets a value indicating whether the connector is grouped.
            </summary>
            <value>
            <c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ReferenceNo">
            <summary>
            Gets or sets the reference number of the INodeGroup objects. Used for serialization purposes..
            </summary>
            <value>The reference no.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorBase.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
            <value>The parent ID.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectorBase.SlopeUndefinedException">
            <summary>
            Represents the slope undefined exception .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorBase.SlopeUndefinedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectorBase.SlopeUndefinedException"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SegmentDecoratorSettings.ContextProperty">
            <summary>
            Identifies the Context dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SegmentDecoratorSettings.UnitProperty">
            <summary>
            Identifies the Unit dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecoratorSettings.Context">
            <summary>
            Gets or sets Context in which decorators should be placed.
            </summary>
            <remarks>The Context of placing decorator can be complete line or segments</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecoratorSettings.Unit">
            <summary>
            Gets or sets Unit type for the offset.
            </summary>
            <remarks>Offset mentioned can be in ratio or absolute value</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecoratorSettings.SegmentDecorator">
            <summary>
            Gets or sets SegmentDecorator.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecoratorSettings.CustomDecoratorStyle">
            <summary>
            Gets or sets CustomDecoratorStyle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecorator.DecoratorOffset">
            <summary>
            Gets or sets DecoratorOffset.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecorator.CustomDecoratorStyle">
            <summary>
            Gets or sets CustomDecoratorStyle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SegmentDecorator.DecoratorShape">
            <summary>
            Gets or sets DecoratorShape.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.AStarLineRouter">
            <summary>
            Line Routing engine that use A* find path Algorithm to route orthogonal lines.
            </summary>   
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LineRouter">
            <summary>
            A line router provides line routing services for a diagram.
            View.
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineRouter.m_bInAction">
            <summary>
            Indicates whether line routing engine is updating routes right now.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineRouter.m_view">
            <summary>
            Document to which LineRouting engine is attached.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineRouter.m_nDistance">
            <summary>
            Distance from routing line to obstacles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineRouter.m_nUpdateRequests">
            <summary>
            Document update requests.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineRouter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineRouter.#ctor(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineRouter"/> class.
            </summary>
            <param name="view">View to attach line router to</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineRouter.RouteAllViewConnectors">
            <summary>
            Reroutes all view connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineRouter.RouteAllViewConnectorsInternal">
            <summary>
            Route all connection from model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineRouter.SetNewView(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Set new View to the instance.
            </summary>
            <param name="newValue">The new View.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineRouter.DistanceToObstacles">
            <summary>
            Gets or sets distance to obstacles.
            </summary>        
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineRouter.View">
            <summary>
            Gets or sets view the line router is attached to.        
            </summary>       
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineRouter.UpdateRequests">
            <summary>
            Gets or sets the update requests.
            </summary>
            <value>The update requests.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_searchGrid">
            <summary>
            Store Search Grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_lstSearchNodes">
            <summary>
            Store search node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_lstObstacles">
            <summary>
            Helper class used while path find.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_rgnObstacles">
            <summary>
            Store region that represent all obstacles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_nodesConnectors">
            <summary>
            Store collection of the connectors to route.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_columnsCount">
            <summary>
            Store search grid's columns count.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.m_rowsCount">
            <summary>
            Store search grid's rows count.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.AStarLineRouter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.#ctor(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.AStarLineRouter"/> class.
            </summary>
            <param name="view">The reference to diagram view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.RouteAllViewConnectorsInternal">
            <summary>
            Reroutes all available view connectors.
            </summary>
            <remarks>
            Call ResetSearchCache() and Reroute() method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.ResetSearchCache">
            <summary>
            Recreate obstacles collections and generate search grid to find all possible ways.
            </summary>
            <remarks>
            Collect all obstacles ( node with enable Node.TreatAsObstacle property ) in view and save it to m_lstObstacles member.
            Then generate search grid by calling InitSerarchGrid() that used last obstacles collection.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.tempConnectionPoints">
            <summary>
            Reroutes connectors from RoutingConnectors collection.
            </summary>
            <remarks>
            Engine find short way and lay out connectors using SetPoints() method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.ConnectNode(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Adds nodeToConnectWith to Neighbours collection of nodeToConnect.
            </summary>
            <param name="nodeToConnect">Node to add neighbour to.</param>
            <param name="nodeToConnectWith">Neighbour to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.DisconnectNode(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Removes neighbour node from nodeDisconnectFrom Neighbours.
            </summary>
            <param name="nodeDisconnectFrom">Node to remove neighbour from.</param>
            <param name="nodeDisconnecting">Neighbour to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.DisconnectNodes(Syncfusion.Windows.Diagram.SearchNodeArray)">
            <summary>
            Clear neighbours.
            </summary>
            <param name="lstDisconnecting">Nodes to clear neighbours</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetBoundaryIntersects(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Gets the search node array that intersect with rcBounds rectangle.
            </summary>
            <param name="ptEndPointLocation">The tested EndPoint location.</param>
            <param name="rcBounds">The bounds rectangle.</param>
            <returns>The search node array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.CreateSearchNode(System.Windows.Point)">
            <summary>
            Creates the search node in given location.
            </summary>
            <param name="ptLoc">The search node location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetNearestSearchGridNodes(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Gets intersection points of given search node with search grid.
            </summary>
            <param name="node">The search node.</param>
            <returns>The search node array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.ConnectNearestNodeNeighbour(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Connects the nearest node to Neighbour collection of nodeCur.
            </summary>
            <param name="nodeCur">The Neighbour collection container.</param>
            <param name="nodeNearest">The nearest search node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.InitSearchGrid">
            <summary>
            Initialize search grid using collected obstacles.
            </summary>
            <remarks>
            using m_lstObstacles member as obstacles collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.UpdateNeighbours(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update nodes neighbours.
            </summary>
            <param name="nXNode1">The X axis position of first node.</param>
            <param name="nYNode1">The Y axis position of first node.</param>
            <param name="nXNode2">The X axis position of second node.</param>
            <param name="nYNode2">The Y axis position of second node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.CanConnect(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Check if two search nodes can be connected.
            </summary>
            <param name="node1">First node to check.</param>
            <param name="node2">Second node to check.</param>
            <returns>true, if can connect to the nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetObstacles">
            <summary>
            Creates list of obstacles.
            </summary>
            <returns>List of obstacles.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.FindPath(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Searches for route from endPointHead to endPointTail.
            </summary>
            <returns>Array of points that represent path</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetTopParentNode(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Gets the top parent node.
            </summary>
            <param name="node">The node.</param>
            <returns>The top parent node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.FindPath(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Searches for route from nodeStart to nodeEnd.
            </summary>
            <param name="nodeStart">Node to start search from.</param>
            <param name="nodeEnd">Node to search to.</param>
            <returns>True if route found, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetHeadingDirection(System.Windows.Rect,System.Windows.Point,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the compass heading direction.
            Return only North, West, South, East or None value.
            </summary>
            <param name="rcBounds">The round area.</param>
            <param name="ptPoint">The outside point.</param>
            <returns>Heading direction.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetIntersectBounds(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Get node bounds will intersected nodes.
            </summary>
            <param name="node">Node that use to calculate related bounds.</param>
            <returns>The node bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetNodesIntersecting(System.Collections.Generic.List{Syncfusion.Windows.Diagram.Node},System.Windows.Rect,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Gets the collection of intersecting obstacles in collection with given rectangle.
            </summary>
            <param name="nodes">The node collection.</param>
            <param name="recbBounding">The bounds rectangle to intersect with.</param>
            <returns>The intersecting nodes collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.GetBoundingRect(Syncfusion.Windows.Diagram.CollectionExt,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Gets the bounding rectangle of node collection.
            </summary>
            <param name="nodes">The node collection.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.AStarLineRouter.RoutingConnectors">
            <summary>
            Gets the reference to collection of connectors that will be routed by engine.
            </summary>
            <value>The reference to routing connector collection.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.AStarLineRouter.Obstacle">
            <summary>
            Simple obstance template that used to find short way. Contain the HasCentralPort flag
            and the BoundingRect properties.
            </summary>
            <remarks>
            Instance created from node that contain port collection and it bounding rectangle.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.Obstacle.HasCentralPort">
            <summary>
            Store value indivates that the obstacle has enabled central port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AStarLineRouter.Obstacle.BoundingRect">
            <summary>
            Store bounding rectangle of the obstacle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AStarLineRouter.Obstacle.#ctor(Syncfusion.Windows.Diagram.Node,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.AStarLineRouter.Obstacle"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="rcBounding">The bounding rectangle.</param>
            <exception cref="T:System.ArgumentNullException">When node is equal null.</exception>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SearchNode">
            <summary>
            The helper point that the grid of the findpaths' possible ways consists of.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_bGCalcFlag">
            <summary>
            Indicates whether F or G value will be calculated in
            <see cref="M:Syncfusion.Windows.Diagram.SearchNode.GetMoveCost"/> method.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_bHCalcFlag">
            <summary>
            Indicates whether F or G value will be calculated in
            <see cref="M:Syncfusion.Windows.Diagram.SearchNode.GetHeuristicCost(Syncfusion.Windows.Diagram.SearchNode)"/> method.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_fH">
            <summary>
            Heuristic.Estimate of what it will cost to get to the goal node.
            Sum of all the costs it will take to get to the goal( Total path estimate ).
            </summary>
            <remarks>
            F = G + H = gone + heuristic.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_fG">
            <summary>
            Sum off all the costs it took to get here.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_ptLocation">
            <summary>
            PathNode location. In model coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_sgnParent">
            <summary>
            Parent node.
            </summary>
            <remarks>
            Used to get route vertices when path found.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNode.m_lstNeighbours">
            <summary>
            Possible route succeding nodes.
            </summary>        
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SearchNode"/> class.
            </summary>
            <param name="ptLocation">The point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetGridHeuristicCost(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets the grid heuristic cost.
            </summary>
            <param name="from">Node to calc heuristic from.</param>
            <param name="to">Node to calc heuristic to.</param>
            <returns>Heuristic from from to to.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetGridMoveCost(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets the grid move cost.
            </summary>
            <param name="from">From node.</param>
            <param name="to">To node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetGraphMoveCost(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets the graph move cost.
            </summary>
            <param name="from">The source node.</param>
            <param name="to">The target node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetGraphHeuristicCost(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets the graph heuristic cost.
            </summary>
            <param name="from">From node.</param>
            <param name="to">To node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.ResetFGCalculations">
            <summary>
            Sets CalcFlag to true.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetMoveCost">
            <summary>
            Calculates G value for this node from given node.
            </summary>
            <returns>G value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetHeuristicCost(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets the heuristic cost.
            </summary>
            <param name="node">The node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.GetAllCosts">
            <summary>
            Gets all costs.
            </summary>
            <remarks>Always return 0.</remarks>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.CalcMoveCost(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Calculates the move cost.
            </summary>
            <param name="nodeFrom">The node from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNode.CalcHeuristicCost(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Calculates the heuristic cost.
            </summary>
            <param name="nodeTo">The node to.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNode.Processed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Diagram.SearchNode"/> is processed.
            </summary>
            <value><c>true</c> if processed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNode.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNode.Neighbours">
            <summary>
            Gets the neighbours.
            </summary>
            <value>The neighbours.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNode.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SearchGridNode">
            <summary>
            Search grid node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchGridNode.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SearchGridNode"/> class.
            </summary>
            <param name="ptLocation">The point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchGridNode.CalcHeuristicCost(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Calculates the heuristic cost.
            </summary>
            <param name="nodeTo">The node to.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchGridNode.CalcMoveCost(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Calcs the move cost.
            </summary>
            <param name="nodeFrom">The node from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SearchNodeArray">
            <summary>
            Collection of search nodes.
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNodeArray.m_array">
            <summary>
            Store array of SearchNodes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SearchNodeArray.m_count">
            <summary>
            Store count of SearchNodes
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.#ctor(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SearchNodeArray"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.#ctor(Syncfusion.Windows.Diagram.SearchNode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SearchNodeArray"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Add(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Add SearchNode to collection
            </summary>
            <param name="item">SearchNode to add</param>
            <returns>Index of added SearchNode</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Contains(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets value indicates is SearchNode in collection
            </summary>
            <param name="node">SearchNode to check</param>
            <returns>TRUE in node belongs to collection otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.RemoveAt(System.Int32)">
            <summary>
            Remove node by its index in collection
            </summary>
            <param name="index">Index of node</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets IEnumerator.
            </summary>
            <returns>The IEnumerator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.IndexOf(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Gets index of node in collection.
            </summary>
            <param name="item">Node to get index</param>
            <returns>Index of the node in collection. If node collection doesn't constrain node return -1</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Insert(System.Int32,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.GetInsertIndex(Syncfusion.Windows.Diagram.SearchNode,System.Int32,System.Int32)">
            <summary>
            Gets the index of the insert.
            </summary>
            <param name="node">The node.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>The index to insert the node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.ProvideSpaceFor(System.Int32)">
            <summary>
            Checks if collection can constrain Count + nItems. If not
            increase collection by collection capacity.
            </summary>
            <param name="nItems">Count of nodes to check collection size</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.ValidateIndex(System.Int32)">
            <summary>
            Validates the index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.Capacity">
            <summary>
            Gets or sets collection capacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.Item(System.Int32)">
            <summary>
            Gets or sets SearchNode by its index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether collection is synchronized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets SyncRoot.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.Count">
            <summary>
            Gets count of elements in collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator">
            <summary>
            The node search enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator.#ctor(Syncfusion.Windows.Diagram.SearchNodeArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator"/> class.
            </summary>
            <param name="tc">The search node array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SearchNodeArray.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SearchNodeArray.PriorityComparer">
            <summary>
            Priority comparer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.PriorityComparer.#ctor(Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SearchNodeArray.PriorityComparer"/> class.
            </summary>
            <param name="nodeEnd">The node end.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SearchNodeArray.PriorityComparer.Compare(Syncfusion.Windows.Diagram.SearchNode,Syncfusion.Windows.Diagram.SearchNode)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>1, if x is greater than y.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PortStyle">
            <summary>
            Represents customizable options  for the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PortStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.PortStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PortStyle.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name of the property which has changed.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortStyle.FillProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortStyle.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortStyle.StrokeStartLineCapProperty">
            <summary>
            Identifies the StrokeStartLineCap dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortStyle.StrokeEndLineCapProperty">
            <summary>
            Identifies the StrokeEndLineCap dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortStyle.StrokeLineJoinProperty">
            <summary>
            Identifies the StrokeLineJoin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortStyle.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PortStyle.Fill">
            <summary>
            Gets or sets the fill. This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the decorator with.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeThickness = 2;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PortStyle.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness. This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Thickness of the stroke.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeThickness = 2;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PortStyle.Stroke">
            <summary>
            Gets or sets the stroke.This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the decorator's border with.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeThickness = 2;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PortStyle.StrokeStartLineCap">
            <summary>
            Gets or sets the stroke start line cap.This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineCap"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeStartLineCap = PenLineCap.Round;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PortStyle.StrokeEndLineCap">
            <summary>
            Gets or sets the stroke end line cap. This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineCap"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeEndLineCap = PenLineCap.Triangle;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PortStyle.StrokeLineJoin">
            <summary>
            Gets or sets the stroke line join.This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineJoin"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeLineJoin = PenLineJoin.Miter;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.PortStyle.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DecoratorStyle">
            <summary>
            Represents customizable options  for Decorator Shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeStartLineCapProperty">
            <summary>
            Stores the StrokeStartLineCap property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeEndLineCapProperty">
            <summary>
            Stores the StrokeEndLineCap property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeProperty">
            <summary>
            Stores the Stroke property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeLineJoinProperty">
            <summary>
            Stores the StrokeLineJoin property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeThicknessProperty">
            <summary>
            Stores the StrokeThickness property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.FillProperty">
            <summary>
            Stores the Fill property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.DataProperty">
            <summary>
            Stores the Path of the Decorator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.WidthProperty">
            <summary>
            Stores the Width of the Decorator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorStyle.HeightProperty">
            <summary>
            Stores the Height of the Decorator
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DecoratorStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DecoratorStyle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DecoratorStyle.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the decorator with.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.TailDecoratorStyle.Fill = Brushes.Red;
                   o2.TailDecoratorStyle.Stroke = Brushes.Orange;
                   o2.TailDecoratorStyle.StrokeThickness = 2;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Thickness of the stroke.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.TailDecoratorStyle.Fill = Brushes.Red;
                   o2.TailDecoratorStyle.Stroke = Brushes.Orange;
                   o2.TailDecoratorStyle.StrokeThickness = 2;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DecoratorStyle.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the decorator's border with.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.TailDecoratorStyle.Fill = Brushes.Red;
                   o2.TailDecoratorStyle.Stroke = Brushes.Orange;
                   o2.TailDecoratorStyle.StrokeThickness = 2;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeStartLineCap">
            <summary>
            Gets or sets the stroke start line cap.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineCap"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.TailDecoratorStyle.Fill = Brushes.Red;
                   o2.TailDecoratorStyle.Stroke = Brushes.Orange;
                   o2.TailDecoratorStyle.StrokeStartLineCap = PenLineCap.Triangle;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeEndLineCap">
            <summary>
            Gets or sets the stroke end line cap.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineCap"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeEndLineCap = PenLineCap.Triangle;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DecoratorStyle.StrokeLineJoin">
            <summary>
            Gets or sets the stroke line join.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineJoin"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.TailDecoratorStyle.Fill = Brushes.Red;
                   o2.TailDecoratorStyle.Stroke = Brushes.Orange;
                   o2.TailDecoratorStyle.StrokeLineJoin = PenLineJoin.Miter;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LineConnector">
            <summary>
            Represents the Connectors to be used for making connections between the nodes. 
            </summary>
            <remarks>
            Connectors are objects that are used to create a link between two nodes. The node where the connection starts is known as the head node. The node where the connection ends is known as the tail node.
            <para>Three types of connectors are provided :Orthogonal, Straight and Bezier.</para>
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C# and add nodes and connections.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  //Specifies the node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   port.PortStyle.Fill = Brushes.Transparent;
                   port.Height = 11;
                   port.Width = 11;
                   n.Ports.Add(port);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                   Model.Nodes.Add(n1);
                   ConnectionPort port1 = new ConnectionPort();
                   port1.Node=n;
                   port1.Left=75;
                   port1.Top=50;
                   port1.PortShape = PortShapes.Arrow;
                   port1.PortStyle.Fill = Brushes.Transparent;
                   port1.Height = 11;
                   port1.Width = 11;
                   n1.Ports.Add(port1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.LabelHorizontalAlignment = HorizontalAlignment.Center;
                    o.LabelVerticalAlignment = HorizontalAlignment.Center;
                    o.Label="Syncfusion";
                    o.ConnectionHeadPort = port;
                    o.ConnectionTailPort = port1;
                    o.HeadDecoratorShape=DecoratorShape.Arrow;
                    o.TailDecoratorShape=DecoratorShape.Arrow;
                    Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.bridged">
            <summary>
            Used to flag bridging
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.invalidateBridging">
            <summary>
            Used to invalidate line bridging
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.minx">
            <summary>
            Used to store the smallest x value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.maxx">
            <summary>
            Used to store the largest x value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.miny">
            <summary>
            Used to store the smallest y value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.maxy">
            <summary>
            Used to store the largest y value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.WidenedPathGeometry">
            <summary>
            sets ts Widened Path Geomentry
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.mBendLength">
            <summary>
            Used to store the bend length.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.editor">
            <summary>
            Used to store the editor instance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.dview">
            <summary>
            Used to store the view instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.dc">
            <summary>
            Used to store the DiagramControl instance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.isdoubleclicked">
            <summary>
            Used to check if mouse is double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.headshape">
            <summary>
            Used to store the head decorator shape for internal use.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.tailshape">
            <summary>
            Used to store the tail decorator shape for internal use.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.m_isoverlapped">
            <summary>
            Used to check if nodes are overlapped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/> class.
            </summary>
            <param name="source">The source node.</param>
            <param name="sink">The sink node.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.#ctor(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/> class.
            </summary>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.Connection_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the Connection control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.LineConnector_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the LineConnector control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnector.LineAngleProperty">
            <summary>
            Used to store the LineAngle
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.Labeledit">
            <summary>
            Invoked when Label editing is started.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.CompleteConnEditing">
            <summary>
            Invoked when Label editing is complete
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the right mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.Del_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the delete menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.M1_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the bring to front menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.M2_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the bring forward menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.M3_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the send backward menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.M4_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the send to back menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.G1_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the group menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.G2_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the ungroup menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
             Provides class handling for the MouseDoubleClick routed event that occurs when 
             the mouse left button is clicked twice in succession.
            </summary>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.Lineconnector_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonUp routed event that occurs when
            the mouse left button is released over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseDown routed event that occurs when the mouse 
            button is pressed while the mouse pointer is over this control.
            </summary>
            <param name="e">The MouseButtonEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.ShowAdorner">
            <summary>
            Shows the adorner
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.HideAdorner">
            <summary>
            Hides the adorner.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.Line_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Calls Line_PropertyChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.InvalidateConnectorPathGeometry">
            <summary>
            Called whenever the head node, tail node or position of the node is changed. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.UpdateConnectorPathGeometry">
            <summary>
            Called whenever the head node, tail node or position of the node is changed. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.GetSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the Bezier segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point)of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <param name="num1">It specifies the amount of curve to be provided.Value is 150d.</param>
            <param name="isTop">Flag indicating the top side.</param>
            <param name="isBottom">Flag indicating the bottom side.</param>
            <param name="isLeft">Flag indicating the left side.</param>
            <param name="isRight">Flag indicating the right side.</param>
            <returns>The Bezier segment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnector.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point) of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <returns>The segment.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnector.LineAngle">
            <summary>
            Gets or sets the internal LineAngle. Used for internal assignments in case of LabelOrienation.
            </summary>
            <value>The internal tail decorator shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnector.InternalTailShape">
            <summary>
            Gets or sets the internal tail decorator shape. Used for internal assignments in case of overlapped nodes.
            </summary>
            <value>The internal tail decorator shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnector.InternalHeadShape">
            <summary>
            Gets or sets the internal head decorator shape. Used for internal assignments in case of overlapped nodes.
            </summary>
            <value>The internal head decorator shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnector.IsOverlapped">
            <summary>
            Gets or sets a value indicating whether the nodes have overlapped.
            </summary>
            <value>
            <c>true</c> if overlapped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnector.BendLength">
            <summary>
            Gets or sets the bent line length which is used only for Orthogonal Line ConnectorType.
            </summary>
            <remarks>
            Default value is 10d.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnector.ConnectionEndSpace">
            <summary>
            Gets or sets the distance between the connector end position and the node.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Value indicating the distance.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  //Specifies the node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                   Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.Label="Syncfusion";
                    o.ConnectionEndSpace= 6d; 
                    Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
            <remarks>
             Default value is 6. 
             In case, if a decorator shape other than none is specified, 
             a value &gt;=6 should be given to make the connection start from the edge of the node,
             or else the connector may cross the edge of the node .
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LineConnectorAdorner">
            <summary>
            Represents the adorner used for Connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.startpos">
            <summary>
            Used to store the line start point position. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.endpos">
            <summary>
            Used to store the line end point position. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.scrolloffsetx">
            <summary>
            Used to store the horizontal scroll offset. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.scrolloffsety">
            <summary>
            Used to store the vertical scroll offset. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.isheadnode">
            <summary>
            To check if it is a head node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.diagramPanel">
            <summary>
            Represents the IDiagramPage instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.adornerPanel">
            <summary>
            Represents the adorner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.lineconnector">
            <summary>
            Represents the line connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.pathGeometry">
            <summary>
            Represents the path geometry.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.fixedNodeConnection">
            <summary>
            Represents the fixed node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.movableNodeConnection">
            <summary>
            Represents the movable node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.hitNodeConnector">
            <summary>
            Represents the hit node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.headThumb">
            <summary>
            Represents the head thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.tailThumb">
            <summary>
            Represents the tail thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.drawingPen">
            <summary>
            Represents the drawing pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.visualCollection">
            <summary>
            Represents the VisualCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.previousHitNode">
            <summary>
            Represents the previously hit node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.dc">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.m_hitPort">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> which was hit.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.previoushitport">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> which was previously hit.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.centerport">
            <summary>
            Represents the center <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> .
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.centerhit">
            <summary>
            Specifies if the center port was hit.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.m_connpoint">
            <summary>
            Specifies the ConnectorPoint value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.m_head">
            <summary>
            Specifies if the thumb is head thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineConnectorAdorner.m_tail">
            <summary>
            Specifies if the thumb is tail thumb.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.LineConnectorAdorner"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.#ctor(Syncfusion.Windows.Diagram.IDiagramPage,Syncfusion.Windows.Diagram.IEdge)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineConnectorAdorner"/> class.
            </summary>
            <param name="dPanel">The <see cref="T:Syncfusion.Windows.Diagram.DiagramPage"/> instance.</param>
            <param name="edge">The edge connected to the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.GetVisualChild(System.Int32)">
            <summary>
            Returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The index of the visual object in the
            VisualCollection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index must be 0 because only one child element is present.</exception>
            <returns>
            The child in the VisualCollection at the specified index
            value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Calls render of the LineConnectorAdorner.
            </summary>
            <param name="drawingcontext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for the control.
            </summary>
            <param name="finalSize">The final area within the parent
            that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.DecoratorPositionChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Calls DecoratorPositionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.ConnectionAdorner_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the ConnectionAdorner control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.updateThumbStyle">
            <summary>
            Updates the style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.InvalidateThumbs">
            <summary>
            Invalidates the thumbs.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.Thumb_MouseRightButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseRightButtonUp event of the Thumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.Del_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the delete menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.M1_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the bring to front menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.M2_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the bring forward menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.M3_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the send backward menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.M4_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the send to back menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.G1_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the group menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.G2_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the ungroup menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.TailThumb_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseDoubleClick event of the tailThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.HeadThumb_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseDoubleClick event of the headThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.Thumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handles the DragStarted event of the Thumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs"/> instance containing the event data.</param>        
            
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.DoStackOperations(System.Object)">
            <summary>
            Does the stack operations.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.Thumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the DragDelta event of the Thumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.tailThumb_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the tailThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.headThumb_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the headThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.Thumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handles the DragCompleted event of the Thumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.UpdateConnectorAdornerPathGeometry(System.Windows.Point)">
            <summary>
            Is called whenever the path geometry is to be updated.
            </summary>
            <param name="position">The endpoint of the connector</param>
            <returns>The updated PathGeometry.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.GetSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the Bezier segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point)of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <param name="num1">It specifies the amount of curve to be provided.Value is 150d.</param>
            <param name="isTop">Flag indicating the top side.</param>
            <param name="isBottom">Flag indicating the bottom side.</param>
            <param name="isLeft">Flag indicating the left side.</param>
            <param name="isRight">Flag indicating the right side.</param>
            <returns>The Bezier segment.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point) of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <returns>The Bezier segment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.GetAdornerLinePoints(Syncfusion.Windows.Diagram.NodeInfo,System.Windows.Point)">
            <summary>
            Calculates the points which form the path geometry. 
            </summary>
            <param name="source">The head node</param>
            <param name="sinkPoint">The endpoint of the connector.</param>
            <returns>Collection of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.GetAdornerLinePoints">
            <summary>
            Gets the line points when no head node and tail node are specified.
            </summary>
            <returns>The List of points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.AddPoints(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Adds the points.
            </summary>
            <param name="linePoints">The line points.</param>
            <returns>The connection points along with the added point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.HitTesting(System.Windows.Point)">
            <summary>
            Identifies the hit object.
            </summary>
            <param name="hitPoint">The point to be tested.</param>
            <returns>True if hit object is Node ,false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineConnectorAdorner.FindConnectionEnd(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Makes the end connection to the respective node by finding the correct direction of the node.
            </summary>
            <param name="pathPoints">Collection of points.</param>
            <param name="startPoint">The start point of the connector.</param>
            <param name="endPoint">The end point of the connector.</param>
            <param name="isTop">Flag indicating the top side of the source.</param>
            <param name="isBottom">Flag indicating the bottom side of the source.</param>
            <param name="isLeft">Flag indicating the left side of the source.</param>
            <param name="isRight">Flag indicating the right side of the source.</param>
            <param name="tisTop">Flag indicating the top side of the target.</param>
            <param name="tisBottom">Flag indicating the bottom side of the target.</param>
            <param name="tisLeft">Flag indicating the left side of the target.</param>
            <param name="tisRight">Flag indicating the right side of the target.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnectorAdorner.HitNodeConnector">
            <summary>
            Gets or sets the node which is currently selected through HitTesting.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.Node"/>
            The Node which was hit.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnectorAdorner.HitPort">
            <summary>
            Gets or sets the Hit port
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnectorAdorner.ConnectorPoint">
            <summary>
            Gets or sets a value indicating whether to connect to another point on the page and indicates that no node was hit.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnectorAdorner.IsHeadThumb">
            <summary>
            Gets or sets a value indicating whether to connect to another point on the page and indicates that no node was hit.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineConnectorAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value>
            Count value.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LineStyle">
            <summary>
            Represents customizable options  for <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.StrokeStartLineCapProperty">
            <summary>
            Stores the StrokeStartLineCap property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.StrokeEndLineCapProperty">
            <summary>
            Stores the StrokeEndLineCap property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.strokecolor">
            <summary>
            Stores the Stroke property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.StrokeLineJoinProperty">
            <summary>
            Stores the StrokeLineJoin property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.StrokeThicknessProperty">
            <summary>
            Stores the StrokeThickness property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.FillProperty">
            <summary>
            Stores the Fill property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.StrokeDashArrayProperty">
            <summary>
            Stores the StrokeDashArray property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineStyle.connBase">
            <summary>
            Represents the ConnectorBase object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LineStyle.#ctor(Syncfusion.Windows.Diagram.ConnectorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LineStyle"/> class.
            </summary>
            <param name="cbase"><see cref="T:Syncfusion.Windows.Diagram.ConnectorBase"/> reference.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the decorator with.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeThickness = 2;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Thickness of the stroke.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeThickness = 2;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the decorator's border with.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeThickness = 2;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.StrokeStartLineCap">
            <summary>
            Gets or sets the stroke start line cap.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineCap"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeStartLineCap = PenLineCap.Triangle;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.StrokeEndLineCap">
            <summary>
            Gets or sets the stroke end line cap.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineCap"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeEndLineCap = PenLineCap.Triangle;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.StrokeLineJoin">
            <summary>
            Gets or sets the stroke line join.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.PenLineJoin"/>
            Enum specifying the shape to use.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeLineJoin = PenLineJoin.Miter;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LineStyle.StrokeDashArray">
            <summary>
            Gets or sets the stroke dash array.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.DoubleCollection"/>
            Double collection values .
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Node1");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   Node n1 = new Node(Guid.NewGuid(), "Node2");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   o2.LineStyle.Fill = Brushes.Red;
                   o2.LineStyle.Stroke = Brushes.Orange;
                   o2.LineStyle.StrokeLineJoin = PenLineJoin.Miter;
                   o2.LineStyle.StrokeDashArray=new DoubleCollection{1,2};
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectionPort">
            <summary>
            Represents a port which can be used to make connections to the node.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> class can be used for defining custom ports on the nodes.
            <para/>
            Any number of ports can be defined on a node.  By default every node has a center port. 
            </remarks>
            <example>
            C#:
            <para/>
            The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   port.PortStyle.Fill = Brushes.Transparent;
                   port.Height = 11;
                   port.Width = 11;
                   n.Ports.Add(port);
                   Node n1 = new Node(Guid.NewGuid(), "Decision1");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.OffsetX = 150;
                   n1.OffsetY = 125;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n1);
                   ConnectionPort port1 = new ConnectionPort();
                   port1.Node=n;
                   port1.Left=75;
                   port1.Top=50;
                   port1.PortShape = PortShapes.Arrow;
                   port1.PortStyle.Fill = Brushes.Transparent;
                   port1.Height = 11;
                   port1.Width = 11;
                   n1.Ports.Add(port1);
                   LineConnector o2 = new LineConnector();
                   o2.ConnectorType = ConnectorType.Straight;
                   o2.TailNode = n1;
                   o2.HeadNode = n;
                   o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   //Making connection to the ports.
                   o2.ConnectionHeadPort = port;
                   o2.ConnectionTailPort = port1;
                   Model.Connections.Add(o2);
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.ConnectionPort.Node"/>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.customportPointer">
            <summary>
            Represents the port pointer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.endpoint">
            <summary>
            Represents the current port position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.m_previousOriginPoint">
            <summary>
            Represents the previous port position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.node">
            <summary>
            Represents the current node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.diagramPage">
            <summary>
            Represents the Diagram Page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.m_mouseover">
            <summary>
            Boolean value indicating mouse over the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.dc">
            <summary>
            Represents the Diagram Control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.noderef">
            <summary>
            Refers to the node reference number.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.portref">
            <summary>
            Represents the port reference number.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.m_name">
            <summary>
            Refers to the name of the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.cportref">
            <summary>
            Refers to the center port reference number.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> class .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.#ctor(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> class.
            </summary>
            <param name="node">The node hosting this port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.#ctor(Syncfusion.Windows.Diagram.Node,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> class .
            </summary>
            <param name="node">The node hosting this port.</param>
            <param name="position">Position of the port</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.ConnectionPort_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Is invoked when the port is loaded.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.AllowDeleteProperty">
            <summary>
            Identifies the AllowDelete dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.IsDragOverPortProperty">
            <summary>
            Identifies the IsDragOverPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.TopProperty">
            <summary>
            Identifies the Top dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.LeftProperty">
            <summary>
            Identifies the Left dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionPort.PortShapeProperty">
            <summary>
            Identifies the PortShape dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.OnOffsetXChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [offset X changed].
            </summary>
            <param name="d">The dependency Object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.OnOffsetYChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [offset Y changed].
            </summary>
            <param name="d">The dependency Object..</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionPort.PortThumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the DragDelta event of the PortThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PortShape">
            <summary>
            Gets or sets the port shape.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.PortShapes"/>
            Enum specifying the port shapes.
            </value>
            <remarks>
            By default the port shape is Diamond. 
            </remarks>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "NewNode");
                   n.Shape = Shapes.Rectangle;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="New Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   //Specifies the port shape
                   port.PortShape = PortShapes.Arrow;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.Node">
            <summary>
            Gets or sets the node which is hosting this port.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.ConnectionPort.Node"/>
            Node object.
            </value>
            <remarks>
            Any number of <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> can be specified for a <see cref="P:Syncfusion.Windows.Diagram.ConnectionPort.Node"/>.
            <para/>
            By default every node has a center port.
            </remarks>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "NewNode");
                   n.Shape = Shapes.Rectangle;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="New Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   //Specifies the node
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   //Specifies the port shape
                   port.PortShape = PortShapes.Arrow;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.Edge">
            <summary>
            Gets or sets the edge which is hosting this port.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.Left">
            <summary>
            Gets or sets the left position of the port. This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Port left position.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "NewNode");
                   n.Shape = Shapes.Rectangle;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="New Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   //Specifies the node
                   port.Node=n;
                   //Specifies the left position of the port.
                   port.Left=75;
                   port.Top=10;
                   //Specifies the port shape
                   port.PortShape = PortShapes.Arrow;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.Top">
            <summary>
            Gets or sets the top position of the port. This is a dependency property.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Port top position.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "NewNode");
                   n.Shape = Shapes.Rectangle;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="New Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   //Specifies the node
                   port.Node=n;
                   //Specifies the left position of the port.
                   port.Left=75;
                   //Specifies the top position of the port.
                   port.Top=10;
                   //Specifies the port shape
                   port.PortShape = PortShapes.Arrow;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.IsDragOverPort">
            <summary>
            Gets or sets a value indicating whether this instance is drag over port.
            </summary>
            <value>
            <c>true</c> if this instance is drag over port; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.CustomPathStyle">
            <summary>
            Gets or sets the custom path style.
            </summary>
            <value>The custom path style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PortStyle">
            <summary>
            Gets or sets the port style.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.ConnectionPort.PortStyle"/>
            The style to be applied.</value>
            <remarks> Several customizable properties have been provided which can be accessed using the <see cref="P:Syncfusion.Windows.Diagram.ConnectionPort.PortStyle"/> class.</remarks>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Creates a node
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   //Define a Custom port for the node.
                   ConnectionPort port = new ConnectionPort();
                   port.Node=n;
                   port.Left=75;
                   port.Top=10;
                   port.PortShape = PortShapes.Arrow;
                   //Specifies the port style.
                   port.PortStyle.Fill = Brushes.Red;
                   port.PortStyle.Stroke = Brushes.Orange;
                   port.PortStyle.StrokeThickness = 2;
                   n.Ports.Add(port);
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.ConnectionPort.PortStyle"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PagePosition">
            <summary>
            Gets or sets the center position.
            </summary>
            <value>The center position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PreviousPortPoint">
            <summary>
            Gets or sets the previous port point.
            </summary>
            <value>The previous port point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PortPointer">
            <summary>
            Gets or sets the port pointer.
            </summary>
            <value>The port pointer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.CurrentPortPoint">
            <summary>
            Gets or sets the current port point.
            </summary>
            <value>The current port point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.Name">
            <summary>
            Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a XAML processor. This is a dependency property.
            </summary>
            <value></value>
            <returns>The name of the element. The default is an empty string.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.Ismouseover">
            <summary>
            Gets or sets a value indicating whether the mouse is over <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> .
            </summary>
            <value><c>true</c> if the mouse is over <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PortNodeReference">
            <summary>
            Gets or sets the port node reference.
            </summary>
            <value>The port node reference.</value>
            <remarks>Used for serialization purpose</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.PortReferenceNo">
            <summary>
            Gets or sets the port reference no.
            </summary>
            <value>The port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.CenterPortReferenceNo">
            <summary>
            Gets or sets the center port reference no.
            </summary>
            <value>The center port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionPort.AllowDelete">
            <summary>
            Gets or sets a value indicating whether [allow delete].
            </summary>
            <value><c>true</c> if [allow delete]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ContextViewManager">
            <summary>
            Manage the context view of the Diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ContextViewManager.RefreshLayout">
            <summary>
            Refresh will be called automatically, it can also be force to be updated by calling this funtion.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ContextViewManager.Layout">
            <summary>
            Layout to arrange the context view
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ContextViewManager.ContextViewMode">
            <summary>
            get or set ContextViewMode.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ContextViewMode">
            <summary>
            ContextViewMode to choose the type of view
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.BooleanToVisibilityConverter">
            <summary>
            This class converts a value from bool to visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from bool to Visibility.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns> A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.StringToPoints">
            <summary>
            This class converts string to points.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.StringToPoints.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.StringToPoints.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ChildDataParser">
            <summary>
            Converts collection of objects to Hierarchical Data format.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ChildDataParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ChildDataParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ChildDataParser.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ChildDataParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ChildDataParser.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ChildDataParser.ChildItems">
            <summary>
            Gets or sets the child items.
            </summary>
            <value>The child items.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DataParser">
            <summary>
            Converts collection of objects to Hierarchical Data format.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DataParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DataParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DataParser.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DataParser.ChildItems">
            <summary>
            Gets or sets the child items.
            </summary>
            <value>The child items.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramViewGrid">
            <summary>
            Represents the diagram grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramViewGrid.dview">
            <summary>
            Represents the DiagramView.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramViewGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramViewGrid"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramViewGrid.DiagramViewGrid_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the DiagramViewGrid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramViewGrid.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the DiagramViewGrid.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramViewGrid.DrawGrid(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the grid.
            </summary>
            <param name="context">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.HeightToWidthConverter">
            <summary>
            This class converts a value from Height to Width.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HeightToWidthConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.HeightToWidthConverter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HeightToWidthConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from Height to Width.
            </summary>
            <param name="values">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HeightToWidthConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PreviewNodeDropEventHandler">
            <summary>
            Represents PreviewNodeDrop Event Handler. Invoked just before the node object is created in the Drop opeartion.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PreviewNodeDropEventRoutedEventArgs">
            <summary>
            Represents PreviewNodeDrop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PreviewNodeDropEventRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PreviewNodeDropEventRoutedEventArgs.Cancel">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.PreviewNodeDropEventRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PreviewNodeDropEventRoutedEventArgs.Node">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="P:Syncfusion.Windows.Diagram.PreviewNodeDropEventRoutedEventArgs.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PreviewConnectorDropEventHandler">
            <summary>
            Represents PreviewConnectorDrop Event Handler. Invoked just before the LineConnector object is created in the Drop opeartion.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PreviewConnectorDropEventRoutedEventArgs">
            <summary>
            Represents PreviewConnectorDrop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PreviewConnectorDropEventRoutedEventArgs.conn">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PreviewConnectorDropEventRoutedEventArgs.Cancel">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.PreviewConnectorDropEventRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PreviewConnectorDropEventRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelChangedEventHandler">
            <summary>
            Represents Node Label Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs">
            <summary>
            Represents Node Label Changed Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.oldval">
            <summary>
            Used to store old value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.newval">
            <summary>
            Used to store new value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.c_node">
            <summary>
            Used to store the node
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="node">The node object.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.OldLabelValue">
            <summary>
            Gets or sets the old label value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.NewLabelValue">
            <summary>
            Gets or sets the new label value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.Node">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="P:Syncfusion.Windows.Diagram.LabelRoutedEventArgs.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelConnChangedEventHandler">
            <summary>
            Represents Connector Label Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs">
            <summary>
            Represents Connector Label Changed Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.oldval">
            <summary>
            Used to store old value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.newval">
            <summary>
            Used to store new value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.conn">
            <summary>
            Used to store the connector
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.Windows.Diagram.LineConnector,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.OldLabelValue">
            <summary>
            Gets or sets the old label value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.NewLabelValue">
            <summary>
            Gets or sets the new label value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.HeadNode">
            <summary>
            Gets or sets the HeadNode object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs.TailNode">
            <summary>
            Gets or sets the TailNode object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelEditConnChangedEventHandler">
            <summary>
            Represents  Label Edit Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs">
            <summary>
            Represents  Label Edit Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.oldval">
            <summary>
            Used to store old value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.conn">
            <summary>
            Used to store the connector
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.Windows.Diagram.LineConnector,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.OldLabelValue">
            <summary>
            Gets or sets the old label value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.HeadNode">
            <summary>
            Gets or sets the HeadNode object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.TailNode">
            <summary>
            Gets or sets the TailNode object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeEventHandler">
            <summary>
            Represents Node Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeRoutedEventArgs">
            <summary>
            Represents Node Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeRoutedEventArgs.Node">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="P:Syncfusion.Windows.Diagram.NodeRoutedEventArgs.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DrawingToolEventHandler">
            <summary>
            Represents DrawingTool Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DrawingToolEventArgs">
            <summary>
            Represents Node Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DrawingToolEventArgs.drawing_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DrawingToolEventArgs.drawing_type">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DrawingToolEventArgs.#ctor(System.Object,Syncfusion.Windows.Diagram.DrawingTools)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DrawingToolEventArgs.DrawingObject">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DrawingToolEventArgs.DrawingType">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeChangedEventHandler">
            <summary>
            Represents Node Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs">
            <summary>
            Represents  Node Changed Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.PreviousNode">
            <summary>
            Gets or sets the Node object.
            <value>
            The previous  Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs.CurrentNode">
            <summary>
            Gets or sets the Node object.
            <value>
            The current Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeDroppedEventHandler">
            <summary>
            Represents Node Drop Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs">
            <summary>
            Represents  Node Drop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs.h_node">
            <summary>
            Used to store the head node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs.itemname">
            <summary>
            Used to store the <see cref="T:Syncfusion.Windows.Diagram.SymbolPaletteItem"/> name.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.IShape,System.String,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs"/> class.
            </summary>
            <param name="node">The node object.</param>
            <param name="name">The symbolpalette item name.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs.DroppedNode">
            <summary>
            Gets or sets the Node object.
            <value>
            The dropped Node .<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs.SymbolPaletteItemName">
            <summary>
            Gets or sets the name of the symbol palette item.
            </summary>
            <value>The name of the symbol palette item.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectorDroppedEventHandler">
            <summary>
            Represents Connector Drop Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs">
            <summary>
            Represents  Connector Drop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs.line">
            <summary>
            Used to store the line connector
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.ConnectorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs.DroppedConnector">
            <summary>
            Gets or sets the LineConnector object.
            <value>
            The dropped Node .<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnChangedEventHandler">
            <summary>
            Represents Connector Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.ConnRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnRoutedEventArgs">
            <summary>
            Represents  Connector Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node .</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.HeadNode">
            <summary>
            Gets or sets the HeadNode .
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnRoutedEventArgs.TailNode">
            <summary>
            Gets or sets the TailNode .
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnDragChangedEventHandler">
            <summary>
            Represents Connection Drag Start Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs">
            <summary>
            Represents  Connector Drag Start Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tnode">The tail node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.FixedNodeEnd">
            <summary>
            Gets or sets the Fixed Node .
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs.MovableNodeEnd">
            <summary>
            Gets or sets the MovableNode .
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnDragEndChangedEventHandler">
            <summary>
            Represents Connection Drag End Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs">
            <summary>
            Represents  Connector Drag End Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector,Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tnode">The tail node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.FixedNodeEnd">
            <summary>
            Gets or sets the Fixed Node .
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs.HitNodeEnd">
            <summary>
            Gets or sets the HitNode .
            <value>
            Node object.<see cref="T:Syncfusion.Windows.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.BeforeCreateConnectionEventHandler">
            <summary>
            Represents Before Connection Create Event Handler.Invoked just before the connection is created.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs">
            <summary>
            Represents  BeforeCreateConnection Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs.conn">
            <summary>
            Used to store the Line connector
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectionDeleteEventHandler">
            <summary>
            Represents Connection Delete Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs">
            <summary>
            Represents  Connector Delete Event argument class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs"/> class.
            </summary>
            <param name="line">The line object.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs.line">
            <summary>
            Refers to the line instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs.DeletedLineConnector">
            <summary>
            Gets or sets the deleted line connector.
            </summary>
            <value>The deleted line connector.</value>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FitToPageRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.FitToPageRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeDeleteEventHandler">
            <summary>
            Represents Node Delete Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs">
            <summary>
            Represents  Node Delete Event argument class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs.#ctor(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> class.
            </summary>
            <param name="deletednode">The deleted node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs.node">
            <summary>
            Refers to the <see cref="T:Syncfusion.Windows.Diagram.Node"/> instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs.DeletedNode">
            <summary>
            Gets or sets the deleted node.
            </summary>
            <value>The deleted node.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeNudgeEventHandler">
            <summary>
            Represents Node Nudge Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LineNudgeEventHandler">
            <summary>
            Represents Line Nudge Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> instance containing the event data.</param>    
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LineNudgeEventArgs">
            <summary>
            Represents Node Nudge Event argument class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeNudgeEventArgs">
            <summary>
            Represents Line Nudge Event argument class.
            </summary>    
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Gripper">
            <summary>
            Represents the Thumb used for dragging the <see cref="T:Syncfusion.Windows.Diagram.Node"/>. This is essentially useful when the node content is set to be HitTestVisible and due to which it becomes difficult to drag the <see cref="T:Syncfusion.Windows.Diagram.Node"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DragProvider">
            <summary>
            Represents Node Drag class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.m_cursor">
            <summary>
            Used to store the cursor used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.dragdelta">
            <summary>
            Used to store the drag delta.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.rotateTransform">
            <summary>
            Represents the rotate transform.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.d">
            <summary>
            Used to hold the boolean value for IsDragging property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.dc">
            <summary>
            Used to store the DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.oldpositioncollection">
            <summary>
            Used to store the old position of the nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.itemcollection">
            <summary>
            Used to store the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.isdragged">
            <summary>
            Checks if drag operation is performed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DragProvider"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.DragProvider_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handles the DragStarted event of the DragProvider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.DragProvider_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handles the DragCompleted event of the DragProvider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DragProvider.MeasurementUnitsProperty">
            <summary>
            Specifies the MeasurementUnits dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.OnMeasurementUnitChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [measurement unit changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.DragProvider_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the DragDelta event of the DragProvider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DragProvider.DragGroup(Syncfusion.Windows.Diagram.DiagramControl,System.Windows.Controls.Primitives.DragDeltaEventArgs,Syncfusion.Windows.Diagram.Group,Syncfusion.Windows.Diagram.IDiagramPage,System.Windows.Point)">
            <summary>
            Drags the group.
            </summary>
            <param name="dc">The DiagramControl object.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
            <param name="g">The group.</param>
            <param name="diagramPanel">The diagram panel.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DragProvider.MeasurementUnits">
            <summary>
            Gets or sets the Measurement unit property.
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.MeasureUnits"/>
            Enum specifying the unit to be used.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DragProvider.Isdragging">
            <summary>
            Gets or sets a value indicating whether the node is dragged.
            </summary>
            <value><c>true</c> if node is been dragged; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Gripper.dc">
            <summary>
            Used to store the diagram control instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Gripper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Gripper"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Gripper.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Diagram.Gripper.OnInitialized(System.EventArgs)"/> event. 
            This method is invoked whenever <see cref="M:Syncfusion.Windows.Diagram.Gripper.OnInitialized(System.EventArgs)"/> property is set to true internally. 
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.HandleRenderer">
            <summary>
            Represents Resize helper class which helps in the resizing operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HandleRenderer.m_handleColor">
            <summary>
            Used to store the handle color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HandleRenderer.m_connectionType">
            <summary>
            Used to store the connector type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HandleRenderer.m_handleDisabledColor">
            <summary>
             Used to store the disabled handle color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HandleRenderer.m_handleOutlineColor">
            <summary>
             Used to store the handle outline color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HandleRenderer.m_sbrushHandle">
            <summary>
             Used to store the handle brush color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HandleRenderer.m_spenHandleOutline">
            <summary>
             Used to store the handle pen..
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HandleRenderer.ComputeDragBoundaries(System.Collections.Generic.IEnumerable{Syncfusion.Windows.Diagram.Node},System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the drag limits.
            </summary>
            <param name="selectedItems">IEnumerable Collection instance.</param>
            <param name="minoffx">The minoffx.</param>
            <param name="minoffy">The minoffy.</param>
            <param name="minimumHorDelta">The minimum horizontal delta.</param>
            <param name="minimumVertDelta">The minimum vertical delta.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HandleRenderer.ComputeDragBoundaries(Syncfusion.Windows.Diagram.Group,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Computes the drag boundaries.
            </summary>
            <param name="gnode">The group node.</param>
            <param name="minoffx">The minoffx.</param>
            <param name="minoffy">The minoffy.</param>
            <param name="minimumHorDelta">The minimum hor delta.</param>
            <param name="minimumVertDelta">The minimum vert delta.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HandleRenderer.ResizeLeft(System.Double,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.IDiagramPage,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Resizes the left side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="m_units">The measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HandleRenderer.ResizeTop(System.Double,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.IDiagramPage,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Resizes the top side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="m_units">The measure units..</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HandleRenderer.ResizeRight(System.Double,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.IDiagramPage,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Resizes the right side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="m_units">The measure units..</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HandleRenderer.ResizeBottom(System.Double,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.IDiagramPage,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Resizes the bottom side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="m_units">The measure units..</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HandleRenderer.HandleColor">
            <summary>
            Gets or sets the  color to be used to fill the  Handle.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the Handle with.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HandleRenderer.HandleOutlineColor">
            <summary>
            Gets or sets the  color to be used to fill the  Handle Border.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the Handle Border with.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HandleRenderer.HandleDisabledColor">
            <summary>
            Gets or sets the  color to be used to fill the  Handle when it is in disabled state.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Brush"/>
            Color to fill the Handle with.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HandleRenderer.ConnectorType">
            <summary>
            Gets or sets the type of connection to be used.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.HandleRenderer.ConnectorType"/>
            Enum specifying the type of the connector to be used.
            </value>
            <example>
            <para/>This example shows how to set ConnectorType in C#.
            <code language="C#">
             connObject.ConnectorType = ConnectorType.Orthogonal;
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ResizerThumb">
            <summary>
            Represents Node Resize Thumb .
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ResizerThumb.m_newsize">
            <summary>
            Used to store the new size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ResizerThumb.node">
            <summary>
            Used to store the current node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ResizerThumb.dc">
            <summary>
            Used to store the DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ResizerThumb.dview">
            <summary>
            Refers to the <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ResizerThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ResizerThumb"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ResizerThumb.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Diagram.ResizerThumb.OnInitialized(System.EventArgs)"/> event. 
            This method is invoked whenever <see cref="M:Syncfusion.Windows.Diagram.ResizerThumb.OnInitialized(System.EventArgs)"/> property is set to true internally. 
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ResizerThumb.ResizerThumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handles the DragStarted event of the ResizerThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ResizerThumb.Resizer_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the DragDelta event of the Resizer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ResizerThumb.ResizerThumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handles the DragCompleted event of the ResizerThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Group">
            <summary>
            Represents the Group class which enables grouping of the node.
            </summary>
            Groups enable to combine two or more objects so that the same operation gets performed on all the children of the group. 
            Group is essentially just another node added which acts as a container for other objects.
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.Group"/> in C# and add nodes to it..
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "End");
                   n1.Shape = Shapes.FlowChart_Start;
                   n1.Level = 1;
                   n1.OffsetX = 350;
                   n1.OffsetY = 325;
                   n1.Width = 100;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Group g = new Group(Guid.NewGuid(), "group1");
                   g.AddChild(n);
                   g.AddChild(n1);
                   diagramModel.Nodes.Add(g);
               }
               }
               }
            </code>
            <para/> Groups can also be added using the Group Command as follows in C#:
            <code language="C#">
             DiagramCommandManager.Group.Execute(diagramView.Page, diagramView);
            </code>
            <para/> Groups can be removed using the Ungroup Command as follows in C#:
            <code language="C#">
             DiagramCommandManager.Ungroup.Execute(diagramView.Page, diagramView);
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.Node"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramCommandManager"/>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Node">
            <summary>
            Represents the node class.
            </summary>
            <remarks>
            Nodes are graphical objects that can be drawn on the page by selecting them from the Symbol Palette and dropping them on the page, or they can be added through code behind.
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C# and add nodes to it.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.LabelVerticalAlignment = VerticalAlignment.Center;
                   n.LabelHorizontalAlignment = HorizontalAlignment.Center;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramModel"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IShape">
            <summary>
            Interface to a node in a hierarchy or graph of objects.
            </summary>
            <remarks>
            <para>
            A node is a named object in a hierarchical tree structure. Each node
            has a child and a parent. A node's name must is unique within the scope of its
            parent node. The Full name of a node is unique within the scope of the entire node hierarchy.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IShape.Move(System.Drawing.Point)">
            <summary>
            Moves the node, the argument being the motion vector.
            </summary>
            <param name="p">The point p.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name of the object.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.OffsetX">
            <summary>
            Gets or sets the logical offset X.
            </summary>
            <value>The logical offset X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.OffsetY">
            <summary>
            Gets or sets the logical offset Y.
            </summary>
            <value>The logical offset Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.InDegree">
            <summary>
            Gets the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.OutDegree">
            <summary>
            Gets the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Degree">
            <summary>
            Gets the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.InEdges">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.IsFixed">
            <summary>
            Gets or sets a value indicating whether this instance is fixed.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            <c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.ID">
            <summary>
            Gets the unique identifier of this node.
            </summary>
            <value>The unique identifier value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.OutEdges">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.InNeighbors">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.OutNeighbors">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Neighbors">
            <summary>
            Gets the neighbors.
            </summary>
            <value>The neighbors.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.ParentNode">
            <summary>
            Gets or sets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.ParentEdge">
            <summary>
            Gets or sets the edge between this node and its parent node in a tree
            structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Depth">
            <summary>
            Gets or sets the tree depth of this node.
            <remarks>The root's tree depth is
            zero, and each level of the tree is one depth level greater.
            </remarks> 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.ChildCount">
            <summary>
            Gets the number of tree children of this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.FirstChild">
            <summary>
            Gets this node's first tree child.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.LastChild">
            <summary>
            Gets this node's last tree child.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.PreviousSibling">
            <summary>
            Gets this node's previous tree sibling.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.NextSibling">
            <summary>
            Gets this node's next tree sibling.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Children">
            <summary>
            Gets or sets an iterator over this node's tree children.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.ActualWidth">
            <summary>
            Gets the Actual Width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.ActualHeight">
            <summary>
            Gets the Actual Height.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.IsDragConnectionOver">
            <summary>
            Gets or sets a value indicating whether this instance is drag connection over.
            </summary>
            <value>
            <c>true</c> if this instance is drag connection over; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Parents">
            <summary>
            Gets or sets the parent nodes  based on the connections in a hierarchical layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.PreviousShape">
            <summary>
            Gets the previous shape.
            </summary>
            <value>The previous shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Row">
            <summary>
            Gets or sets the row number.
            </summary>
            <value>The row number.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IShape.Column">
            <summary>
            Gets or sets the column number.
            </summary>
            <value>The column number.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.dc">
            <summary>
            Used to store Diagram Control object
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_groups">
            <summary>
            used to store the groups.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_rank">
            <summary>
            Used to store the rank
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.no">
            <summary>
            Used to store the count of nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.startPoint">
            <summary>
            Used to store the start point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_id">
            <summary>
            Used to store the Guid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_inEdges">
            <summary>
            Used to store the in edges
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_outEdges">
            <summary>
            Used to store the out edges.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_edges">
            <summary>
            Used to store the edges
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mParents">
            <summary>
            Used to store the parents
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_ports">
            <summary>
            Used to store the ports.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mParentNode">
            <summary>
            Used to store the parent node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mParentEdge">
            <summary>
            Used to store the parent edge.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.treeChildren">
            <summary>
            Used to store the tree children
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mDepth">
            <summary>
            Used to store the depth.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mRectangle">
            <summary>
            Used to store the bounding rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mIsFixed">
            <summary>
            Used to store the IsFixed property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.MdiagramControl">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.dview">
            <summary>
            Used to store the View.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.ex">
            <summary>
            Used to store the execution check.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mouseup">
            <summary>
            Used to store the mouse up state
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.mousedown">
            <summary>
             Used to store the mouse down state
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.lastNodeClick">
            <summary>
            Used to store the last node click instance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.lastNodePoint">
            <summary>
            Used to store the last node click point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.editor">
            <summary>
            Used to store the editor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.resizenode">
            <summary>
            Used to store the resize node property setting.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.rotatethumb">
            <summary>
            Used to store the rotate thumb
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.grouprotatethumb">
            <summary>
            Used to store the Group's rotate thumb
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.sourceHitPort">
            <summary>
            Used to store the source port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.pno">
            <summary>
            Used to store the port no.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_oldindex">
            <summary>
            Used to store the old ZIndex
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_newindex">
            <summary>
            Used to store the new ZIndex
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.oldoff">
            <summary>
            Used to store the old offset position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.state">
            <summary>
            Used to store the state of the node in case of cycle detection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.canconn">
            <summary>
            Used to check if this node is to be connected o its parent or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.isdoubleclicked">
            <summary>
            Used to check if mouse is double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.osize">
            <summary>
            Used to store the old size of node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.pwidth">
            <summary>
            Used to store the node width in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.pheight">
            <summary>
            Used to store the node height in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.m_IsResizing">
            <summary>
            Used to Store the Whether the Node is Resized or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.oldx">
            <summary>
            Used to store the old offsetx while undo/redo.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.oldy">
            <summary>
            Used to store the old offsety while undo/redo.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.exeonce">
            <summary>
            Used to check if oldx and oldy are set once.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.Node"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Node"/> class.
            </summary>
            <param name="id">The Guid id.</param>
            <param name="name">The node name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Node"/> class.
            </summary>
            <param name="id">The Guid id.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Node"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Node_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the Node control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized"/> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Node_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Calls Node_Loaded method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Node_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the Node control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.GetInfo">
            <summary>
            Gets the information about the node.
            </summary>
            <returns>Node info value</returns>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeInfo"/>
            </value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.CustomEffectProperty">
            <summary>
            Identifies the CustomEffect dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelAngleProperty">
            <summary>
            Identifies the LabelAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LogicalOffsetYProperty">
            <summary>
            Identifies the LogicalOffsetY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LogicalOffsetXProperty">
            <summary>
            Identifies the LogicalOffsetX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.RotateAngleProperty">
            <summary>
            Identifies the RotateAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelWidthProperty">
            <summary>
            Identifies the LabelWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelHeightProperty">
            <summary>
            Identifies the LabelHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelTextWrappingProperty">
            <summary>
            Identifies the LabelTextWrapping dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelFontSizeProperty">
            <summary>
            Identifies the LabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelFontFamilyProperty">
            <summary>
            Identifies the LabelFontFamily dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelFontWeightProperty">
            <summary>
            Identifies the LabelFontWeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelFontStyleProperty">
            <summary>
            Identifies the LabelFontStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelTextTrimmingProperty">
            <summary>
            Identifies the LabelTextTrimming dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelTextAlignmentProperty">
            <summary>
            Identifies the LabelTextAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.GripperVisibilityProperty">
            <summary>
            Identifies the GripperVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.GripperStyleProperty">
            <summary>
            Identifies the GripperStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelBackgroundProperty">
            <summary>
             Identifies the LabelBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelForegroundProperty">
            <summary>
             Identifies the LabelForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsLabelEditableProperty">
            <summary>
            Identifies the IsLabelEditable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.AllowSelectProperty">
            <summary>
            Identifies the AllowSelect dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.AllowMoveProperty">
            <summary>
            Identifies the AllowMove dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.AllowRotateProperty">
            <summary>
            Identifies the AllowRotate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.AllowResizeProperty">
            <summary>
            Identifies the AllowResize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.AllowPortDragProperty">
            <summary>
            Identifies the AllowPortDrag dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.AllowDeleteProperty">
            <summary>
            Identifies the AllowDelete dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.MeasurementUnitsProperty">
            <summary>
            Identifies the MeasurementUnits property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.ParentIDProperty">
            <summary>
            Identifies the ParentId dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsGroupedProperty">
            <summary>
            Identifies the IsGroup dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.DragProviderTemplateProperty">
            <summary>
            Identifies the DragProviderTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsDragConnectionOverProperty">
            <summary>
            Identifies the IsDragConnectionOver dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.ShapeProperty">
            <summary>
            Identifies the Shape dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.CustomPathStyleProperty">
            <summary>
            Identifies the CustomPathStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LevelProperty">
            <summary>
            Identifies the Level dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.TreatAsObstacleProperty">
            <summary>
            Identifies the Node's Obstacle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.PortVisibilityProperty">
            <summary>
            Identifies the PortVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.PageEditableIndicatorProperty">
            <summary>
            Identifies the IsPageEditable(DiagramView) dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsPortEnabledProperty">
            <summary>
            Identifies the IsCenterPortEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsDoubleClickedProperty">
            <summary>
            Identifies the IsDoubleClicked dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.EnableMultilineLabelProperty">
            <summary>
            Identifies the EnableMultilineLabel dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.DeletingModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DeletingMode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.RaiseClickEvent">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.x">
            <summary>
            Raises the drag start event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.y">
            <summary>
            Raises the drag start event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.RaiseNodeDragEndEvent">
            <summary>
            Raises the drag end event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.RaiseDoubleClickEvent">
            <summary>
            Raises the double click event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseDown routed event that occurs when the mouse 
            button is pressed while the mouse pointer is over this control.
            </summary>
            <param name="e">The MouseButtonEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the right mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Del_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the delete menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Front_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the bring to front menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Forward_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the bring forward menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Backward_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the send backward menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Back_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the send to back menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Group_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the group menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Ungroup_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the ungroup menu item.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when the mouse 
            pointer  is over this control.
            </summary>
            <param name="e">The MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.NodeLabeledit">
            <summary>
            Invoked when Label editing is started.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.CompleteEditing">
            <summary>
            Invoked when label editing is complete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.IsDoubleClick(System.Windows.Point)">
            <summary>
            Called when the mouse button is clicked twice.
            </summary>
            <param name="position">Mouse Position</param>
            <returns>true if double clicked, false otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Node_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the Node control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnUnitsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [units changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnRotateAngleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when rotate angle is changed.
            </summary>
            <param name="d">The dependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnLogicalOffsetXChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [logical offset X changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnLogicalOffsetYChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [logical offset Y changed].
            </summary>
            <param name="d">The DependencyObject .</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Node_LayoutUpdated">
            <summary>
            Calls Node_LayoutUpdated method of the instance, notifies of the sender value changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.GetDiagramView(System.Windows.DependencyObject)">
            <summary>
            Gets the diagram view.
            </summary>
            <param name="element">The element.</param>
            <returns>The DiagramView instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.GetPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the panel.
            </summary>
            <param name="element">The element.</param>
            <returns>The panel instance</returns>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Node.IsExpandedProperty">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            <c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Node.Move(System.Drawing.Point)">
            <summary>
            Moves the node, the argument being the motion vector.
            </summary>
            <param name="p">The point p.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Boundaries">
            <summary>
            Gets or sets the boundaries.
            </summary>
            <value>The boundaries.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.RotateAngle">
            <summary>
            Gets or sets the rotate angle.
            </summary>
            <value>The rotate angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ContentHitTestVisible">
            <summary>
            Gets or sets a value indicating whether content is hit test visible. Used for serialization purposes internally.
            </summary>
            <value>
            <c>true</c> if [content hit test visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Oldsize">
            <summary>
            Gets or sets the old size.
            </summary>
            <value>The old size.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Groups">
            <summary>
            Gets the groups to which the INodeGroup objects belong.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.GripperVisibility">
            <summary>
            Gets or sets the gripper visibility.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Visibility"/>
            Default value is Collapsed.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.GripperVisibility=Visibility.Visible;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.Gripper"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.GripperStyle">
            <summary>
            Gets or sets the gripper style.  
            </summary>
            <remarks>
            When the gripper style is set, it is necessary to specify the Width, Height, HorizontalAlignment, VerticalAlignment and the Margin properties because GripperStyle property overrides the default settings.
            </remarks>
            <example>
            <para/>The following example shows how to write a style for the Gripper in Window.Resources.
            <code language="XAML">
             &lt;Style x:Key="GripperStyle"  TargetType="{x:Type syncfusion:Gripper}"&gt;
                   &lt;Setter Property="Width" Value="30"/&gt;
                   &lt;Setter Property="Height" Value="30"/&gt;
                   &lt;Setter Property="HorizontalAlignment" Value="Left"/&gt;
                   &lt;Setter Property="VerticalAlignment" Value="Top"/&gt; 
                   &lt;Setter Property="Margin" Value="10,-15,0,0"/&gt;
                   &lt;Setter Property="Template"&gt;
                       &lt;Setter.Value&gt;
                           &lt;ControlTemplate TargetType="{x:Type syncfusion:Gripper}"&gt;
                               &lt;Border Background="Blue" CornerRadius="10"   /&gt;
                           &lt;/ControlTemplate&gt;
                      &lt;/Setter.Value&gt;
                   &lt;/Setter&gt;
               &lt;/Style&gt;
            </code>
            <para/>The following code shows how to assign the style created to the Gripper of the <see cref="T:Syncfusion.Windows.Diagram.Node"/>.
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.GripperStyle=this.Resources["GripperStyle"] as Style.
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.Gripper"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.AllowRotate">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> rotation is allowed.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if rotation is enabled, false otherwise.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.AllowRotate=true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.AllowResize">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> resize is allowed.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if resizing is enabled, false otherwise.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.AllowResize=true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.AllowMove">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> can be moved.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if drag is enabled, false otherwise.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.AllowMove=true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.AllowSelect">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> can be selected.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if selection is enabled, false otherwise.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.AllowSelect=true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.AllowDelete">
            <summary>
            Gets or sets a value indicating whether [allow delete].
            </summary>
            <value><c>true</c> if [allow delete]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ShowRotator">
            <summary>
            gets or sets a value indicating whether [show rorator ] 
            </summary>
            <value><c>true</c>if[show rotator];oherwise,<c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ResizeThisNode">
            <summary>
            Gets or sets a value indicating whether to resize this node.
            </summary>
            <value><c>true</c> if [resize this node]; otherwise, <c>false</c>.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ReferenceNo">
            <summary>
            Gets or sets the reference no.
            </summary>
            <value>The reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Controls.Panel"/>
            Panel instance.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.TreatAsObstacle">
            <summary>
            Gets or sets a value indicating whether the node is treat as obstacle or not.
            Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            Type: <see cref="T:System.String"/>
            String value.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   node.Label="SyncNode";
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
            <remarks>
            Default value is an empty string.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelVisibility">
            <summary>
            Gets or sets the label visibility.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Visibility"/>
            Enum specifying the visibility.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   node.LabelVisibility=Visibility.Visible;
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
            <remarks>
            Default value is visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelHorizontalAlignment">
            <summary>
            Gets or sets the HorizontalAlignment of the Label. This will take effect only if the LabelWidth is set.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.HorizontalAlignment"/>
            Enum specifying the alignment position.</value>
            <remarks>Default HorizontalAlignment is at the Center.</remarks>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   node.LabelHorizontalAlignment=HorizontalAlignment.Left;
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelVerticalAlignment">
            <summary>
            Gets or sets the VerticalAlignment of the Label.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.VerticalAlignment"/>
            Enum specifying the alignment position.</value>
            <remarks>Default VerticalAlignment is at the Top.</remarks>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   node.LabelVerticalAlignment = VerticalAlignment.Left;
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelAngle">
            <summary>
            Gets or sets the label angle.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Angle value in pixels.
            </value>
            <remarks>Default Angle is 0d.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.IsDragConnectionOver">
            <summary>
            Gets or sets a value indicating whether the connection drag is over.
            </summary>
            <value>
            <c>true</c> if connection drag is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Shape">
            <summary>
            Gets or sets the shape.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Enum specifying the Shapes .
            </value>
            <remarks>
            Several built-in shapes are provided. The user can select from any of the built-in shapes or specify their own custom shape using the <see cref="P:Syncfusion.Windows.Diagram.Node.CustomPathStyle"/> property.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   node.LabelVerticalAlignment = VerticalAlignment.Left;
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.CustomPathStyle">
            <summary>
            Gets or sets the PathStyle of the Node.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Style"/>
            </value>
            <remarks>
            While setting the custom path, the shape of the node can be set to Custom.
            </remarks>
            <example>
            <para/>This example shows how to set PathStyle of a node .
            Specify a resource in XAML .
            <code language="XAML">
            &lt;Style TargetType="{x:Type Path}" x:Key="myNode"&gt;
                &lt;Setter Property="Data" Value="M200,239L200,200 240,239 280,202 320,238 281,279 240,244 198,279z"&gt;&lt;/Setter&gt;
                &lt;Setter Property="Fill" Value="MidnightBlue" /&gt;
            &lt;/Style&gt;
             </code>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                  Style customstyle = (Style)this.Resources["myNode"];
                   n.CustomPathStyle=customstyle;
                   n.Shape = Shapes.Custom;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
            <remarks>
            Based on the level property , the nodes belonging to the same level can be customized to have the same look and feel.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Level = 2;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            node.LabelVerticalAlignment = VerticalAlignment.Left;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Position">
            <summary>
            Gets or sets the Center Position  of the Node.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Point"/>
            Center Point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.IsPortEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is center port enabled.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is enabled, false otherwise.
            </value>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.PageEditableIndicator">
            <summary>
            Gets the information about DiagramView's IsPageEditable property.
            </summary>
            <returns>Node bool value</returns>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.Node.PageEditableIndicator"/>
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.IsDoubleClicked">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> is double clicked.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Syncfusion.Windows.Diagram.Node"/> is double clicked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Ports">
            <summary>
            Gets or sets the ports.
            </summary>
            <value>The ports.</value>
            <example>
            C#:
            <para/>
            The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/> in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //Creates a node
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            Model.Nodes.Add(n);
            //Define a Custom port for the node.
            ConnectionPort port = new ConnectionPort();
            port.Node=n;
            port.Left=75;
            port.Top=10;
            port.PortShape = PortShapes.Arrow;
            port.PortStyle.Fill = Brushes.Transparent;
            port.Height = 11;
            port.Width = 11;
            n.Ports.Add(port);
            Node n1 = new Node(Guid.NewGuid(), "Decision1");
            n1.Shape = Shapes.FlowChart_Process;
            n1.IsLabelEditable = true;
            n1.Label = "Alarm Rings";
            n1.Level = 2;
            n1.OffsetX = 150;
            n1.OffsetY = 125;
            n1.Width = 150;
            n1.Height = 75;
            Model.Nodes.Add(n1);
            ConnectionPort port1 = new ConnectionPort();
            port1.Node=n;
            port1.Left=75;
            port1.Top=50;
            port1.PortShape = PortShapes.Arrow;
            port1.PortStyle.Fill = Brushes.Transparent;
            port1.Height = 11;
            port1.Width = 11;
            n1.Ports.Add(port1);
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.ConnectionPort"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.PortVisibility">
            <summary>
            Gets or sets the port visibility.
            </summary>
            <value>The port visibility.</value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.PortVisibility = Visibility.Visible;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.AllowPortDrag">
            <summary>
            Gets or sets a value indicating whether port can be moved or not.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if drag is enabled, false otherwise.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.AllowPortDrag = true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelWidth">
            <summary>
            Gets or sets the width of the label.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            By default the label width equals the node width.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelWidth = 50;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelHeight">
            <summary>
            Gets or sets the height of the label.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            By default the label height equals 20.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelHeight = 50;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelTextWrapping">
            <summary>
            Gets or sets the label text wrapping.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.TextWrapping"/>
            By default it is set to NoWrap.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelTextWrapping = TextWrapping.Wrap;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelFontSize">
            <summary>
            Gets or sets the size of the label font.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            By default it is set to 11d.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelFontSize = 14;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelFontFamily">
            <summary>
            Gets or sets the label font family.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.FontFamily"/>
            By default it is set to Arial.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelFontFamily = new FontFamily("Verdana");
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelFontWeight">
            <summary>
            Gets or sets the label font weight.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.FontWeight"/>
            By default it is set to SemiBold.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelFontWeight = FontWeights.Bold;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelFontStyle">
            <summary>
            Gets or sets the label font style.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.FontStyle"/>
            By default it is set to Normal.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelFontStyle = FontStyles.Italic;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelTextTrimming">
            <summary>
            Gets or sets the label text trimming.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.TextTrimming"/>
            By default it is set to CharacterEllipsis.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelTextTrimming = TextTrimming.None;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelBackground">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.Node.Brush"/>
            By default it is set to White.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelBackground = Brushes.Red;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.HitPathStyle">
            <summary>
            Gets or Sets the border background,thickness,borderbrush,etc.,
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelForeground">
            <summary>
            Gets or sets the label foreground.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.Node.Brush"/>
            By default it is set to Black.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.LabelForeground = Brushes.Blue;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LabelTextAlignment">
            <summary>
            Gets or sets the label text alignment.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.TextAlignment"/>
            By default it is set to Center.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            n.TextAlignment = TextAlignment.Left;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.EnableMultilineLabel">
            <summary>
            Gets or sets a value indicating whether [enable multiline label].
            </summary>
            <value>
            	<c>true</c> if [enable multiline label]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.State">
            <summary>
            Gets or sets the state of the node in case of cycle detection.
            </summary>
            <value>The state of the node. (0-->non-visited; 1-->Visited and InProgress; 2-->Done)</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.CanConnect">
            <summary>
            Gets or sets a value indicating whether this node can be connected to the other specified node in case of hierarchical-tree layout.
            </summary>
            <value>
            <c>true</c> if can connect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.PixelWidth">
            <summary>
            Gets or sets the width of the node in pixels.
            </summary>
            <value>The width of the node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.PixelHeight">
            <summary>
            Gets or sets the height of the node in pixels.
            </summary>
            <value>The height of the node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.MeasurementUnits">
            <summary>
            Gets or sets the Measurement unit property.
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.MeasureUnits"/>
            Enum specifying the unit to be used.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.CustomEffect">
            <summary>
             Apply effect for Node without using Framework Effect property.
             Issue Details:
                   When an effect is applied to a Node, printing a diagram page results in clipping of Node. This issue seems to exist in printing in framework level.
             Solution: When an effect is applied to one of content in Node’s Template this issue is not reproduced.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.DeletingMode">
            <summary>
            Identifies the DeletingMode dependency property.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.Node.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.IsGrouped">
            <summary>
            Gets or sets a value indicating whether this instance is grouped.
            </summary>
            <value>
            <c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            <c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OldZIndex">
            <summary>
            Gets or sets the old ZIndex value.
            </summary>
            <value>The old ZIndex value</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.NewZIndex">
            <summary>
            Gets or sets the new ZIndex value.
            </summary>
            <value>The new ZIndex value</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Rank">
            <summary>
            Gets or sets the Rank to which the node belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Parents">
            <summary>
            Gets or sets the parent nodes  based on the connections in a hierarchical layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.IsFixed">
            <summary>
            Gets or sets a value indicating whether this instance is fixed.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.InDegree">
            <summary>
            Gets the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
            <value>The in degree</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OutDegree">
            <summary>
            Gets the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
            <value>The out degree.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Degree">
            <summary>
            Gets the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.InEdges">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the target.
            </summary>
            <value>The In Edges .</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OutEdges">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
            <value>The OutEdges</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
            <value>The Collection of Edges</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.InNeighbors">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
            <value>Collection of inedges.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OutNeighbors">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
            <value>Collection of out edges</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Neighbors">
            <summary>
            Gets an iterator over all nodes connected to this node.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ParentNode">
            <summary>
            Gets or sets the parent of the entity
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ParentEdge">
            <summary>
            Gets or sets the edge between this node and its parent node in a tree
            structure.
            </summary>
            <value>The Parent edge</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Depth">
            <summary>
            Gets or sets the tree depth of this node.
            <remarks>The root's tree depth is
            zero, and each level of the tree is one depth level greater.
            </remarks>
            </summary>
            <value>The depth value</value>
            <remarks>The root's tree depth is
            zero, and each level of the tree is one depth level greater.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ChildCount">
            <summary>
            Gets the number of tree children of this node.
            </summary>
            <value>The child count</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.FirstChild">
            <summary>
            Gets this node's first tree child.
            </summary>
            <value>The first child</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LastChild">
            <summary>
            Gets this node's last tree child.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.PreviousSibling">
            <summary>
            Gets this node's previous tree sibling.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.NextSibling">
            <summary>
            Gets this node's next tree sibling.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.PreviousShape">
            <summary>
            Gets the previous shape.
            </summary>
            <value>The previous shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Row">
            <summary>
            Gets or sets the row.
            </summary>
            <value>The row count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Children">
            <summary>
            Gets or sets an iterator over this node's tree children.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ID">
            <summary>
            Gets the unique identifier of this node.
            </summary>
            <value>The unique identifier value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.NodeID">
            <summary>
            Gets the Node ID
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
            <value>The parent ID.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
            <value>The full name.</value>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LogicalOffsetX">
            <summary>
            Gets or sets the logical offset X. Used for internal calculation.
            </summary>
            <value>The logical offset X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.LogicalOffsetY">
            <summary>
            Gets or sets the logical offset Y. Used for internal calculation.
            </summary>
            <value>The logical offset Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OldOffset">
            <summary>
            Gets or sets the old offset position.
            </summary>
            <value>The old offset point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OffsetX">
            <summary>
            Gets or sets the offset X.
            </summary>
            <value>The offset X.</value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            node.AllowRotate=true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Node.OffsetY">
            <summary>
            Gets or sets the offset Y.
            </summary>
            <value>The offset Y.</value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.IsLabelEditable = true;
            n.Label = "Start";
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            n.ToolTip="Start Node";
            node.AllowRotate=true;
            Model.Nodes.Add(n);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Group.m_id">
            <summary>
            Used to store the Group Guid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Group.m_childs">
            <summary>
            Used to store the group children.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Group.gchild">
            <summary>
            Used to store the group children reference number.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Group.dview">
            <summary>
            Used to store the <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Group"/> class.
            </summary>
            <param name="id">The Guid id.</param>
            <param name="name">The node name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Group"/> class.
            </summary>
            <param name="id">The Guid id.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.Group_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Handles the LayoutUpdated event of the Group control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.GetLogicalOffsetX">
            <summary>
            Calculates the OffsetX position for the node.
            </summary>
            <returns>The OffsetX value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.GetLogicalOffsetY">
            <summary>
            Calculates the OffsetY position for the node.
            </summary>
            <returns>The OffsetY value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.GetRightmostposition">
            <summary>
            Gets the rightmost position  of the group.
            </summary>
            <returns>Double value representing the rightmost position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.GetBottommostposition">
            <summary>
            Gets the bottommost position  of the group.
            </summary>
            <returns>Double value representing the rightmost position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.AddChild(Syncfusion.Windows.Diagram.INodeGroup)">
            <summary>
            Adds a child to the group.
            </summary>
            <param name="child">The child to be added to the group.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Node n1 = new Node(Guid.NewGuid(), "End");
            n1.Shape = Shapes.FlowChart_Start;
            n1.Level = 1;
            n1.OffsetX = 350;
            n1.OffsetY = 325;
            n1.Width = 100;
            n1.Height = 75;
            Model.Nodes.Add(n);
            Model.Nodes.Add(n1);
            Group g = new Group(Guid.NewGuid(), "group1");
            g.AddChild(n);
            g.AddChild(n1);
            diagramModel.Nodes.Add(g);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.GroupCheck(Syncfusion.Windows.Diagram.INodeGroup)">
            <summary>
            Checks if the child is a group
            </summary>
            <param name="node">The INodeGroup object to check.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Group.RemoveChild(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Removes a child from the group.
            </summary>
            <param name="child">The child to be removed from the group.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "End");
                   n1.Shape = Shapes.FlowChart_Start;
                   n1.Level = 1;
                   n1.OffsetX = 350;
                   n1.OffsetY = 325;
                   n1.Width = 100;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Group g = new Group(Guid.NewGuid(), "group1");
                   g.AddChild(n);
                   g.AddChild(n1);
                   diagramModel.Nodes.Add(g);
                   g.RemoveChild(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Group.GroupNodes">
            <summary>
            Gets or sets the areas.
            </summary>
            <value>The areas.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Group.NodeChildren">
            <summary>
            Gets the group children.
            </summary>
            <value>The group children.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Group.GroupChildrenRef">
            <summary>
            Gets or sets the group children reference number. Used for serialization purposes.
            </summary>
            <value>The group children ref.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Group.ID">
            <summary>
            Gets the unique identifier of this node.
            </summary>
            <value>The unique identifier value.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.tOffsetX">
            <summary>
            Stores temprary offsetx.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.tOffsetY">
            <summary>
            Stores temprary offsety.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.m_nodes">
            <summary>
            Stores nodes reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.m_lines">
            <summary>
            Stores lines reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.VisibleProperty">
            <summary>
            Identifies the Visible property. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.ActiveProperty">
            <summary>
            Identifies the Acive property. This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.ResetPosition(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Resets the position.
            </summary>
            <param name="n">The node to be reset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.ResetPosition(Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Resets the position.
            </summary>
            <param name="l">Line to be reset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.ResetPosition">
            <summary>
            Resets the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.Nodes_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Nodes control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.Lines_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Lines control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.NodesProperty">
            <summary>
            Identifies the Node collection. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.LinesProperty">
            <summary>
            Indentifies the Line collection. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Layer.LayerPropertyChangedEvent">
            <summary>
            Register routed event for layer property changed
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.#cctor">
            <summary>
             Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.Layer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.Layer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.Layer_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Handles the LayoutUpdated event of the Layer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.OnNodesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [nodes changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The DependencyPropertyChangedEventArgs<see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.OnLinesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [lines changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The DependencyPropertyChangedEventArgs<see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.OnVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [visibility changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The DependencyPropertyChangedEventArgs<see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Layer.OnActiveChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [active changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The DependencyPropertyChangedEventArgs<see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Layer.NodesRef">
            <summary>
            Gets or sets the nodes ref.
            </summary>
            <value>The nodes ref for serialization purpose.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Layer.LinesRef">
            <summary>
            Gets or sets the lines ref.
            </summary>
            <value>The lines ref for serialization purpose.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Layer.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Diagram.Layer"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
            <example>
            The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  Node NewClient;
                  Node Register;
                  NewClient = new Node(Guid.NewGuid(), "NewClient");
                  NewClient.Shape = Shapes.FlowChart_Decision;
                  NewClient.OffsetX = 40;
                  NewClient.OffsetY = 100;
                  NewClient.ToolTip = "FlowChart_Decision";
                  NewClient.Label = "New Client"
                  Register = new Node(Guid.NewGuid(), "Register");
                  Register.Shape = Shapes.RoundedSquare;
                  Register.OffsetX = 250;
                  Register.OffsetY = 100;
                  Register.Label = "Register ";
                  Register.ToolTip = "RoundedSquare";
                  Model.Nodes.Add(NewClient);
                  Model.Nodes.Add(Register);
                  Layer l = new Layer();
                  l.Name = "l1";
                  l.Background = Brushes.Black;
                  l.Nodes.Add(DataEntry);
                  l.Nodes.Add(ClientAccountInfo);
                  Model.Layers.Add(l);
                  Model.Visible = flase;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Layer.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Diagram.Layer"/> is active.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
            /// <example>
            The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  Node NewClient;
                  Node Register;
                  NewClient = new Node(Guid.NewGuid(), "NewClient");
                  NewClient.Shape = Shapes.FlowChart_Decision;
                  NewClient.OffsetX = 40;
                  NewClient.OffsetY = 100;
                  NewClient.ToolTip = "FlowChart_Decision";
                  NewClient.Label = "New Client"
                  Register = new Node(Guid.NewGuid(), "Register");
                  Register.Shape = Shapes.RoundedSquare;
                  Register.OffsetX = 250;
                  Register.OffsetY = 100;
                  Register.Label = "Register ";
                  Register.ToolTip = "RoundedSquare";
                  Layer l = new Layer();
                  l.Name = "l1";
                  l.Background = Brushes.Black;
                  l.Nodes.Add(DataEntry);
                  l.Nodes.Add(ClientAccountInfo);
                  Model.Layers.Add(l);
                  Model.Active = false;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Layer.Nodes">
            <summary>
            Gets or sets the node collection.
            </summary>
            <value>The collection of nodes.</value>
            /// <example>
            The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  Node NewClient;
                  Node Register;
                  NewClient = new Node(Guid.NewGuid(), "NewClient");
                  NewClient.Shape = Shapes.FlowChart_Decision;
                  NewClient.OffsetX = 40;
                  NewClient.OffsetY = 100;
                  NewClient.ToolTip = "FlowChart_Decision";
                  NewClient.Label = "New Client"
                  Register = new Node(Guid.NewGuid(), "Register");
                  Register.Shape = Shapes.RoundedSquare;
                  Register.OffsetX = 250;
                  Register.OffsetY = 100;
                  Register.Label = "Register ";
                  Register.ToolTip = "RoundedSquare";
                  Model.Nodes.Add(NewClient);
                  Model.Nodes.Add(Register);
                  Layer l = new Layer();
                  l.Name = "l1";
                  l.Background = Brushes.Black;
                  l.Nodes.Add(DataEntry);
                  l.Nodes.Add(ClientAccountInfo);
                  Model.Layers.Add(l);
                  Model.Visible = flase;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Layer.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
            /// <example>
            The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  Node NewClient;
                  Node Register;
                  NewClient = new Node(Guid.NewGuid(), "NewClient");
                  NewClient.Shape = Shapes.FlowChart_Decision;
                  NewClient.OffsetX = 40;
                  NewClient.OffsetY = 100;
                  NewClient.ToolTip = "FlowChart_Decision";
                  NewClient.Label = "New Client"
                  Register = new Node(Guid.NewGuid(), "Register");
                  Register.Shape = Shapes.RoundedSquare;
                  Register.OffsetX = 250;
                  Register.OffsetY = 100;
                  Register.Label = "Register ";
                  Register.ToolTip = "RoundedSquare";
                  Model.Nodes.Add(NewClient);
                  Model.Nodes.Add(Register);
                  LineConnector o1 = new LineConnector();
                  o1.ConnectorType = ConnectorType.Straight;
                  o1.TailNode = Register;
                  o1.HeadNode = NewClient;
                  o1.HeadDecoratorShape = DecoratorShape.Circle;
                  o1.TailDecoratorShape = DecoratorShape.Circle;
                  Model.Connections.Add(o1);
                  Layer l = new Layer();
                  l.Name = "l1";
                  l.Background = Brushes.Black;
                  l.Lines.Add(o1);
                  Model.Layers.Add(l);
                  Model.Visible = flase;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.Layer.LayerPropertyChanged">
            <summary>
            Occurs when [layer property changed].
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.MeasureUnitsConverter">
            <summary>
            Represents the measurement units converter class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnitsConverter.m_lock">
            <summary>
            Used to get a lock on the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnitsConverter.mDpiX">
            <summary>
            Used to store current x coordinate points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnitsConverter.mDpiY">
            <summary>
            Used to store current y coordinate points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnitsConverter.s_proportionsX">
            <summary>
            Used to store x converted points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnitsConverter.s_proportionsY">
            <summary>
            Used to store y converted points.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.MeasureUnitsConverter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixelX(System.Double,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixelY(System.Double,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixelX(System.Double,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixelY(System.Double,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ConvertX(System.Double,Syncfusion.Windows.Diagram.MeasureUnits,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ConvertY(System.Double,Syncfusion.Windows.Diagram.MeasureUnits,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.Convert(System.Double,Syncfusion.Windows.Diagram.MeasureUnits,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.Convert(System.Windows.Size,Syncfusion.Windows.Diagram.MeasureUnits,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.Convert(System.Windows.Point,Syncfusion.Windows.Diagram.MeasureUnits,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.Convert(System.Drawing.Rectangle,Syncfusion.Windows.Diagram.MeasureUnits,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixels(System.Drawing.Rectangle,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle location and size to Pixels from specified 
            measure units
            </summary>
            <param name="rect">source rectangle</param>
            <param name="from">source rectangle measure units</param>
            <returns>Rectangle with Pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixels(System.Windows.Thickness,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts the Thickness value to pixels
            </summary>
            <param name="rect">bounding rectangle.</param>
            <param name="from">measure unit to convert from.</param>
            <returns>The converted rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixels(System.Windows.Point,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert point from specified measure units to pixels
            </summary>
            <param name="point">source point for convert</param>
            <param name="from">measure units</param>
            <returns>point in pixels coordinates</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixels(System.Windows.Size,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert size from specified measure units to pixels
            </summary>
            <param name="size">source size</param>
            <param name="from">measure units</param>
            <returns>size in pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.ToPixels(System.Double,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            To the pixels.
            </summary>
            <param name="value">The value.</param>
            <param name="from">From measurement unit.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixels(System.Drawing.Rectangle,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle in Pixels into rectangle with specified 
            measure units
            </summary>
            <param name="rect">source rectangle in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixels(System.Windows.Rect,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle in Pixels into rectangle with specified 
            measure units
            </summary>
            <param name="rect">source rectangle in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixels(System.Windows.Thickness,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts from pixels to specified unit.
            </summary>
            <param name="rect">The Rectangle.</param>
            <param name="to">The unit to be converted to.</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixels(System.Windows.Point,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle from pixels to specified units
            </summary>
            <param name="point">point in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Point in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixels(System.Double,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Converts from pixels to specified unit.
            </summary>
            <param name="value">The value.</param>
            <param name="to">convert to units.</param>
            <returns>output value in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.FromPixels(System.Windows.Size,Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Convert Size in pixels to size in specified measure units
            </summary>
            <param name="size">source size</param>
            <param name="to">convert to units</param>
            <returns>output size in specified measure units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.GetAbbreviation(Syncfusion.Windows.Diagram.MeasureUnits)">
            <summary>
            Get the measure unit abbreviation.
            </summary>
            <param name="units">The measure units.</param>
            <returns>The abbreviation.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.GetMeasureUnit(System.String,Syncfusion.Windows.Diagram.MeasureUnits@)">
            <summary>
            Gets the measure unit from abbreviation.
            </summary>
            <param name="strAbbreviation">The measure unit abbreviation.</param>
            <param name="units">The units.</param>
            <returns>true, if converted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.UpdateProportionsX(System.Double)">
            <summary>
            Update the x proportion.
            </summary>
            <param name="dDpiX">The x points</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.MeasureUnitsConverter.UpdateProportionsY(System.Double)">
            <summary>
            Update the y proportion.
            </summary>
            <param name="dDpiY">The y points</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.MeasureUnitsConverter.DpiX">
            <summary>
            Gets or sets the dot per inch value by X axis.
            </summary>
            <value>The dpi X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.MeasureUnitsConverter.DpiY">
            <summary>
            Gets or sets the dot per inch value by Y axis.
            </summary>
            <value>The dpi Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.MeasureUnitsConverter.MeasureUnitAbbreviation">
            <summary>
            Gets the measure unit abbreviations.
            </summary>
            <value>The measure unit abbreviations.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeConnectorAdorner">
            <summary>
            Represents the adorner used for Node connectors.
            </summary>
            <remarks>
             This is displayed while creating a new connection.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.m_pathGeometry">
            <summary>
            Used to store the path geometry.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.m_diagramPage">
            <summary>
            Used to store the page instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.dview">
            <summary>
            Used to store the view instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.sourceNode">
            <summary>
            Used to store the source node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.hitNode">
            <summary>
            Used to store the hit node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.drawingPen">
            <summary>
            Used to store the drawing pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.previousHitNode">
            <summary>
            Used to store the previously hit node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.m_hitPort">
            <summary>
            Used to store the  current hit port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.previoushitport">
            <summary>
            Used to store the previously hit port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.dc">
            <summary>
            Used to store the DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.sourceHitPort">
            <summary>
            Used to store the source port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.centerhit">
            <summary>
            Used to store the boolean information of center port being hit.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.centerport">
            <summary>
            Used to store the center port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeConnectorAdorner.beforeconn">
            <summary>
            Used to store the boolean information about the instance of connection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.#ctor(Syncfusion.Windows.Diagram.IDiagramPage,Syncfusion.Windows.Diagram.ConnectionPort,Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeConnectorAdorner"/> class.
            </summary>
            <param name="panel">The panel.</param>
            <param name="sourcePort">The source port.</param>
            <param name="sourceNode">The source node.</param>
            <param name="diagramView">The diagram view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Calls render of the NodeConnectorAdorner.
            </summary>
            <param name="drawingcontext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.diagramView_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseUp routed event that occurs when the mouse 
            button is released while the mouse pointer is over this control.
            </summary>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.diagramView_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when the mouse 
            pointer  is over this control.
            </summary>
            <param name="e">The MouseEventArgs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.UpdateGeometryPoint(System.Windows.Point,Syncfusion.Windows.Diagram.LineConnector)">
            <summary>
            Updates the geometry.
            </summary>
            <param name="point">The mouse position. </param>
            <param name="line">LineConnector instance</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.HitTesting(System.Windows.Point)">
            <summary>
            Identifies the hit object.
            </summary>
            <param name="hitPoint">The point to be tested.</param>
            <returns>True if hit object is Node ,false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.GetLinePathGeometry(System.Windows.Point)">
            <summary>
            Calculates the pathGeometry.
            </summary>
            <param name="position">The endpoint of the connector</param>
            <returns>The PathGeometry.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.GetLinePoints(Syncfusion.Windows.Diagram.NodeInfo,System.Windows.Point)">
            <summary>
            Calculates the points which form the path geometry. 
            </summary>
            <param name="source">The head node</param>
            <param name="sinkPoint">The endpoint of the connector.</param>
            <returns>Collection of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.UpdateBezierPathGeometry(System.Windows.Point)">
            <summary>
            Is called whenever the path geometry is to be updated.
            </summary>
            <param name="position">The endpoint of the connector</param>
            <returns>The updated PathGeometry.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.GetSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the Bezier segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point)of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <param name="num1">It specifies the amount of curve to be provided.Value is 150d.</param>
            <param name="isTop">Flag indicating the top side.</param>
            <param name="isBottom">Flag indicating the bottom side.</param>
            <param name="isLeft">Flag indicating the left side.</param>
            <param name="isRight">Flag indicating the right side.</param>
            <returns>The segment.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point) of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <returns>The segment,</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.AddLinePoints(System.Collections.Generic.List{System.Windows.Point},System.Windows.Rect[])">
            <summary>
            Adds points to the collection in case of orthogonal line .
            </summary>
            <param name="linePoints">Collection of points.</param>
            <param name="rectangles">The nodes involved in the connection.</param>
            <returns>The modified collection of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeConnectorAdorner.FindConnectionEnd(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Makes the end connection to the respective node by finding the correct direction of the node.
            </summary>
            <param name="pathPoints">Collection of points.</param>
            <param name="startPoint">The start point of the connector.</param>
            <param name="endPoint">The end point of the connector.</param>
            <param name="isTop">Flag indicating the top side of the source.</param>
            <param name="isBottom">Flag indicating the bottom side of the source.</param>
            <param name="isLeft">Flag indicating the left side of the source.</param>
            <param name="isRight">Flag indicating the right side of the source.</param>
            <param name="tisTop">Flag indicating the top side of the target.</param>
            <param name="tisBottom">Flag indicating the bottom side of the target.</param>
            <param name="tisLeft">Flag indicating the left side of the target.</param>
            <param name="tisRight">Flag indicating the right side of the target.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeConnectorAdorner.HitPort">
            <summary>
            Gets or sets the hit port.
            </summary>
            <value>The hit port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeConnectorAdorner.HitNode">
            <summary>
            Gets or sets the node which is currently selected through HitTesting.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.Node"/>
            The Node which was hit.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.BeforeLabelEditEventArgs">
            <summary>
            Represents Before Label Edit Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BeforeLabelEditEventArgs.m_headerBeforeEdit">
            <summary>
            Used to store the header before edit.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BeforeLabelEditEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.BeforeLabelEditEventArgs"/> class.
            </summary>
            <param name="headerBeforeEdit">The header before edit.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.BeforeLabelEditEventArgs.HeaderBeforeEdit">
            <summary>
            Gets or sets the Header before editing takes place.
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            Header value.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.AfterLabelEditEventArgs">
            <summary>
            Represents After Label Edit Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.AfterLabelEditEventArgs.m_headerAfterEdit">
            <summary>
            Used to store the header after edit.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.AfterLabelEditEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.AfterLabelEditEventArgs"/> class.
            </summary>
            <param name="headerAfterEdit">The header after edit.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.AfterLabelEditEventArgs.HeaderAfterEdit">
            <summary>
            Gets or sets the Header after editing takes place.
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            Header value.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelEditor">
            <summary>
            Represents the Label Editor which allows to edit the labels of the Nodes and Connectors at run time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.m_editingItem">
            <summary>
            Used to store Label editor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.m_editableHeader">
            <summary>
            Used to store textbox instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.m_clickInfo">
            <summary>
            Used to store clickinfo instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.LabelEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LabelEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized"/> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.GetUseCustomEditableTemplate(System.Windows.DependencyObject)">
            <summary>
            Checks whether CustomEditableTemplate is  been used or not.
            </summary>
            <param name="obj">The DependencyObject.</param>
            <returns>True, if CustomEditableTemplate is been used, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.SetUseCustomEditableTemplate(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the UseCustomEditableTemplate dependency property.
            </summary>
            <param name="obj">The DependencyObject.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.GetCustomEditableTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the CustomEditableTemplate dependency property.
            </summary>
            <param name="obj">The DependencyObject.</param>
            <returns>Data Template</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.SetCustomEditableTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the CustomEditableTemplate dependency property.
            </summary>
            <param name="obj">The DependencyObject.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.GetIsEditing(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsEditing dependency property.
            </summary>
            <param name="obj">The DependencyObject.</param>
            <returns>true, if IsEditing is true.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.SetIsEditing(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsEditing dependency property.
            </summary>
            <param name="obj">The DependencyObject.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelWidthProperty">
            <summary>
            Defines the LabelWidth property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelHeightProperty">
            <summary>
            Defines the LabelHeight property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelTextWrappingProperty">
            <summary>
            Defines the LabelTextWrapping property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelForegroundProperty">
            <summary>
            Defines the LabelForeground property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelBackgroundProperty">
            <summary>
            Defines the LabelBackground property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelFontSizeProperty">
            <summary>
            Defines the LabelFontSize property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelFontFamilyProperty">
            <summary>
            Defines the LabelFontFamily property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelFontWeightProperty">
            <summary>
            Defines the LabelFontWeight property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelFontStyleProperty">
            <summary>
            Defines the LabelFontStyle property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelTextTrimmingProperty">
            <summary>
            Defines the LabelTextTrimming property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelTextAlignmentProperty">
            <summary>
            Defines the LabelTextAlignment property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.SelectedItemProperty">
            <summary>
            Defines the SelectedItem property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.LabelProperty">
            <summary>
            Defines the Label.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.TextWidthProperty">
            <summary>
            Defines the TextWidth property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.CustomEditableTemplateProperty">
            <summary>
            Defines the CustomEditableTemplate property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.UseCustomEditableTemplateProperty">
            <summary>
            Defines the UseCustomEditableTemplate property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.IsEditingPropertyKey">
            <summary>
            Key through which  IsEditing property can be changed.  This is a dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.IsEditingProperty">
            <summary>
            Defines the IsEditing property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.EnableLabelEditProperty">
            <summary>
            Defines the EnableLabelEdit property.This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.CompleteHeaderEdit(Syncfusion.Windows.Diagram.LabelEditor,System.Boolean)">
            <summary>
            Complete editing process on the specifies TabItem.
            </summary>
            <param name="editableItem">TabItem which is editing in the current moment.</param>
            <param name="applyChanges">Specifies whether editing changes should be applied or no.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnEnableLabelEditChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnEnableLabelEditChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnEnableLabelEditChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnEnableLabelEditChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.FireBeforeLabelEdit(System.Object)">
            <summary>
            Calls FireBeforeLabelEdit method of the instance, notifies of the  property value changes.
            </summary>
            <param name="headerBeforeLabelEdit">The headerBeforeLabelEdit Object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.FireAfterLabelEdit(System.Object)">
            <summary>
            Calls FireAfterLabelEdit method of the instance, notifies of the  property value changes.
            </summary>
            <param name="headerAfterLabelEdit">The object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnUseCustomEditableTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCustomEditableTemplateChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnUseCustomEditableTemplateChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises UseCustomEditableTemplateChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnCustomEditableTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCustomEditableTemplateChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnCustomEditableTemplateChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CustomEditableTemplateChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.CompleteHeaderEditInternal(Syncfusion.Windows.Diagram.LabelEditor,System.Boolean)">
            <summary>
            Complete editing process on the specified item.
            </summary>
            <param name="editableItem">Item which is editing in the current moment.</param>
            <param name="applyChanges">Specifies whether editing changes should be applied or no.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.GetNode(System.Windows.FrameworkElement)">
            <summary>
            Gets the  node.
            </summary>
            <param name="element">Framework element.</param>
            <returns>The parent object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.LabelEditStartInternal(Syncfusion.Windows.Diagram.LabelEditor)">
            <summary>
            Launch editing process on the specified Node.
            </summary>
            <param name="item">Item which should be edited.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.UpdateBinding(System.Windows.Controls.TextBox)">
            <summary>
            Updates  binding explicit.
            </summary>
            <param name="target">Binding target.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.RemoveDelegates(System.Windows.Controls.Control)">
            <summary>
            Removes delegates on the specified target.
            </summary>
            <param name="target">Delegates owner.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.isMousedown">
            <summary>
            Provides class handling for the PreviewMouseLeftButtonDown routed event that occurs when the left mouse 
            button is pressed while the mouse pointer is over this control.
            </summary>
            <param name="e">The MouseButtonEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnEditableTextBox_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Calls OnEditableTextBox_KeyDown method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.OnEditableTexBox_LostKeyboardFocus(System.Object,System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Calls OnEditableTexBox_LostKeyboardFocus method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.SelectedItem">
            <summary>
            Gets or sets the Selected Item.
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            Selected Item.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            Type: <see cref="T:System.String"/>
            String value.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.TextWidth">
            <summary>
            Gets or sets the text width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.EnableLabelEdit">
            <summary>
            Gets or sets a value indicating whether label can be edited or not.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if label can be edited, false otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelWidth">
            <summary>
            Gets or sets the width of the label.
            </summary>
            <value>The width of the label.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelHeight">
            <summary>
            Gets or sets the height of the label.
            </summary>
            <value>The height of the label.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelTextWrapping">
            <summary>
            Gets or sets the label text wrapping.
            </summary>
            <value>The label text wrapping.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelForeground">
            <summary>
            Gets or sets the label foreground.
            </summary>
            <value>The label foreground.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelBackground">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>The label background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelFontSize">
            <summary>
            Gets or sets the size of the label font.
            </summary>
            <value>The size of the label font.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelFontFamily">
            <summary>
            Gets or sets the label font family.
            </summary>
            <value>The label font family.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelFontWeight">
            <summary>
            Gets or sets the label font weight.
            </summary>
            <value>The label font weight.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelFontStyle">
            <summary>
            Gets or sets the label font style.
            </summary>
            <value>The label font style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelTextTrimming">
            <summary>
            Gets or sets the label text trimming.
            </summary>
            <value>The label text trimming.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.LabelTextAlignment">
            <summary>
            Gets or sets the label text alignment.
            </summary>
            <value>The label text alignment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LabelEditor.EnableMultilineLabel">
            <summary>
            Gets or sets a value indicating whether [enable multiline label].
            </summary>
            <value>
            	<c>true</c> if [enable multiline label]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.LabelEditor.EnableLabelEditChanged">
            <summary>
            Event that is raised when EnableLabelEdit property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.LabelEditor.UseCustomEditableTemplateChanged">
            <summary>
            Event that is raised when UseCustomEditableTemplate property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.LabelEditor.CustomEditableTemplateChanged">
            <summary>
            Event that is raised when CustomEditableTemplat property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.LabelEditor.BeforeLabelEdit">
            <summary>
            Event handler for the dependency property value changes .
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.LabelEditor.AfterLabelEdit">
            <summary>
            Event handler for the dependency property value changes .
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelEditor.ClickInfo">
            <summary>
            Represents the ClickInfo struct which contains the click details.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.ClickInfo.LastNodeClick">
            <property name="flag" value="Finished" />
            <summary>
            Time when the last click on Node was performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelEditor.ClickInfo.LastNodePoint">
            <property name="flag" value="Finished" />
            <summary>
            Point where the last click on Node was performed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelEditor.ClickInfo.IsDoubleClick(System.Windows.Point)">
            <summary>
            Called when the mouse button is clicked twice.
            </summary>
            <param name="position">Mouse Position</param>
            <returns>true, if double clicked; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelEditor.BeforeLabelEditHandler">
            <summary>
            Event handler for the dependency property value changes .
            </summary>
            <param name="sender">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LabelEditor.AfterLabelEditHandler">
            <summary>
            Event handler for the dependency property value changes .
            </summary>
            <param name="sender">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Rotator">
            <summary>
            Represents the Rotator class which is used to rotate the <see cref="T:Syncfusion.Windows.Diagram.Node"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Rotator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.Rotator"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.RotateThumb">
            <summary>
            Represents the Thumb used for rotating the <see cref="T:Syncfusion.Windows.Diagram.Node"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RotateThumb.gnodechildren">
            <summary>
            Used to store the grouped nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RotateThumb.m_cursor">
            <summary>
            Used to store the cursor used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RotateThumb.diagramPage">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RotateThumb.node">
            <summary>
            Used to store the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RotateThumb.dc">
            <summary>
            Used to store the diagram control instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RotateThumb.rotateangle">
            <summary>
            Used to store the rotate angle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RotateThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.RotateThumb"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RotateThumb.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Diagram.RotateThumb.OnInitialized(System.EventArgs)"/> event. 
            This method is invoked whenever <see cref="M:Syncfusion.Windows.Diagram.RotateThumb.OnInitialized(System.EventArgs)"/> property is set to true internally. 
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RotateThumb.RotateThumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handles the DragStarted event of the RotateThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RotateThumb.RotateThumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the DragDelta event of the RotateThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RotateThumb.RotateThumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handles the DragCompleted event of the RotateThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.BowtieLayout">
            <summary>
            Represents the Directed Tree layout used for the automatic arrangement of nodes. The tree is created based on the Layout root specified.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.TreeLayoutBase">
            <summary>
            Abstract base class providing convenience methods for tree layout algorithms.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LayoutBase">
            <summary>
            Represents base abstract class for the tree layout .
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ILayout">
            <summary>
            Represents the layout. Provides properties for creating the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ILayout.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ILayout.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ILayout.LayoutBounds">
            <summary>
            Gets or sets the Layoutbounds.
            </summary>
            <value>The bounds value is   Rect  .</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ILayout.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.DefaultSpan">
            <summary>
            Used to store the default run span
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.graph">
            <summary>
            Used to store the graph
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.mbounds">
            <summary>
            Used to store the bounds
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.mcenter">
            <summary>
             Used to store the center point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.mcontroller">
            <summary>
             Used to store the DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.mmodel">
            <summary>
             Used to store the DiagramModel instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutBase.mview">
            <summary>
            Used to store the DiagramView instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LayoutBase.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LayoutBase"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LayoutBase.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.LayoutBase"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LayoutBase.SetX(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double)">
            <summary>
            Sets the OffsetX value for the IShape item.
            </summary>
            <param name="item">IShape item.</param>
            <param name="referrer">The IShape referrer</param>
            <param name="x">Double value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LayoutBase.SetY(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double)">
            <summary>
             Sets the OffsetY value.
            </summary>
            <param name="item">IShape item.</param>
            <param name="referrer">The IShape referrer.</param>
            <param name="y">Double Value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.LayoutBounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Controller">
            <summary>
            Gets or sets the DiagramControl.
            Type:<see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Edges">
            <summary>
            Gets the collection of edges.
            Type:<see cref="T:Syncfusion.Windows.Diagram.CollectionExt"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Graph">
            <summary>
            Gets or sets the graph.
            </summary>
            <value>The graph.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Model">
            <summary>
            Gets or sets the Model property.
            Type:<see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.Nodes">
            <summary>
            Gets the collection of nodes.
            Type:<see cref="T:Syncfusion.Windows.Diagram.CollectionExt"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.View">
            <summary>
            Gets or sets the View property.
            Type:<see cref="T:Syncfusion.Windows.Diagram.DiagramView"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutBase.DefaultRunSpan">
            <summary>
            Gets the default run span.
            </summary>
            <value>The default run span.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TreeLayoutBase.mlayoutRoot">
            <summary>
            The root of the tree
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TreeLayoutBase.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:TreeLayoutBase"/> class.
            </summary>
            <param name="model">DiagramModel instance.</param>
            <param name="view">DiagramView instance</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TreeLayoutBase.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.TreeLayoutBase"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TreeLayoutBase.LayoutRoot">
            <summary>
            Gets or sets the layout root.
            </summary>
            <value>The layout root.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.units">
            <summary>
            Used to store the units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.diagrampage">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.equalities">
            <summary>
            Used to store the equalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.mdepths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.manchorPoint">
            <summary>
            Used to store the anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.mmaxDepth">
            <summary>
            Used to store the maximum depth
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieLayout.moffsetValue">
            <summary>
            Used to store the default offset value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.DoLayout">
            <summary>
            Generates the tree layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.PrepareActivity(Syncfusion.Windows.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.PrepareActivity(tree);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    DirectedTreeLayout tree=new DirectedTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.AdjacentLeft(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the left node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent left Node object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.AdjacentRight(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the right node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent right Node object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.AllocateSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Allocates the space between nodes.
            </summary>
            <param name="v">The shape 1.</param>
            <param name="a">The shape 2.</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.AncestorShape(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the parent shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="shape1">The shape1.</param>
            <param name="adjacentShape">The adjacent shape.</param>
            <returns>THe ancestor shape</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.CheckDepths">
            <summary>
            Checks the depth.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.DoFirstWalk(Syncfusion.Windows.Diagram.IShape,System.Int32,System.Int32)">
            <summary>
            First traversal.
            </summary>
            <param name="shape">The Node object. </param>
            <param name="number">layout info number</param>
            <param name="depth">integer depth value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.DoSecondWalk(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Second Traversal of the tree.
            </summary>
            <param name="node">The node object.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space value.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.GetSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Boolean)">
            <summary>
            Gets the space between nodes.
            </summary>
            <param name="l"> Left node object</param>
            <param name="r"> Right node object</param>
            <param name="siblings">Has siblings</param>
            <returns>The space between nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.InitializeLayout">
            <summary>
            Initializes the  tree layout.
            </summary>
            <returns>true if initialization succeeds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.SetBreadthSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="shapeNext">This node object </param>
            <param name="previousShape">The previous node </param>
            <param name="space">The spacing value </param>
            <param name="depth">The depth value </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.SetDepthSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the depth space between each node.
            </summary>
            <param name="shapeNext">this node object</param>
            <param name="previousShape">previous node object</param>
            <param name="space">spacing value</param>
            <param name="depth">depth value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.ShiftSubTree(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double)">
            <summary>
            Shifts the tree.
            </summary>
            <param name="shape">Node object</param>
            <param name="shape2">The shape2.</param>
            <param name="shift">The shift .</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.TranslateShapePosition(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Translates the node position.
            </summary>
            <param name="shape">Shape object</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.BowtieLayout.UpdateDepths(System.Int32,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Updates the depth of the tree.
            </summary>
            <param name="depth">Depth value </param>
            <param name="item">Node object </param>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.BowtieLayout.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.BowtieLayout.Units">
            <summary>
            Gets or sets the units.
            </summary>
            <value>The units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.BowtieLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.BowtieLayout.RootNodeOffset">
            <summary>
            Gets or sets the root node offset.
            </summary>
            <value>The root node offset.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramModel">
             <summary>
             Represents the Diagram Model.
             </summary>
             <remarks>
             <para>A model represents data for an application and contains the logic for adding, accessing, and manipulating the data.
             Nodes and connectors are added to the Diagram Control using the Model property.
             A predefined layout can be applied using the LayoutType property of DiagramModel or the position of the  nodes can be  manually specified.</para>
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in XAML.
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
            <summary>
            Represents the Diagram Model.
            </summary>
            <remarks>
            <para>A model represents data for an application and contains the logic for adding, accessing, and manipulating the data.
            Nodes and connectors are added to the Diagram Control using the Model property.
            A predefined layout can be applied using the LayoutType property of DiagramModel or the position of the  nodes can be  manually specified.</para>
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="Sample.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                        &lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                         &lt;/syncfusion:DiagramView&gt;
                     &lt;/syncfusion:DiagramControl.View&gt;
                &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   LineConnector o = new LineConnector();
                   o.ConnectorType = ConnectorType.Straight;
                   o.TailNode = n1;
                   o.HeadNode = n;
                   o.HeadDecoratorShape = DecoratorShape.None;
                   Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ITree">
            <summary>
            This interface describes the additional members useful if the underlying graph is a tree.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IGraph">
            <summary>
            Provides an interface to the tree graph .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.FromNode(Syncfusion.Windows.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node from which the connection started.
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the head node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.ToNode(Syncfusion.Windows.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node to which the connection ended. 
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the tail node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.AdjacentNode(Syncfusion.Windows.Diagram.IEdge,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="edge">The edge object.</param>
            <param name="node">The node object.</param>
            <returns>The adjacent node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.InNeighbors(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The in coming neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.OutNeighbors(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The out going neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.Neighbors(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Get an iterator over all nodes connected to this node.
            </summary>
            <param name="node">The node object.</param>
            <returns>The neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.EdgesOf(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Returns a collection of the edges of the node.
            </summary>
            <param name="node">The node object</param>
            <returns>The total number of edges.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.InEdges(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.OutEdges(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.InDegree(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The in degree .</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.OutDegree(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The out degree.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.Degree(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Get the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.MakeTraversing(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Traverse all the internal nodes of the specified parent node and also their edges.
            </summary>
            <param name="node">Parent Node</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IGraph.ClearTraversing">
            <summary>
            Clear the traversed tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IGraph.IsDirected">
            <summary>
            Gets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IGraph.Nodes">
            <summary>
            Gets a collection of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IGraph.Tree">
            <summary>
            Gets the Spanning tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IGraph.Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.Children(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the Collection of the Node's Children.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The Children of the node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.ChildEdges(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets a collection of Node's Children's edges.
            </summary>
            <param name="node">The node object</param>
            <returns>The Child edges of the node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.NextSibling(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the  node placed next to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The next sibling.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.PreviousSibling(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the node placed previous to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The previous sibling</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.LastChild(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the last child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The last child</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.FirstChild(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the immediate child as the First child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The First Child</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.ChildCount(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets a count of the number of children of the parent node.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The child count</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.Depth(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the number of levels from this Node as the Depth of the current node.
            </summary>
            <param name="node">Node object.</param>
            <returns>The depth value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.ParentEdge(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Parents the edge.
            </summary>
            <param name="node">The node object.</param>
            <returns>The parent edge</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ITree.ForEach``1(System.Action{``0},Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Takes a specified action on each node starting from the start node.
            </summary>
            <typeparam name="T">The type of action</typeparam>
            <param name="action">The action.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ITree.IsDirected">
            <summary>
            Gets or sets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ITree.Root">
            <summary>
            Gets or sets the root.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ITree.LayoutType">
            <summary>
            Gets or sets the type of the layout.
            </summary>
            <value>The type of the layout.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IModel">
            <summary>
            Provides an interface to the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IModel.LayoutRoot">
            <summary>
            Gets or sets the layout root.
            </summary>
            <value>The layout root.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IModel.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IModel.Nodes">
            <summary>
            Gets the shapes.
            </summary>
            <value>The shapes.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IDiagramModel">
            <summary>
            Represents the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.ColumnCountProperty">
            <summary>
            Identifies the ColumnCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.EnableCycleDetectionProperty">
            <summary>
            Identifies the EnableCycleDetection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.EnableLayoutWithVariedSizesProperty">
            <summary>
            Identifies the EnableLayoutWithVariedSizes dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.RowCountProperty">
            <summary>
            Identifies the RowCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.TableExpandModeProperty">
            <summary>
            Identifies the TableExpandMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.OrderedNodesProperty">
            <summary>
            Defines the OrderedNodes property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.morientation">
            <summary>
            Used to store the orientation value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.mhorizontalSpacing">
            <summary>
             Used to store the horizontal spacing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.misDirected">
            <summary>
            Used to store IsDirected property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.mlayoutRoot">
            <summary>
             Used to store the layout root.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.mspanningTree">
            <summary>
             Used to store the tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.msubTreeSpacing">
            <summary>
             Used to store the sub tree spacing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.mverticalSpacing">
            <summary>
             Used to store the vertical spacing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#AdjacentNode(Syncfusion.Windows.Diagram.IEdge,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="edge">The edge object.</param>
            <param name="node">The node object.</param>
            <returns>The adjacent node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#ClearTraversing">
            <summary>
            Clear the traversed tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#Degree(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Get the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#EdgesOf(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Returns a collection of the edges of the node.
            </summary>
            <param name="node">The node object</param>
            <returns>The node edges</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#FromNode(Syncfusion.Windows.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node from which the connection started. 
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the head node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#InDegree(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Get the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The in degree .</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#InEdges(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#InNeighbors(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The in coming neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#MakeTraversing(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Traverse all the internal nodes of the specified parent node and also their edges.
            </summary>
            <param name="node">Parent Node</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#Neighbors(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Get an iterator over all nodes connected to this node.
            </summary>
            <param name="node">The node object.</param>
            <returns>The neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#OutDegree(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Get the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The out degree.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#OutEdges(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#OutNeighbors(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The out going neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#ToNode(Syncfusion.Windows.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node to which the connection ended. 
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the tail node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#ChildCount(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets a count of the number of children of the parent node.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The child count</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#ChildEdges(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets a collection of Node's Children's edges.
            </summary>
            <param name="node">The node object</param>
            <returns>The Child edges of the node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#Children(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the Collection of the Node's Children.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The Children of the node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#Depth(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the number of levels from this Node as the Depth of the current node.
            </summary>
            <param name="node">Node object.</param>
            <returns>The depth value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#FirstChild(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the immediate child as the First child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The First Child</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#ForEach``1(System.Action{``0},Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Takes a specified action on each node starting from the start node.
            </summary>
            <typeparam name="T">The type of action</typeparam>
            <param name="action">The action.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#LastChild(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the last child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The last child</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#NextSibling(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the node placed next to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The next sibling.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#ParentEdge(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the parent edge
            </summary>
            <param name="node">The node object.</param>
            <returns>The parent edge</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#PreviousSibling(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the node placed previous to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The previous sibling</returns>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.m_units">
            <summary>
            Used to store the units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.m_Nodes">
            <summary>
            Collection of all nodes that are to be managed by the container.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.m_Connection">
            <summary>
            Collection of all connections that are to be linked between nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.m_LogicalChildren">
            <summary>
            List of the elements that are treated as logical children of control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.m_rootNodes">
            <summary>
            Maintaining Root node list from node collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.InternalChildren_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the m_internalChildren control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.ItemsSourceProperty">
            <summary>
             Defines the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.ItemTemplateProperty">
            <summary>
             Defines the ItemTemplate property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.LayoutTypeProperty">
            <summary>
            Defines the LayoutType property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.LayoutHorizontalAlignmentProperty">
            <summary>
            Identifies the LayoutHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.LayoutVerticalAlignmentProperty">
            <summary>
            Identifies the LayoutVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramModel.HierarchicalDataTemplateProperty">
            <summary>
             Defines the HierarchicalDataTemplate property.  This is a dependency property.
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.ParseItemSourceIntoParser(System.Windows.UIElement)">
            <summary>
            Parses the items from the items source.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.AddLogicalChildren(System.Collections.IList)">
            <summary>
            Adds the logical children.
            </summary>
            <param name="iList">The IList collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.ConvertToNodes(System.Collections.Generic.List{Syncfusion.Windows.Diagram.ChildDataParser},System.Windows.DataTemplate)">
            <summary>
            Converts the ChildDataParser items to nodes.
            </summary>
            <param name="items">ChildDataParser items.</param>
            <returns>The converted nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.HookConnection(Syncfusion.Windows.Diagram.Node,Syncfusion.Windows.Diagram.CollectionExt)">
            <summary>
            Hooks a connection between the specified head node and tail node.
            </summary>
            <param name="parent">Head Node object</param>
            <param name="childs">The Tail Nodes </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.RemoveLogicalChildren(System.Collections.IList)">
            <summary>
            Removes the logical children.
            </summary>
            <param name="iList">The IList collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.RemoveLogicalChildren(System.Collections.IList,System.Boolean)">
            <summary>
            Removes the logical children.
            </summary>
            <param name="iList">The IList collection.</param>
            <param name="detach">if set to <c>true</c> [detach].</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.OnItemSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [ItemSource  changed].
            </summary>
            <param name="d">Dependency object.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.OnConnectionsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [connections changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.OnNodesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [nodes changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramModel.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.ColumnCount">
             <summary>
             Gets or sets the Column Count for the table layout.
             </summary>
             <remarks>
             ColumnCount is automatically set when TableExpandMode is set to Vertical.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="TableLayout" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.TableLayout;
                    Model.RowCount = 3;
                    Model.ColumnCount = 3;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Connections">
             <summary>
             Gets the connections.
             </summary>
             <value>The connections.</value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.EnableCycleDetection">
             <summary>
             Gets or sets a value indicating whether Cycle detection is enabled or not.
             </summary>
             <value>
             <c>true</c> if cycle detection is enabled; otherwise, <c>false</c>.
             </value>
             <remarks>
             In case of <see cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"></see> , if there exists a cycle in the input , then EnableCycleDetection property should be set to true. 
             A cycle is said to exist when for example: say three nodes n1,n2,n3 are there such that, n1 is connected to n2, n2 is connected to n3 and n3 is again connected to n1.(n1--&gt;n2--&gt;n3--&gt;n1) n1,n2,n3 are said to form a cycle then.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel EnableCycleDetection="True" Orientation="TopBottom" LayoutType="HierarchicalTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.Orientation = TreeOrientation.TopBottom;
                    Model.EnableCycleDetection=true;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    LineConnector o1 = new LineConnector();
                    o1.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n;
                    o.HeadNode = n1;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o1);        
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.EnableLayoutWithVariedSizes">
             <summary>
             Gets or sets a value indicating whether to enable the varied size algorithm. In case the Model consists of the nodes of different sizes, this property can be set to true. This will align the differently sized nodes with respect to the centre.
             </summary>
             <value>
             <c>true</c> if [enable layout with varied sizes]; otherwise, <c>false</c>.
             </value>
             <remarks>
             Default value is false. 
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow"
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
             IsSymbolPaletteEnabled="True"
             Background="WhiteSmoke"&gt;
             &lt;syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramModel LayoutType="TableLayout" TableExpandMode="Vertical" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
             &lt;/syncfusion:DiagramModel&gt;
             &lt;/syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramControl.View&gt;
             &lt;syncfusion:DiagramView   Background="LightGray"
             Bounds="0,0,12,12"
             Name="diagramView"  &gt;
             &lt;/syncfusion:DiagramView&gt;
             &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.Width = 150;
             n.Height = 75;
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n);
             Model.Nodes.Add(n1);
             Model.LayoutType = LayoutType.TableLayout;
             Model.TableExpandMode=ExpandMode.Vertical;
             Model.RowCount = 3;
             Model.ColumnCount = 3;
             Model.LayoutRoot=n;
             LineConnector o = new LineConnector();
             o.ConnectorType = ConnectorType.Straight;
             o.TailNode = n1;
             o.HeadNode = n;
             o.HeadDecoratorShape = DecoratorShape.None;
             Model.Connections.Add(o);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.HorizontalSpacing">
             <summary>
             Gets or sets the Horizontal spacing between nodes.
             </summary>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
            <value>The connections</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#IsDirected">
            <summary>
            Gets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#IGraph#Tree">
            <summary>
            Gets the Spanning tree.
            </summary>
            <value>The graph .</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#IsDirected">
            <summary>
            Gets or sets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Syncfusion#Windows#Diagram#ITree#Root">
            <summary>
            Gets or sets the root.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.LayoutRoot">
             <summary>
             Gets or sets the layout root.
             </summary>
             <value>The layout root.</value>
             <remarks>
             The Layout Root specifies the starting point of the layout. It has to be specified when the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> is used.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                     Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.LayoutType">
             <summary>
             Gets or sets the type of Layout to be used.
             </summary>
             <value>
             Enum specifying the type of layout.
             </value>
             <remarks>
             The LayoutType selects the layout to be used. <see cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>, <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> and None are the supported layout types. Default type is None. 
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                     Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Nodes">
             <summary>
             Gets the shapes.
             </summary>
             <value>The shapes.</value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Orientation">
             <summary>
             Gets or sets the orientation.
             </summary>
             <value>
             Type:<see cref="T:Syncfusion.Windows.Diagram.TreeOrientation"/>
             Enum specifying the orientation.
             </value>
             <remarks>
             The Layout Manager lets you orient the tree in many directions and can be used for the creation of many sophisticated arrangements. 
              <para>TopBottom - Places the root node at the top and the child nodes are arranged below the root node.</para>
              <para>BottomTop - Places the root node at the Bottom and the child nodes are arranged above the root node. </para>
              <para>LeftRight - Places the root node at the Left and the child nodes are arranged on the right side of the root node. </para>
              <para>RightLeft - Places the root node at the Right and the child nodes are arranged on the left side of the root node. </para>
             Default orientation is TopBottom.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel Orientation="TopBottom" LayoutType="DirectedTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.Orientation = TreeOrientation.TopBottom;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.RowCount">
             <summary>
             Gets or sets the Row Count for the table layout.
             </summary>
             <remarks>
             RowCount is automatically set when TableExpandMode is set to Horizontal.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="TableLayout" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.TableLayout;
                    Model.RowCount = 3;
                    Model.ColumnCount = 3;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.SpaceBetweenSubTrees">
             <summary>
             Gets or sets the space between sub trees.
             </summary>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" SpaceBetweenSubTrees="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.TableExpandMode">
             <summary>
             Gets or sets the table expand mode.
             </summary>
             <value>The table expand mode.</value>
             <remarks>
             Default value is  Horizontal.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow"
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
             IsSymbolPaletteEnabled="True"
             Background="WhiteSmoke"&gt;
             &lt;syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramModel LayoutType="TableLayout" TableExpandMode="Vertical" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
             &lt;/syncfusion:DiagramModel&gt;
             &lt;/syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramControl.View&gt;
             &lt;syncfusion:DiagramView   Background="LightGray"
             Bounds="0,0,12,12"
             Name="diagramView"  &gt;
             &lt;/syncfusion:DiagramView&gt;
             &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.Width = 150;
             n.Height = 75;
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n);
             Model.Nodes.Add(n1);
             Model.LayoutType = LayoutType.TableLayout;
             Model.TableExpandMode=ExpandMode.Vertical;
             Model.RowCount = 3;
             Model.ColumnCount = 3;
             Model.LayoutRoot=n;
             LineConnector o = new LineConnector();
             o.ConnectorType = ConnectorType.Straight;
             o.TailNode = n1;
             o.HeadNode = n;
             o.HeadDecoratorShape = DecoratorShape.None;
             Model.Connections.Add(o);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.VerticalSpacing">
             <summary>
             Gets or sets the Vertical spacing between nodes.
             </summary>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.MeasurementUnits">
            <summary>
            Gets or sets the Measurement unit property.
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.MeasureUnits"/>
            Enum specifying the unit to be used.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.RootNodes">
            <summary>
            Gets or sets the root nodes.
            </summary>
            <value>The root nodes.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.ItemsSource">
            <summary>
            Gets or sets the source for the list of the items, the containers about to represent.
            </summary>
            <remarks>
            Items source can not be set while the Items collection contains manually added items.
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="Sample.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;Window.Resources&gt;
               &lt;!--The business object which contains the data to be binded.--&gt;
               &lt;local:CountrySalesList x:Key="myList"/&gt;
               &lt;!--Creating a hierarchical data from the XML data for generating a tree view--&gt;
               &lt;HierarchicalDataTemplate x:Key="dataTemplate" ItemsSource="{Binding Path=RegionSales}" DataType="{x:Type local:CountrySale}"&gt;
                   &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;HierarchicalDataTemplate ItemsSource="{Binding Path=Earnings}"   DataType="{x:Type local:RegionSale}"&gt;
                          &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                         &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                              &lt;DataTemplate DataType="{x:Type local:Sale}"&gt;
                                  &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;/HierarchicalDataTemplate&gt;
                  &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
              &lt;/HierarchicalDataTemplate&gt;
             &lt;/Window.Resources&gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                        &lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None" "  ItemsSource="{Binding Source={StaticResource myList}}" ItemTemplate="{StaticResource dataTemplate}"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                         &lt;/syncfusion:DiagramView&gt;
                     &lt;/syncfusion:DiagramControl.View&gt;
                &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C#.
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   CountrySalesList list= this.Resources["myList"] as CountrySalesList;
                   Model.ItemsSource=list;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.HierarchicalDataTemplate">
            <summary>
            Gets or sets the HierarchicalDataTemplate for items.
            </summary>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="Sample.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;Window.Resources&gt;
               &lt;!--The business object which contains the data to be binded.--&gt;
               &lt;local:CountrySalesList x:Key="myList"/&gt;
               &lt;!--Creating a hierarchical data from the XML data for generating a tree view--&gt;
               &lt;HierarchicalDataTemplate x:Key="dataTemplate" ItemsSource="{Binding Path=RegionSales}" DataType="{x:Type local:CountrySale}"&gt;
                   &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;HierarchicalDataTemplate ItemsSource="{Binding Path=Earnings}"   DataType="{x:Type local:RegionSale}"&gt;
                          &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                         &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                              &lt;DataTemplate DataType="{x:Type local:Sale}"&gt;
                                  &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;/HierarchicalDataTemplate&gt;
                  &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
              &lt;/HierarchicalDataTemplate&gt;
             &lt;/Window.Resources&gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                        &lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None" "  ItemsSource="{Binding Source={StaticResource myList}}" HierarchicalDataTemplate="{StaticResource dataTemplate}"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                         &lt;/syncfusion:DiagramView&gt;
                     &lt;/syncfusion:DiagramControl.View&gt;
                &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   CountrySalesList list= this.Resources["myList"] as CountrySalesList;
                   Model.ItemsSource=list;
                   Model.HierarchicalDataTemplate=this.Resources["dataTemplate"] as DataTemplate;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.ItemTemplate">
            <summary>
            Gets or sets the ItemTemplate for items.
            </summary>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="Sample.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;Window.Resources&gt;
               &lt;!--The business object which contains the data to be binded . --&gt;
               &lt;local:CountrySalesList x:Key="myList"/&gt;
               &lt;!--Creating a hierarchical data from the XML data for generating a tree view--&gt;
               &lt;HierarchicalDataTemplate x:Key="dataTemplate" ItemsSource="{Binding Path=RegionSales}" DataType="{x:Type local:CountrySale}"&gt;
                   &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;HierarchicalDataTemplate ItemsSource="{Binding Path=Earnings}"   DataType="{x:Type local:RegionSale}"&gt;
                          &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                         &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                              &lt;DataTemplate DataType="{x:Type local:Sale}"&gt;
                                  &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;/HierarchicalDataTemplate&gt;
                  &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
              &lt;/HierarchicalDataTemplate&gt;
             &lt;/Window.Resources&gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                        &lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None" "  ItemsSource="{Binding Source={StaticResource myList}}" ItemTemplate="{StaticResource dataTemplate}"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                         &lt;/syncfusion:DiagramView&gt;
                     &lt;/syncfusion:DiagramControl.View&gt;
                &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/> in C#.
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   CountrySalesList list= this.Resources["myList"] as CountrySalesList;
                   Model.ItemsSource=list;
                   Model.ItemTemplate=this.Resources["dataTemplate"] as DataTemplate;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.LayoutHorizontalAlignment">
            <summary>
            Gets or sets LayoutHorizontalAlignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.LayoutVerticalAlignment">
            <summary>
            Gets or sets LayoutVerticalAlignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramModel.PropertyChanged">
            <summary>
            Calls propertychanged event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.LineBridgingEnabled">
            <summary>
            Gets or sets a value indicating whether [line bridging enabled].
            </summary>
            <value><c>true</c> if [line bridging enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramModel.Layers">
            <summary>
            Gets or sets the layers.
            </summary>
            <value>The layers.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DirectedTreeLayout">
            <summary>
            Represents the Directed Tree layout used for the automatic arrangement of nodes. The tree is created based on the Layout root specified.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.units">
            <summary>
            Used to store the units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.diagrampage">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.equalities">
            <summary>
            Used to store the equalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.mdepths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.manchorPoint">
            <summary>
            Used to store the anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.mmaxDepth">
            <summary>
            Used to store the maximum depth
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DirectedTreeLayout.moffsetValue">
            <summary>
            Used to store the default offset value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.DoLayout">
            <summary>
            Generates the tree layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.PrepareActivity(Syncfusion.Windows.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.PrepareActivity(tree);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    DirectedTreeLayout tree=new DirectedTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.AdjacentLeft(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the left node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent left Node object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.AdjacentRight(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the right node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent right Node object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.AllocateSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Allocates the space between nodes.
            </summary>
            <param name="v">The shape 1.</param>
            <param name="a">The shape 2.</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.AncestorShape(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the parent shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="shape1">The shape1.</param>
            <param name="adjacentShape">The adjacent shape.</param>
            <returns>THe ancestor shape</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.CheckDepths">
            <summary>
            Checks the depth.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.DoFirstWalk(Syncfusion.Windows.Diagram.IShape,System.Int32,System.Int32)">
            <summary>
            First traversal.
            </summary>
            <param name="shape">The Node object. </param>
            <param name="number">layout info number</param>
            <param name="depth">integer depth value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.DoSecondWalk(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Second Traversal of the tree.
            </summary>
            <param name="node">The node object.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space value.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.GetSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Boolean)">
            <summary>
            Gets the space between nodes.
            </summary>
            <param name="l"> Left node object</param>
            <param name="r"> Right node object</param>
            <param name="siblings">Has siblings</param>
            <returns>The space between nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.InitializeLayout">
            <summary>
            Initializes the  tree layout.
            </summary>
            <returns>true if initialization succeeds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.SetBreadthSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="shapeNext">This node object </param>
            <param name="previousShape">The previous node </param>
            <param name="space">The spacing value </param>
            <param name="depth">The depth value </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.SetDepthSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the depth space between each node.
            </summary>
            <param name="shapeNext">this node object</param>
            <param name="previousShape">previous node object</param>
            <param name="space">spacing value</param>
            <param name="depth">depth value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.ShiftSubTree(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double)">
            <summary>
            Shifts the tree.
            </summary>
            <param name="shape">Node object</param>
            <param name="shape2">The shape2.</param>
            <param name="shift">The shift .</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.TranslateShapePosition(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Translates the node position.
            </summary>
            <param name="shape">Shape object</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DirectedTreeLayout.UpdateDepths(System.Int32,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Updates the depth of the tree.
            </summary>
            <param name="depth">Depth value </param>
            <param name="item">Node object </param>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DirectedTreeLayout.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DirectedTreeLayout.Units">
            <summary>
            Gets or sets the units.
            </summary>
            <value>The units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DirectedTreeLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DirectedTreeLayout.RootNodeOffset">
            <summary>
            Gets or sets the root node offset.
            </summary>
            <value>The root node offset.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LayoutInfo">
            <summary>
            Contains information about the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mancestor">
            <summary>
            Used to store ancestor shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mchange">
            <summary>
            Used to store change.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mmod">
            <summary>
            Used to store mod;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mnumber">
            <summary>
            Used to store number.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mprelim">
            <summary>
            Used to store Prelim.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mshift">
            <summary>
            Used to store shift.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutInfo.mthread">
            <summary>
            Used to store thread
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LayoutInfo.ClearInfo">
            <summary>
            Clears the info.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LayoutInfo.SetupInfo(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Stores info value.
            </summary>
            <param name="item">The Node item.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Ancestor">
            <summary>
            Gets or sets the ancestor.
            </summary>
            <value>The ancestor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Change">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Mod">
            <summary>
            Gets or sets the mod.
            </summary>
            <value>The mod value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Prelim">
            <summary>
            Gets or sets the prelim.
            </summary>
            <value>The prelim.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Shift">
            <summary>
            Gets or sets the shift.
            </summary>
            <value>The shift.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.LayoutInfo.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout">
             <summary>
             Represents the Hierarchical Tree layout. 
             </summary>
             <remarks>
             The Hierarchical Tree Layout also arranges nodes in a tree-like structure however unlike the directed tree layout, the nodes in hierarchical layout may have multiple parents. As a result, there is no need to specify the layout root. 
             Nodes can have multiple parents in this layout.
             </remarks>
             <example>
             <code language="XAML">
            &lt;UserControl x:Class=&quot;Sample.MainPage&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; 
                 xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; 
                 xmlns:syncfusion=&quot;clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight&quot;
                xmlns:vsm=&quot;clr-namespace:System.Windows;assembly=System.Windows&quot; 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                               &lt;syncfusion:DiagramModel LayoutType="HierarchicalTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" SpaceBetweenSubTrees="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.units">
            <summary>
            Used to store the units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.diagrampage">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.equalities">
            <summary>
            Used to store the equalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.mchilds">
            <summary>
            Used to store the children.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.mdepths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.mparents">
            <summary>
            Used to store the parents
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.manchorPoint">
            <summary>
            Used to store the anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.maxrank">
            <summary>
            Used to store the maximum rank.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.minrank">
            <summary>
            Used to store the minimum rank.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.mmaxDepth">
            <summary>
            Used to store the maximum depth
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.moffsetValue">
            <summary>
            Used to store the default offset value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.virtualnode">
            <summary>
            Used to store the virtual node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.HierarchicalTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.DoLayout">
            <summary>
            Generates the tree layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.PrepareActivity(Syncfusion.Windows.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    HierarchicalTreeLayout tree=new HierarchicalTreeLayout();
                    tree.PrepareActivity(tree);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    HierarchicalTreeLayout tree=new HierarchicalTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    HierarchicalTreeLayout tree=new HierarchicalTreeLayout();
                    tree.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.AdjacentLeft(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the adjacent left node.
            </summary>
            <param name="shape">The shape.</param>
            <returns>The Adjacent Left shape</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.AdjacentRight(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the adjacent right node.
            </summary>
            <param name="shape">Current shape</param>
            <returns>The Adjacent Right shape</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.AllocateSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Allocates the space.
            </summary>
            <param name="v">The previous sibling.</param>
            <param name="a">The current node.</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.AncestorShape(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the ancestor shape.
            </summary>
            <param name="shape">The shape object.</param>
            <param name="shape1">The shape1 object.</param>
            <param name="adjacentShape">The adjacent shape.</param>
            <returns>The ancestor shape</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.AssignRank(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Assign rank to each node . The nodes get arranged based on the ranks assigned to them.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.CheckDepths">
            <summary>
            Assigns the depth to the layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.CycleCheck(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Checks if any cycle exists in the given input.
            </summary>
            <param name="shape">The current shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.DoFirstWalk(Syncfusion.Windows.Diagram.IShape,System.Int32,System.Int32)">
            <summary>
            Initial Traversal of the tree.
            </summary>
            <param name="shape">The shape object.</param>
            <param name="number">The number.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.DoSecondWalk(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Second traversal of the tree . Assigns the position to the nodes.
            </summary>
            <param name="node">The node object.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space object.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.GetPredecessor(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Gets the predecessor of the current shape.
            </summary>
            <param name="shape">The current shape.</param>
            <returns>The predecessor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.GetSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Boolean)">
            <summary>
            Gets the space.
            </summary>
            <param name="l">The left shape.</param>
            <param name="r">The right shape.</param>
            <param name="siblings">if set to <c>true</c> [siblings].</param>
            <returns>The spacing between nodes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
            <returns>Boolen value true if initialization succeeded; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.SetBreadthSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="shapeNext">The shape next.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space value.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.SetDepthSpace(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the depth space.
            </summary>
            <param name="shapeNext">The shape next.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.ShiftSubTree(Syncfusion.Windows.Diagram.IShape,Syncfusion.Windows.Diagram.IShape,System.Double)">
            <summary>
            Shifts the sub tree.
            </summary>
            <param name="shape">Shape1 object</param>
            <param name="shape2">Shape2 object</param>
            <param name="shift">Shift value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.TranslateShapePosition(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Translates the nodes .
            </summary>
            <param name="shape">Current shape</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.UpdateDepths(System.Int32,Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Updates the depths.
            </summary>
            <param name="depth">The depth value.</param>
            <param name="item">The item value.</param>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.PropertyChanged">
            <summary>
            Property Changed Event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.Units">
            <summary>
            Gets or sets the units.
            </summary>
            <value>The units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HierarchicalTreeLayout.RootNodeOffset">
            <summary>
            Gets or sets the root node offset.
            </summary>
            <value>The root node offset.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IDiagramPage">
            <summary>
            Provides the interface to the page.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.IDiagramPage.InvalidateMeasure">
            <summary>
            Invalidates the measure.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IDiagramPage.SelectionList">
            <summary>
            Gets the selection list.
            </summary>
            <value>The selection list.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IDiagramPage.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>The actual width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IDiagramPage.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>The actual height.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IDiagramView">
            <summary>
            Provides the interface to the view.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.INode">
            <summary>
            Represents node collection properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.RadialTreeLayout">
            <summary>
            Represents the Directed Tree layout used for the automatic arrangement of nodes. The tree is created based on the Layout root specified.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RadialTreeLayout.moffsetValue">
            <summary>
            Used to store the default offset value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RadialTreeLayout.m_depths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.RadialTreeLayout.units">
            <summary>
            Used to store the units.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RadialTreeLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RadialTreeLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RadialTreeLayout.RefreshLayout">
            <summary>
            Refreshes the layout.
            </summary>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Label = "Start";
                   n.Level = 1;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "Decision1");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                   Model.HorizontalSpacing = 30;
                   Model.VerticalSpacing = 50;
                   Model.SpaceBetweenSubTrees = 50;
                   DirectedTreeLayout tree=new DirectedTreeLayout();
                   tree.RefreshLayout();
                   LineConnector o = new LineConnector();
                   o.ConnectorType = ConnectorType.Straight;
                   o.TailNode = n1;
                   o.HeadNode = n;
                   o.HeadDecoratorShape = DecoratorShape.None;
                   Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.RadialTreeLayout.PrepareActivity(Syncfusion.Windows.Diagram.ILayout)">
            <summary>
            Prepares for the activity
            </summary>
            <param name="layout">ILayout instance.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Label = "Start";
                   n.Level = 1;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "Decision1");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                   Model.HorizontalSpacing = 30;
                   Model.VerticalSpacing = 50;
                   Model.SpaceBetweenSubTrees = 50;
                   LineConnector o = new LineConnector();
                   o.ConnectorType = ConnectorType.Straight;
                   o.TailNode = n1;
                   o.HeadNode = n;
                   o.HeadDecoratorShape = DecoratorShape.None;
                   Model.Connections.Add(o);
                   DirectedTreeLayout tree = new DirectedTreeLayout();
                   tree.PrepareActivity(tree);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.RadialTreeLayout.Units">
            <summary>
            Gets or sets the units.
            </summary>
            <value>The units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.RadialTreeLayout.RootNodeOffset">
            <summary>
            Gets or sets the root node offset.
            </summary>
            <value>The root node offset.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.TableLayout">
             <summary>
             Represents the Tablelayout used for the automatic arrangement of nodes. 
             </summary>
             <remarks>
             TableLayout  arranges the nodes  in a tabular structure based on specified intervals between them. The number of nodes in each row and column could be specified and the layout will take place accordingly. The nodes are assigned rows and columns based on the order in which they are added to the model and based on the maximum nodes allowed in that row and column. This layout enables to layout nodes automatically without the need to specify offset positions for each node.
             </remarks>
             <example>
             <code language="XAML">
            &lt;UserControl x:Class=&quot;Sample.MainPage&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; 
                 xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; 
                 xmlns:syncfusion=&quot;clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight&quot;
                xmlns:vsm=&quot;clr-namespace:System.Windows;assembly=System.Windows&quot; 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                               &lt;syncfusion:DiagramModel LayoutType="TableLayout" EnableLayoutWithVariedSizes="False" TableExpandMode="Horizontal" HorizontalSpacing="50" VerticalSpacing="50" RowCount="3" ColumnCount="3"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Node1");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Node2");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Width = 150;
                    n1.Height = 75;
                    Node n2 = new Node(Guid.NewGuid(), "Node3");
                    n2.Shape = Shapes.FlowChart_Process;
                    n2.Width = 150;
                    n2.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.Nodes.Add(n2);
                    Model.LayoutType = LayoutType.TableLayout;
                    Model.TableExpandMode = ExpandMode.Horizontal;
                    Model.EnableLayoutWithVariedSizes = false;
                    Model.HorizontalSpacing = 50;
                    Model.VerticalSpacing = 50;
                    Model.RowCount = 10;
                    Model.ColumnCount = 3;
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TableLayout.diagrampage">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TableLayout.hspace">
            <summary>
            Uset to store the horizontal spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TableLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TableLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TableLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TableLayout.vspace">
            <summary>
            Used to store the vertical spacing value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel,Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.TableLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.#ctor(Syncfusion.Windows.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.TableLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.DoLayout">
            <summary>
            Generates the layout for nodes of same size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.SetLayoutPosition">
            <summary>
            Set the SelectionBase layout starting position
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.DoLayoutWIthDifffentSizes">
            <summary>
            Does the layout for the nodes of difffent sizes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.DoLayoutWithDifferentSize">
            <summary>
            Does the layout with difffent sizes of Nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.PrepareActivity(Syncfusion.Windows.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    TableLayout tree = new TableLayout(View,Model);
                    table.PrepareActivity(table);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    DirectedTreeLayout tree=new DirectedTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    TableLayout table = new TableLayout(View,Model);
                    table.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.CalculateMaximumSize(Syncfusion.Windows.Diagram.IShape[0:,0:],System.Collections.ObjectModel.ObservableCollection{System.Windows.Size},System.Collections.ObjectModel.ObservableCollection{System.Windows.Size})">
            <summary>
            Calculates the maximum size of the node in each row and column.
            </summary>
            <param name="array">The node array.</param>
            <param name="rowsizecollection">The rowsizecollection.</param>
            <param name="columnsizecollection">The columnsizecollection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.GetX(Syncfusion.Windows.Diagram.Node,System.Double,Syncfusion.Windows.Diagram.Node,System.Double)">
            <summary>
            Calculates the offsetX values.
            </summary>
            <param name="node">The node object.</param>
            <param name="maxwidth">The maximum width of the column.</param>
            <param name="previousNode">The previous node.</param>
            <param name="previouscolumnwidth">The previous column width.</param>
            <returns>The offsetX value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.GetY(Syncfusion.Windows.Diagram.Node,System.Double,Syncfusion.Windows.Diagram.Node,System.Double)">
            <summary>
            Calculates the offsetY values.
            </summary>
            <param name="node">The node object.</param>
            <param name="maxheight">The maximum height of the row.</param>
            <param name="previousNode">The previous node.</param>
            <param name="previousrowHeight">Height of the previous row.</param>
            <returns>The offsety value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.LayoutNodes(Syncfusion.Windows.Diagram.IShape[0:,0:],System.Collections.ObjectModel.ObservableCollection{System.Windows.Size},System.Collections.ObjectModel.ObservableCollection{System.Windows.Size})">
            <summary>
            Layouts the nodes.
            </summary>
            <param name="array">The node array.</param>
            <param name="rowsizecollection">The rowsizecollection.</param>
            <param name="columnsizecollection">The columnsizecollection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.SetBreadthSpace(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="currentShape">The current shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TableLayout.SetDepthSpace(Syncfusion.Windows.Diagram.IShape)">
            <summary>
            Sets the depth space.
            </summary>
            <param name="currentShape">The current shape.</param>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.TableLayout.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TableLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DateTimeSettings.ToPixel(System.DateTime)">
            <summary>
            Convert DateTime to double value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DateTimeSettings.ToPixel(System.TimeSpan)">
            <summary>
            Convert TimeSpan to double value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DateTimeSettings.ToDateTime(System.Double)">
            <summary>
            Convert double to DateTime value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DateTimeSettings.ToTimeSpan(System.Double)">
            <summary>
            Convert double to TimeSpan value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DateTimeSettings.#ctor(System.TimeSpan,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DateTimeFactor">DateTimeFactor</see> class. 
            </summary>
            <param name="timeSpan">TimeSpan for an unit</param>
            <param name="pixelPerUnit">number of pixel to be considered for TimeSpan specified</param>
            <remarks>Eg: If 100 pixels is considered as 1 day then TimeSpan = 1 day and PixelUnit = 100.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DateTimeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DateTimeSettings">DateTimeSettings</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.RulerInterval">
            <summary>
            Used to define distance between Majorlines in Ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.CustomFormatString">
            <summary>
            Format of the DateTime value that is displayed in Ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.FormatString">
            <summary>
            Future Enhancement - Dynamic FormatString based on 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.IsEnabled">
            <summary>
            Gets or sets a value indicating whether DateTime feature is enabled or not.
            </summary>
            <remarks>Default value: false. If this property is set to false, Node's DateTime related properties will have no effect and the Rulers will not show DateTime value.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.TimeSpan">
            <summary>
            Gets the TimeSpan for an unit.
            </summary>
            <value></value>
            <remarks>Eg: If 100 pixels is considered as 1 day then TimeSpan = 1 day and PixelUnit = 100.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.PixelUnit">
            <summary>
            Gets the number of pixel to be considered for TimeSpan specified.
            </summary>
            <value></value>
            <remarks>Eg: If 100 pixels is considered as 1 day then TimeSpan = 1 day and PixelUnit = 100.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.OriginDateX">
            <summary>
            Gets or sets Origin DateTime that represents origin if DiagramPage.
            </summary>
            <value>Default value: 1/1/2000</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DateTimeSettings.OriginDateY">
            <summary>
            Gets or sets Origin DateTime that represents origin if DiagramPage.
            </summary>
            <value>Default value: 1/1/2000</value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DateTimeSettings.PropertyChanged">
            <summary>
            Occurs when Properties of DateTimeSettings are changed. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.HorizontalRuler">
            <summary>
            Represents the horizontal ruler.
            </summary>
            <remarks>
            Rulers display the coordinates of elements on the <see cref="T:Syncfusion.Windows.Diagram.DiagramPage"/>. Negative label values get displayed on the ruler in case the page is panned to the right side.
            On Zooming, the ruler values get adjusted accordingly, to match with the current Zoom level. At any point, the ruler value always indicates the exact coordinates of the page and its elements. 
            So when the page is zoomed, the interval values get halved or doubled depending upon the zoom level.
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.HorizontalRuler"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   ShowHorizontalGridLine="False" 
                                                   ShowVerticalGridLine="False"
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                           RulerThickness="25" 
                                           MajorLinesStroke="Black" 
                                           MinorLinesStroke="Gray" 
                                           LabelFontColor="Black" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
              <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.HorizontalRuler"/> in C#.
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.RulerThickness = 25d;
                   hruler.MajorLinesStroke = Brushes.Black;
                   hruler.MinorLinesStroke = Brushes.Gray;
                   hruler.LabelFontColor = Brushes.Black;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.rulerThickness">
            <summary>
            Used to store ruler thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.markerThickness">
            <summary>
            Used to store marker thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.view">
            <summary>
            Used to store View instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.minorThickness">
            <summary>
            Used to store minor lines thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.majorThickness">
            <summary>
            Used to store major lines thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.MajorLinesStrokeProperty">
            <summary>
            Gets or sets the MajorLinesStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.MinorLinesStrokeProperty">
            <summary>
            Gets or sets the MinorLinesStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.MarkerBrushProperty">
            <summary>
            Gets or sets the MarkerBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.ShowMarkerProperty">
            <summary>
            Gets or sets the ShowMarker dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.OrientationProperty">
            <summary>
            Gets or sets the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.IntervalProperty">
            <summary>
            Gets or sets the Interval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.MinorLineCountPerIntervalProperty">
            <summary>
            Gets or sets the MinorLineCountPerInterval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.MarkerPositionProperty">
            <summary>
            Gets or sets the MarkerPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.LabelPositionProperty">
            <summary>
            Gets or sets the LabelPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.HorizontalRuler.LabelFontColorProperty">
            <summary>
            Gets or sets the LabelFontColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HorizontalRuler.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HorizontalRuler.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [orientation changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HorizontalRuler.OnLabelPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label position changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HorizontalRuler.OnLabelFontColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label font color changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HorizontalRuler.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.HorizontalRuler"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.HorizontalRuler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.HorizontalRuler"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.LabelFontColor">
            <summary>
            Gets or sets the LabelFontColor.
            </summary>
            <remarks>
            Default value is Black.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     LabelFontColor="Black" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.LabelFontColor = Brushes.Black;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MajorLinesThickness">
            <summary>
            Gets or sets the MajorLinesThickness.
            </summary>
            <remarks>
            Default value is 1.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     MajorLinesThickness="2" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.MajorLinesThickness = 2;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MinorLinesThickness">
            <summary>
            Gets or sets the MinorLinesThickness.
            </summary>
            <remarks>
            Default value is .5d.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     MinorLinesThickness="2" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.MinorLinesThickness = 2;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.LabelPosition">
            <summary>
            Gets or sets the LabelPosition.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MajorLinesStroke">
            <summary>
            Gets or sets the MajorLinesStroke.
            </summary>
            <remarks>
            Default value is Black.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     MajorLinesStroke="Orange" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.MajorLinesStroke = Brushes.Orange;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MinorLinesStroke">
            <summary>
            Gets or sets the MinorLinesStroke.
            </summary>
            <remarks>
            Default value is Black.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     MinorLinesStroke="Orange" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.MinorLinesStroke = Brushes.Orange;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MarkerBrush">
            <summary>
            Gets or sets the MarkerBrush.
            </summary>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     MarkerBrush="Red" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.MarkerBrush = Brushes.Red;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MarkerThickness">
            <summary>
            Gets or sets the MarkerBrush.
            </summary>
            <remarks>
            Default value is 1d.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     MarkerThickness="2" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.MarkerThickness = 2;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.ShowMarker">
            <summary>
            Gets or sets a value indicating whether [show marker].
            </summary>
            <value><c>true</c> if [show marker]; otherwise, <c>false</c>.</value>
            <remarks>
            Default value is true.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     ShowMarker="False" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.ShowMarker = false;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.Orientation">
            <summary>
            Gets the Orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.Interval">
            <summary>
            Gets or sets the Interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MinorLinesPerInterval">
            <summary>
            Gets or sets the MinorLinesPerInterval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.RulerThickness">
            <summary>
            Gets or sets the RulerThickness.
            </summary>
            <remarks>
            Default value is 25d.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" &gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:HorizontalRuler Name="horizontalRuler" 
                                                     RulerThickness="50" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
              </code>
             <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   hruler.RulerThickness = 50;
                   View.HorizontalRuler = hruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.HorizontalRuler.MarkerPosition">
            <summary>
            Gets the MarkerPosition.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.TickBar">
            <summary>
            Represents the tickbar used in the rulers.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.intvalue">
            <summary>
            Used to store the interval value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.m_range">
            <summary>
            Used to store the range.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.m_minorlinesgap">
            <summary>
            Used to store the minor lines gap
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.hruler">
            <summary>
            Used to store the Horizontal ruler instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.vruler">
            <summary>
            Used to store the Vertical ruler instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.view">
            <summary>
            Used to store View Instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.renderpoint">
            <summary>
            Used to store the render point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.control">
            <summary>
            Used to store Control instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.unitchanged">
            <summary>
            Used to store Unit Change information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.TickBar"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.TickBar_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the TickBar control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.TickBar_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the TickBar control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.MeasurementUnitsProperty">
            <summary>
            Specifies the MeasurementUnit Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.TickBarOrientationProperty">
            <summary>
            Specifies the TickBarOrientation Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.OwnerProperty">
            <summary>
            Specifies the Owner Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.IntervalProperty">
            <summary>
            Specifies the Interval Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.MinorLinesCountProperty">
            <summary>
            Specifies the MinorLinesCount Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.MinorLinesStrokeProperty">
            <summary>
            Specifies the MinorLinesStroke Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.MajorLinesStrokeProperty">
            <summary>
            Specifies the MajorLinesStroke Dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBar.LabelFontColorProperty">
            <summary>
            Specifies the LabelFontColor Dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnMeasurementUnitChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [measurement unit changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.GetView(System.Windows.FrameworkElement)">
            <summary>
            Gets the DiagramControl.
            </summary>
            <param name="element">The element.</param>
            <returns> The Diagram Control</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.CalculateTickBarRange">
            <summary>
            Calculates the tick bar range.
            </summary>
            <returns>The tick bar range</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.GetPosition">
            <summary>
            Gets the ticks position.
            </summary>
            <returns>Interval value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.CalculateMinorLineDistance(Syncfusion.Windows.Diagram.TickBarRange,System.Double,System.Double)">
            <summary>
            Calculates the minor lines distance.
            </summary>
            <param name="range">The range value</param>
            <param name="interval">The interval</param>
            <param name="smalllinescount">The minor lines count</param>
            <returns>Minor lines distance in double</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.CalculateMinorLinesHeight(System.Windows.Forms.Orientation)">
            <summary>
            Calculates the minor lines height
            </summary>
            <param name="orientation">Horizontal or Vertical</param>
            <returns>The Minor lines height.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.CalculateMajorLinesHeight(System.Windows.Forms.Orientation)">
            <summary>
            Calculates the major lines height
            </summary>
            <param name="orientation">Horizontal or Vertical</param>
            <returns>The Major lines height</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.GetRounding">
            <summary>
            Gets the rounding value.
            </summary>
            <returns>The rounding value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.RenderRuler(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the ruler.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.DrawTickLines(System.Windows.Media.DrawingContext,Syncfusion.Windows.Diagram.TickBarRange,System.Windows.Forms.Orientation,System.Double)">
            <summary>
            Draws the tick lines.
            </summary>
            <param name="context">Drawing Context</param>
            <param name="range">Range value</param>
            <param name="orientation">Horizontal or Vertical</param>
            <param name="minorlinesdistance">Minor lines distance</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnIntervalChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [interval changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [orientation changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnMinorLinesStrokeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [minor lines stroke changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnLabelFontColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label font color changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBar.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.OriginalInterval">
            <summary>
            Gets or sets the original interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.MeasurementUnits">
            <summary>
            Gets or sets the units
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.TickBarOrientation">
            <summary>
            Gets or sets the tickbar orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.Owner">
            <summary>
            Gets or sets the diagram Control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.Interval">
            <summary>
            Gets or sets the Interval value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.MinorLinesCount">
            <summary>
            Gets or sets the MajorLines count.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.MajorLinesStroke">
            <summary>
            Gets or sets the MajorLinesStroke.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.LabelFontColor">
            <summary>
            Gets or sets the LabelFontColor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBar.MinorLinesStroke">
            <summary>
            Gets or sets the MinorLinesStroke.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.TickBar.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.TickBarRange">
            <summary>
            Represents the tickbar range.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBarRange.startvalue">
            <summary>
            Used to store the start value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TickBarRange.endvalue">
            <summary>
            Used to store the end value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBarRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.TickBarRange"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.TickBarRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.TickBarRange"/> class.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBarRange.Start">
            <summary>
            Gets or sets the Start value .
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.TickBarRange.End">
            <summary>
            Gets or sets the End value .
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.VerticalRuler">
            <summary>
            Represents the vertical ruler.
            </summary>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.VerticalRuler"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   ShowHorizontalGridLine="False" 
                                                   ShowVerticalGridLine="False"
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           RulerThickness="25" 
                                           MajorLinesStroke="Black" 
                                           MinorLinesStroke="Gray" 
                                           LabelFontColor="Black" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.VerticalRuler"/> in C#.
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.RulerThickness = 25d;
                   vruler.MajorLinesStroke = Brushes.Black;
                   vruler.MinorLinesStroke = Brushes.Gray;
                   vruler.LabelFontColor = Brushes.Black;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.rulerThickness">
            <summary>
            Used to store ruler thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.markerThickness">
            <summary>
            Used to store marker thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.minorThickness">
            <summary>
            Used to store minor lines thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.majorThickness">
            <summary>
            Used to store major lines thickness value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.MajorLinesStrokeProperty">
            <summary>
            Gets or sets the MajorLinesStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.MinorLinesStrokeProperty">
            <summary>
            Gets or sets the MinorLinesStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.MarkerBrushProperty">
            <summary>
            Gets or sets the MarkerBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.ShowMarkerProperty">
            <summary>
            Gets or sets the ShowMarker dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.OrientationProperty">
            <summary>
            Gets or sets the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.IntervalProperty">
            <summary>
            Gets or sets the Interval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.MinorLineCountPerIntervalProperty">
            <summary>
            Gets or sets the MinorLineCountPerInterval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.MarkerPositionProperty">
            <summary>
            Gets or sets the MarkerPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.TranslatePositionProperty">
            <summary>
            Gets or sets the TranslatePosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.VerticalRuler.LabelFontColorProperty">
            <summary>
            Gets or sets the LabelFontColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.VerticalRuler.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [orientation changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.VerticalRuler.OnLabelFontColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label font color changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.VerticalRuler.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.VerticalRuler"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.VerticalRuler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.VerticalRuler"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.LabelFontColor">
            <summary>
            Gets or sets the Label Font Color.
            </summary>
            <remarks>
            Default value is Black.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           LabelFontColor="Black" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.LabelFontColor = Brushes.Black;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.TranslatePosition">
            <summary>
            Gets or sets the Position at which to move.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MajorLinesStroke">
            <summary>
            Gets or sets the MajorLinesStroke.
            </summary>
            <remarks>
            Default value is Black.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           MajorLinesStroke="Red" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
             </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.MajorLinesStroke = Brushes.Red;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MinorLinesStroke">
            <summary>
            Gets or sets the MinorLinesStroke.
            </summary>
            <remarks>
            Default value is Black.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           MinorLinesStroke="Red" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.MinorLinesStroke = Brushes.Red;
                  View.VerticalRuler = vruler;
             </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MarkerBrush">
            <summary>
            Gets or sets the Marker Brush.
            </summary>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           MarkerBrush="Black" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
             </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.MarkerBrush = Brushes.Black;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MarkerThickness">
            <summary>
            Gets or sets the MarkerThickness.
            </summary>
            <remarks>
            Default value is 1.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           MarkerThickness="2" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
             </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.MarkerThickness = 2;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.ShowMarker">
            <summary>
            Gets or sets a value indicating whether [show marker].
            </summary>
            <value><c>true</c> if [show marker]; otherwise, <c>false</c>.</value>
            <remarks>
            Default value is True.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow"
            xmlns:local="clr-namespace:Sample" FontWeight="Bold"
            Icon="Images/App.ico" &gt;
            &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
            IsSymbolPaletteEnabled="True"&gt;
            &lt;syncfusion:DiagramControl.View&gt;
            &lt;syncfusion:DiagramView  IsPageEditable="True"
            Bounds="0,0,12,12"
            Name="diagramView"  &gt;
            &lt;syncfusion:DiagramView.VerticalRuler&gt;
            &lt;syncfusion:VerticalRuler Name="verticalRuler"
            ShowMarker="True" /&gt;
            &lt;/syncfusion:DiagramView.VerticalRuler&gt;
            &lt;/syncfusion:DiagramView&gt;
            &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.Model = Model;
            Control.View = View;
            VerticalRuler vruler = new VerticalRuler();
            vruler.ShowMarker = true;
            View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.Orientation">
            <summary>
            Gets the Orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.Interval">
            <summary>
            Gets or sets the Interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MajorLinesThickness">
            <summary>
            Gets or sets the MajorLinesThickness.
            </summary>
            <remarks>
            Default value is 1.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           MajorLinesThickness="2" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
             </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.MajorLinesThickness = 2;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MinorLinesThickness">
            <summary>
            Gets or sets the MinorLinesThickness.
            </summary>
            <remarks>
            Default value is .5.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           MinorLinesThickness="2" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
             </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.MinorLinesThickness = 2;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MinorLinesPerInterval">
            <summary>
            Gets or sets the MinorLinesPerInterval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.RulerThickness">
            <summary>
            Gets or sets the RulerThickness.
            </summary>
            <remarks>
            Default value is 30.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                       &lt;syncfusion:VerticalRuler Name="verticalRuler" 
                                           RulerThickness="50" /&gt;
                     &lt;/syncfusion:DiagramView.VerticalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
             </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.Model = Model;
                   Control.View = View;
                   VerticalRuler vruler = new VerticalRuler();
                   vruler.RulerThickness = 50;
                  View.VerticalRuler = vruler;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.VerticalRuler.MarkerPosition">
            <summary>
            Gets the MarkerPosition.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramPage">
            <summary>
            Represents the diagram page .
            <para> The DiagramPage is just a container to hold the objects(nodes and connectors) added through model.
            The DiagramView uses the page to display the diagram objects.
            </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.o">
            <summary>
            Used to store a static object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.m_selectionList">
            <summary>
            Used to store selection list
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.dview">
            <summary>
            Used to store the View instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.dc">
            <summary>
            Used to store the diagram control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramPage"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.DiagramPage_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Is called when the diagram page gets loaded.
            </summary>
            <param name="sender">Diagram page</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.GetDiagramControl(System.Windows.FrameworkElement)">
            <summary>
            Gets the Diagram Control object.
            </summary>
            <param name="element">The element.</param>
            <returns>The Diagram Control object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for the control.
            </summary>
            <param name="finalSize">The final area within the parent
            that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.Copyitem(System.Object)">
            <summary>
            Creates a clone of the object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.CustomPathStyleProperty">
            <summary>
            Identifies the CustomPathStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.CustomThemeProperty">
            <summary>
            Identifies the CustomTheme dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.ThemePathStyleProperty">
            <summary>
            Identifies the Theme dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.EnableResizingCurrentNodeOnMultipleSelectionProperty">
            <summary>
            Identifies the AllowSelect dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.LayoutTypeProperty">
            <summary>
            Defines the LayoutType property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPage.MeasurementUnitsProperty">
            <summary>
            Defines the MeasurementUnits property.  This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.OnUnitsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [units changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPage.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.StyleRef">
            <summary>
            Gets or sets the style reference. Used for Serialization purpose.
            </summary>
            <value>The style ref.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.LineStyleRef">
            <summary>
            Gets or sets the LineStyleRef reference. Used for Serialization purpose.
            </summary>
            <value>The line style ref.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.EnableResizingCurrentNodeOnMultipleSelection">
            <summary>
            Gets or sets a value indicating whether [enable resizing current node on multiple selection].
            </summary>
            <value>
            <c>true</c> if [enable resizing current node on multiple selection]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.OrientationRef">
            <summary>
            Gets or sets the orientation reference. Used for Serialization purpose.
            </summary>
            <value>The orientation ref.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.HorizontalSpacingref">
            <summary>
            Gets or sets the Horizontal spacing reference.Used for Serialization purpose.
            </summary>
            <value>The horizontal spacing reference.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.VerticalSpacingref">
            <summary>
            Gets or sets the vertical spacing reference .Used for Serialization purpose.
            </summary>
            <value>The vertical spacing reference.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.SubTreeSpacingref">
            <summary>
             Gets or sets the SpaceBetweenSubTreeSpacing reference .Used for Serialization purpose.
            </summary>
            <value>The sub tree spacing reference.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.LayoutTyperef">
            <summary>
             Gets or sets the SpaceBetweenSubTreeSpacing reference .Used for Serialization purpose.
            </summary>
            <value>The sub tree spacing reference.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.GridHorizontalOffset">
            <summary>
            Gets or sets the HorizontalOffset value of the grid .
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Offset value.
            </value>
            <remarks>
            Default value is 25d.</remarks>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  (View.Page as DiagramPage).GridHorizontalOffset=100;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.GridVerticalOffset">
            <summary>
            Gets or sets the VerticalOffset value of the grid .
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Offset value.
            </value>
            <remarks>
            Default value is 25d.</remarks>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  (View.Page as DiagramPage).GridVerticalOffset=100;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.SelectionList">
            <summary>
            Gets the Selection List of the items.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeCollection"/>
            The list containing the selected items.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.MeasurementUnits">
            <summary>
            Gets or sets the Measurement unit property.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.MeasureUnits"/>
            Enum specifying the unit to be used.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  (View.Page as DiagramPage).MeasurementUnits = MeasureUnits.Inch;
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.OffsetX = 1.5;
                   n.OffsetY = 2.5;
                   n.Width = 1.5;
                   n.Height = 0.75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.ConnectorType">
            <summary>
            Gets or sets the the type of connection to be used.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.DiagramPage.ConnectorType"/>
            Enum specifying the type of the connector to be used.
            </value>
            <example>
            <para/>This example shows how to set ConnectorType in C#.
            <code language="C#">
            connObject.ConnectorType = ConnectorType.Orthogonal;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramPage.ReferenceCount">
            <summary>
            Gets or sets the reference count. Used for serialization purposes
            </summary>
            <value>The reference count.</value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramPage.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramControl">
            <summary>
            Represents the Diagram control.
            </summary>
            <remarks>
            <para>The Diagram control is the base class which contains the view and the model. 
            It receives user input and translates it into actions and commands on the model and view.  
            It also implements symbol palette and scrolling, and enables horizontal and vertical scrollbars when the size of the view exceeds the size of the window. 
            </para>
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                         lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   ShowHorizontalGridLine="False" 
                                                   ShowVerticalGridLine="False"
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramView"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramModel"/>
                
            
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.m_delayLayout">
            <summary>
            Used to check delay layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.isunloaded">
            <summary>
            Used to check if Diagram Control is unloaded.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.exe">
            <summary>
            Used to check if executed once.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.m_ispageloaded">
            <summary>
            Used to check if page is loaded.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.m_ispalettechanged">
            <summary>
            Used to store SymbolPalette visibility changed value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.ispagesaved">
            <summary>
            Used to check if page is saved or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.nodecleared">
            <summary>
            Used to check if Nodes.Clear() is called.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.noderemoved">
            <summary>
            Used to check if node is removed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.connremoved">
            <summary>
            Used to check if connector is removed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.isnodepresent">
            <summary>
            Checks if any node object is available for deletion.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.DiagramControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Calls DiagramControl_Loaded method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.DiagramControl_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the DiagramControl control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized"/> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.SetScope(System.Windows.DependencyObject)">
            <summary>
            Sets the namescope.
            </summary>
            <param name="obj">The object to set the scope to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.GetIsolatedFileContents(System.Windows.Style)">
            <summary>
            Gets the isolated file contents .
            </summary>
            <param name="style">The style of the node or line connector.</param>
            <returns>The contents stored in the isolated file.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Save">
            <summary>
            Saves the page as bitmap or xaml.Opens the save dialog box to select the  format.
            </summary>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  Control.Save();
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Save(System.String)">
            <summary>
            Saves the page into the specified file. Takes filename as a parameter.
            </summary>
            <param name="filename">Name of the XAML file to be loaded.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  Control.Save("Hello.xaml");
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Save(System.IO.Stream)">
            <summary>
            Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
              System.IO.MemoryStream stream = new System.IO.MemoryStream();
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  Control.Save(stream as System.IO.Stream);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Load">
            <summary>
            Loads the page. Opens a Load XAML dialog box to select the XAML file to be loaded.
            </summary>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  Control.Load();
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Load(System.String)">
            <summary>
            Loads the page. Takes the filename as a parameter.
            </summary>
            <param name="filename">Name of the XAML file to be loaded.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  Control.Save("Hello.xaml");
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Load(System.IO.Stream)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               System.IO.MemoryStream stream = new System.IO.MemoryStream();
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  Control.Save("Hello.xaml");
                  stream.Position = 0;
                   Control.Load(stream as System.IO.Stream);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnApplyTemplate">
            <summary>
            Overrides the OnApplyTemplate().
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.InternalNodes_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls InternalNodes_CollectionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.DiagramView_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Calls DiagramView_LayoutUpdated method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.Connections_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls Connections_CollectionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.DrawNodes">
            <summary>
            Draws the nodes on the DiagramPage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.DrawConnectios">
            <summary>
            Draws the connections on the DiagramPage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.FindByName(System.String)">
            <summary>
            Searches for the specified node based on its name and returns the one with the same name.
            </summary>
            <param name="name">Unique identifier .</param>
            <returns>Matched Node.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.ModelProperty">
            <summary>
            Identifies the Model .  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.ViewProperty">
            <summary>
            Identifies the View.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.IsSymbolPaletteEnabledProperty">
            <summary>
            Identifies whether the SymbolPalette is enabled or not. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramControl.SymbolPaletteProperty">
            <summary>
            Identifies  the SymbolPalette . This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnModelChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnViewChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnShowPalleteChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowPalleteChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides class handling for the KeyUp routed event that occurs when the any key on the keyboard
            is released.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size of the <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> and returns the available size.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>Size of the diagram control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramControl.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.Model">
            <summary>
            Gets or sets the Model property.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.DiagramModel"/>
            </value>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                         lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   ShowHorizontalGridLine="False" 
                                                   ShowVerticalGridLine="False"
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramControl"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramModel"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>Type: <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/></value>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow"
            xmlns:local="clr-namespace:Sample" FontWeight="Bold"
            Icon="Images/App.ico" &gt;
            &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
            IsSymbolPaletteEnabled="True"
            Background="WhiteSmoke"&gt;
            lt;syncfusion:DiagramControl.Model&gt;
            &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
            &lt;/syncfusion:DiagramModel&gt;
            &lt;/syncfusion:DiagramControl.Model&gt;
            &lt;syncfusion:DiagramControl.View&gt;
            &lt;syncfusion:DiagramView  IsPageEditable="True"
            Background="LightGray"
            Bounds="0,0,12,12"
            ShowHorizontalGridLine="False"
            ShowVerticalGridLine="False"
            Name="diagramView"  &gt;
            &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
            &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
            &lt;syncfusion:DiagramView.VerticalRuler&gt;
            &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
            &lt;/syncfusion:DiagramView.VerticalRuler &gt;
            &lt;/syncfusion:DiagramView&gt;
            &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            HorizontalRuler hruler = new HorizontalRuler();
            View.HorizontalRuler = hruler;
            View.ShowHorizontalGridLine = false;
            View.ShowVerticalGridLine = false;
            VerticalRuler vruler = new VerticalRuler();
            View.VerticalRuler = vruler;
            View.Bounds = new Thickness (0, 0, 1000, 1000);
            View.IsPageEditable = true;
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramView"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.SymbolPalette">
            <summary>
            Gets the SymbolPalette property.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.DiagramControl.SymbolPalette"/>
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                         lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
                  sfilter.Label = "Custom";
                   Control.SymbolPalette.SymbolFilters.Add(sfilter);
                  SymbolPaletteGroup s = new SymbolPaletteGroup();
                  s.Label = "Custom";
                  SymbolPalette.SetFilterIndexes(s, new Int32Collection(new int[] { 0, 5}));
                  Control.SymbolPalette.SymbolGroups.Add(s);
                  SymbolPaletteItem ss = new SymbolPaletteItem();
                  Path path = this.Resources["CustomShape"] as Path;
                  ss.Content = path;
                  s.Items.Add(ss);
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramControl.SymbolPalette"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.SymbolPaletteGroup"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.SymbolPaletteItem"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.SymbolPaletteFilter"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.IsSymbolPaletteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is symbol palette enabled.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if SymbolPalette is enabled, false otherwise.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                         lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
                  sfilter.Label = "Custom";
                   Control.SymbolPalette.SymbolFilters.Add(sfilter);
                  SymbolPaletteGroup s = new SymbolPaletteGroup();
                  s.Label = "Custom";
                  SymbolPalette.SetFilterIndexes(s, new Int32Collection(new int[] { 0, 5}));
                  Control.SymbolPalette.SymbolGroups.Add(s);
                  SymbolPaletteItem ss = new SymbolPaletteItem();
                  Path path = this.Resources["CustomShape"] as Path;
                  ss.Content = path;
                  s.Items.Add(ss);
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramControl.SymbolPalette"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.SymbolPaletteGroup"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.SymbolPaletteItem"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.SymbolPaletteFilter"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.IsPageLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is page loaded.
            </summary>
            <value>
            <c>true</c> if this instance is page loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.IsUnloaded">
            <summary>
            Gets or sets a value indicating whether the Diagram Control is unloaded.
            </summary>
            <value>
            <c>true</c> if the Diagram Control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.IspageSaved">
            <summary>
            Gets or sets a value indicating whether page is saved.
            </summary>
            <value><c>true</c> if page is saved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramControl.IsSymbolPaletteVisibilityChanged">
            <summary>
            Gets or sets a value indicating whether the Symbol Palette
            </summary>
            <value>
            <c>true</c> if this instance is symbol palette visibility changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramControl.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeSelectionAdorner">
            <summary>
            Represents the adorner used for node selection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeSelectionAdorner.m_startposition">
            <summary>
            Used to store the start point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeSelectionAdorner.m_endposition">
            <summary>
            Used to store the start point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeSelectionAdorner.selectionPen">
            <summary>
            Used to store the pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.NodeSelectionAdorner.m_diagramPanel">
            <summary>
            Used to store the Page instance..
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeSelectionAdorner.#ctor(System.Windows.Controls.Control,System.Nullable{System.Windows.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.NodeSelectionAdorner"/> class.
            </summary>
            <param name="diagramPanel">The diagram panel.</param>
            <param name="dragStartPoint">The drag start point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeSelectionAdorner.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when the mouse 
            pointer  is over this control.
            </summary>
            <param name="e">The MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeSelectionAdorner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseUp routed event that occurs when the mouse 
            button is released while the mouse pointer is over this control.
            </summary>
            <param name="e">The MouseButtonEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeSelectionAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Calls render of the NodeSelectionAdorner.
            </summary>
            <param name="dc">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.NodeSelectionAdorner.InvalidateSelection">
            <summary>
            Updates selection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.NodeInfo">
            <summary>
            Gives information about the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeInfo.Left">
            <summary>
            Gets or sets the node left position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeInfo.Top">
            <summary>
            Gets or sets the node top position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeInfo.Position">
            <summary>
            Gets or sets the node centre position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.NodeInfo.MeasurementUnit">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Resizer">
            <summary>
            Represents the Resizer class which enables resizing of the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.Resizer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.Resizer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.LabelResizer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.Resizer"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Grouping">
            <summary>
              Looks up a localized string similar to Grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Grouping_Group">
            <summary>
              Looks up a localized string similar to Group.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Grouping_Ungroup">
            <summary>
              Looks up a localized string similar to Ungroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Order">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Order_BringForward">
            <summary>
              Looks up a localized string similar to Bring Forward.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Order_BringToFront">
            <summary>
              Looks up a localized string similar to Bring To Front.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Order_SendBackward">
            <summary>
              Looks up a localized string similar to Send Backward.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.ContextMenu_Order_SendToBack">
            <summary>
              Looks up a localized string similar to Send To Back.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Advanced">
            <summary>
              Looks up a localized string similar to Advanced....
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_BlackandWhiteMode">
            <summary>
              Looks up a localized string similar to Black And White Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_ColorMode">
            <summary>
              Looks up a localized string similar to Color Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Name">
            <summary>
              Looks up a localized string similar to Print Diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Print">
            <summary>
              Looks up a localized string similar to Print.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_PrintStretch">
            <summary>
              Looks up a localized string similar to Print Stretch.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Stretch_Fill">
            <summary>
              Looks up a localized string similar to Fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Stretch_None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Stretch_Uniform">
            <summary>
              Looks up a localized string similar to Uniform.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.PrintDialog_Stretch_UniformtoFill">
            <summary>
              Looks up a localized string similar to UniformToFill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteFilter_All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteFilter_Connectors">
            <summary>
              Looks up a localized string similar to Connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteFilter_CustomShapes">
            <summary>
              Looks up a localized string similar to Custom Shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteFilter_ElectricalShapes">
            <summary>
              Looks up a localized string similar to Electrical Shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteFilter_Flowchart">
            <summary>
              Looks up a localized string similar to Flowchart.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteFilter_Shapes">
            <summary>
              Looks up a localized string similar to Shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteGroup_Connectors">
            <summary>
              Looks up a localized string similar to Connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteGroup_CustomShapes">
            <summary>
              Looks up a localized string similar to Custom Shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteGroup_ElectricalShapes">
            <summary>
              Looks up a localized string similar to Electrical Shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteGroup_Flowchart">
            <summary>
              Looks up a localized string similar to Flowchart.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Resources.Syncfusion_Diagram_Wpf.SymbolPaletteGroup_Shapes">
            <summary>
              Looks up a localized string similar to Shapes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ButtonChecker">
            <summary>
            Represents ButtonChecker items control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ButtonChecker.CheckedButtonProperty">
            <summary>
            Defines check button. This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ButtonChecker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.ButtonChecker"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ButtonChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.ButtonChecker"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ButtonChecker.OnCheckedButtonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCheckedButtonChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ButtonChecker.OnCheckedButtonChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CheckedButtonChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ButtonChecker.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled PreviewMouseLeftButtonDown routed event reaches an element in 
            its route that is derived from this class. Implement this method to add class handling 
            for this event.
            </summary>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ButtonChecker.CheckedButton">
            <summary>
            Gets or sets the checked button.
            </summary>
            <value>The checked button.</value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.ButtonChecker.CheckedButtonChanged">
            <summary>
            Event that is raised when CheckedButton property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PalleteFilterConverter">
            <summary>
            Represents GalleryFilter converter.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a PaletteFilter to FilterRibbonButton.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.FilterToRibbonButtonConverter">
            <summary>
            Represents Filter to RibbonButton converter.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterToRibbonButtonConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a Filter to RibbonButton.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterToRibbonButtonConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from  FilterRibbonButton to a Filter.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.FilterRibbonButton">
            <summary>
            Represents the button used for the symbol Palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.FilterRibbonButton.CornerRadiusProperty">
            <summary>
            Defines corner radius of button. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.FilterRibbonButton.LabelProperty">
            <summary>
            Defines button label. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.FilterRibbonButton.IsSelectedProperty">
            <summary>
            Defines when button is selected. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.FilterRibbonButton.IsToggleProperty">
            <summary>
            Defines when button is toggle. This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnLabelChanged method of the instance, notifies of the
            dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnLabelChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises LabelChanged event.
            </summary>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnSizeFormChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSizeFormChanged method of the instance, notifies of
            the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnSizeFormChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SizeFormChanged
            event.
            </summary>
            <param name="e">Property change details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnIsSelectedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsSelectedChanged method of the instance, notifies of
            the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnIsSelectedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsSelectedChanged
            event.
            </summary>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnIsToggleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsToggleChanged method of the instance, notifies of
            the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnIsToggleChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsToggleChanged
            event.
            </summary>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.FilterRibbonButton.OnClick">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> routed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.FilterRibbonButton.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of a <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> are rounded.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.FilterRibbonButton.CornerRadius"/>
            The CornerRadius that describes the degree to which corners are rounded. This property has no default value.
            </value>
            <remarks>
            Although the property name suggests that you can use only singular values, CornerRadius also supports non-uniform radii. Radius values that are too large are scaled so that they blend smoothly from corner to corner.
            </remarks>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";        
            button.CornerRadius = new CornerRadius(3);
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/>
            <seealso cref="P:Syncfusion.Windows.Diagram.FilterRibbonButton.CornerRadius"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.FilterRibbonButton.Label">
            <summary>
            Gets or sets the text that labels the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/>.
            </summary>
            <value>
            Type: <see cref="T:System.String"/>
            Text that labels the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/>. The default is empty string.
            </value>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";        
            button.CornerRadius = new CornerRadius(3);
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/>
            <seealso cref="T:System.String"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.FilterRibbonButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> is selected.   
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            true if the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> is selected; false if the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> is not selected.  The default is false.
            </value>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";  
            button.IsToggle = true;
            button.IsSelected = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.FilterRibbonButton.IsToggle">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> is toggle button.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            true if the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> is toggle; false if the <see cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/> is not toggle.  The default is false.
            </value>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";  
            button.IsToggle = true;
            button.IsSelected = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.FilterRibbonButton"/>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.FilterRibbonButton.LabelChanged">
            <summary>
            Event that is raised when Label property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.FilterRibbonButton.SizeFormChanged">
            <summary>
            Event that is raised when SizeForm property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.FilterRibbonButton.IsSelectedChanged">
            <summary>
            Event that is raised when IsSelected property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.FilterRibbonButton.IsToggleChanged">
            <summary>
            Event that is raised when IsToggle property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PalleteFilterSelector">
            <summary>
            Represents internal PalleteFilterSelector control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.m_dropDownButton">
            <summary>
            Represents the drop down button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.m_popup">
            <summary>
            Represents the popup
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.m_stack">
            <summary>
            Is used for correct popup opening and closing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.dropdownborder">
            <summary>
            Drop down button border
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.FiltersProperty">
            <summary>
            Defines the collection of filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.SelectedFilterProperty">
            <summary>
            Defines the selected filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PalleteFilterSelector.IsDropDownOpenProperty">
            <summary>
            Defines whether dropdown is open.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.PalleteFilterSelector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.PalleteFilterSelector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call this OnApplyTemplate() method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.DropDownButton_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseDown event of the m_dropDownButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.OnIsDropDownOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsDropDownOpenChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.OnIsDropDownOpenChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsDropDownOpenChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.PalleteFilterSelector.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.LostMouseCapture attached
            event reaches an element in its route that is derived from
            this class. Implement this method to add class handling for
            this event.
            </summary>
            <param name="e">TheMouseEventArgs that contains event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PalleteFilterSelector.Filters">
            <summary>
            Gets or sets the collection of filters.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PalleteFilterSelector.SelectedFilter">
            <summary>
            Gets or sets the selected filter.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.PalleteFilterSelector.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether this instance is drop down open.
            </summary>
            <value>
            <c>true</c> if this instance is drop down open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.PalleteFilterSelector.IsDropDownOpenChanged">
            <summary>
            Event that is raised when IsDropDownOpen property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SymbolPalette">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemWidthProperty">
            <summary>
            Defines the SymbolPalette item width.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemHeightProperty">
            <summary>
            Defines the SymbolPalette item height.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemMouseOverForegroundBrushProperty">
            <summary>
            Identifies the ItemMouseOverForegroundBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.BorderHeightProperty">
            <summary>
            Identifies the BorderHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.BorderWidthProperty">
            <summary>
            Identifies the BorderWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.CustomHeaderTextProperty">
            <summary>
            Identifies the CustomHeaderText dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.FilterIndexesProperty">
            <summary>
            Defines SymbolPalette filter indexes.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.InternalFiltersProperty">
            <summary>
            Defines the collection of InternalSymbolPalette filters.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpBackgroundProperty">
            <summary>
            Identifies the PopUpBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpForegroundProperty">
            <summary>
            Identifies the PopUpForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpBorderBrushProperty">
            <summary>
            Identifies the PopUpBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpItemMouseOverBrushProperty">
            <summary>
            Identifies the PopUpItemMouseOverBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpItemMouseOverBorderBrushProperty">
            <summary>
            Identifies the PopUpItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpBorderThicknessProperty">
            <summary>
            Identifies the PopUpBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.PopUpLeftColumnBackgroundProperty">
            <summary>
            Identifies the PopUpLeftColumnBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.CheckerBorderBrushProperty">
            <summary>
            Identifies the CheckerBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.CheckerBackgroundProperty">
            <summary>
            Identifies the CheckerBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.CheckerTickBrushProperty">
            <summary>
            Identifies the CheckerTickBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorBackgroundProperty">
            <summary>
            Identifies the FilterSelectorBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorForegroundProperty">
            <summary>
            Identifies the FilterSelectorForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorMouseOverForegroundProperty">
            <summary>
            Identifies the FilterSelectorMouseOverForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorBorderBrushProperty">
            <summary>
            Identifies the FilterSelectorBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorBorderThicknessProperty">
            <summary>
            Identifies the FilterSelectorBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemBorderThicknessProperty">
            <summary>
            Identifies the ItemBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemCornerRadiusProperty">
            <summary>
            Identifies the ItemCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemPaddingProperty">
            <summary>
            Identifies the ItemPadding dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.SelectedItemProperty">
            <summary>
            Defines the selected SymbolPalette item.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteGroupBackgroundProperty">
            <summary>
            Identifies the SymbolPaletteGroupBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteGroupBorderBrushProperty">
            <summary>
            Identifies the SymbolPaletteGroupBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteGroupForegroundProperty">
            <summary>
            Identifies the SymbolPaletteGroupForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ShowPreviewProperty">
            <summary>
            Identifies the Preview of the SymbolPaletteItem dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ItemGenerateModeProperty">
            <summary>
            Identifies the ItemGenerateMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPalette.ShowFilterProperty">
            <summary>
            Identifies the ShowFilter dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.#ctor">
            <summary>
            Initialiazes a new instance of SymbolPalette control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.AddSymbolPaletteItem(Syncfusion.Windows.Diagram.SymbolPaletteGroup,System.String)">
            <summary>
            Adds the SymbolPaletteItem to the SymbolPaletteGroup
            </summary>
            <param name="group">SymbolPaletteGroup</param>
            <param name="path">Path string </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.GoToState(System.Boolean,System.String[])">
            <summary>
            Called when changes in visual state of automatic button takes place
            </summary>
            <param name="useTransitions">Indicate whether to apply transition or not</param>
            <param name="stateNames">Contain the state name</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnFilterIndexesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnFilterIndexesChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.GetFilterIndexes(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the FilterIndexes property for a given element.
            </summary>
            <param name="obj">The element for which to retrieve the FilterIndexes value.</param>
            <returns>the filter indices.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.SetFilterIndexes(System.Windows.DependencyObject,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets the value of the FilterIndexes property for a given element.
            </summary>
            <param name="obj">The element on which to apply the property value.</param>
            <param name="value">FilterIndexes value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.LoadPalette">
            <summary>
            Loads the palette items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnApplyTemplate">
            <summary>
            Applies the Template for the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnSelectedItemChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SelectedItemChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnSelectedItemChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSelectedItemChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnCurrentFilterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCurrentFilterChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnItemGenerateModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnItemGenerateModeChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.OnCurrentFilterChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CurrentFilterChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.FilterItems(System.Object)">
            <summary>
            Checks if the group filter contains items or not .
            </summary>
            <param name="item">SymbolPalette item</param>
            <returns>True if it has ,false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.SymbolGroups_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls OnCollectionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteFilters_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls GalleryFilters_CollectionChanged method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPalette.UpdateVisualState(System.Boolean)">
            <summary>
            Method is used to update the state of automatic button
            </summary>
            <param name="useTransitions">Update the state</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpBorderBrush">
            <summary>
            Gets or sets the pop up border brush.
            </summary>
            <value>The pop up border brush.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemPadding">
            <summary>
            Gets or sets the padding for the SymbolPaletteItem.
            </summary>
            <value>The padding for the SymbolPaletteItem</value>
            <remarks>
            Default value is 0.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemPadding=new Thickness(2);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpBorderThickness">
            <summary>
            Gets or sets the pop up border thickness.
            </summary>
            <value>The pop up border thickness.</value>
            <remarks>
            Default value is (0,1,1,1).
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpBorderThickness=new Thickness(2);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemBorderThickness">
            <summary>
            Gets or sets the SymbolPaletteItem border thickness.
            </summary>
            <value>The item border thickness.</value>
            <remarks>
            Default value is 1.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemBorderThickness=new Thickness(2);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemCornerRadius">
            <summary>
            Gets or sets the SymbolPaletteItem corner radius.
            </summary>
            <value>The item corner radius.</value>
            <remarks>
            Default value is 2.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCornerRadius=new CornerRadius(4);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemWidth">
            <summary>
            Gets or sets the SymbolPalette item width.
            </summary>
            <value>
            Type: <see cref="T:System.Int32"/>
            Width of the item in pixels.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Control.SymbolPalette.ItemWidth = 40;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemHeight">
            <summary>
            Gets or sets the SymbolPalette item height.
            </summary>
            <value>
            Type: <see cref="T:System.Int32"/>
            Height of the item in pixels.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Control.SymbolPalette.ItemHeight = 40;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemMouseOverForegroundBrush">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.SymbolPalette"/> has any <see cref="T:Syncfusion.Windows.Diagram.SymbolPaletteGroup"/>.
            </summary>
            <value>
            <c>true</c> if this instance has groups; otherwise, <c>false</c>.
            </value>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            bool value = Control.SymbolPalette.HasGroups;
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.SymbolPalette.SelectedItemChanged">
            <summary>
            Event that is raised when SelectedItem property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.SymbolPalette.CurrentFilterChanged">
            <summary>
            Event that is raised when CurrentFilter property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ShowPreview">
            <summary>
            Gets or sets the value of the ShowPreview dependency property.
            </summary>       
            <value>
            Type : bool
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemGenerateMode">
            <summary>
            Gets or sets the value of the ItemGenerateMode dependency property.
            </summary>       
            <value>
            Type : ItemGenerateMode
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.BorderHeight">
            <summary>
            Gets or sets the value of the BorderHeight dependency property.
            </summary>       
            <value>
            Type : Double
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.BorderWidth">
            <summary>
            Gets or sets the value of the BorderWidth dependency property.
            </summary>       
            <value>
            Type : Double
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpBackground">
            <summary>
            Gets or sets the pop up background.
            </summary>
            <value>The pop up background.</value>
            <remarks>
            Default value is WhiteSmoke.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpBackground=Brushes.White;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpForeground">
            <summary>
            Gets or sets the pop up foreground.
            </summary>
            <value>The pop up foreground.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpForeground=Brushes.Black;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpItemMouseOverBrush">
            <summary>
            Gets or sets the pop up item mouse over brush.
            </summary>
            <value>The pop up item mouse over brush.</value>
            <remarks>
            Default value is LightSalmon.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpItemMouseOverBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpItemMouseOverBorderBrush">
            <summary>
            Gets or sets the pop up item mouse over brush.
            </summary>
            <value>The pop up item mouse over brush.</value>
            <remarks>
            Default value is LightSalmon.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpItemMouseOverBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.CheckerBackground">
            <summary>
            Gets or sets the checker background.
            </summary>
            <value>The checker background.</value>
            <remarks>
            Default value is Beige.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.CheckerBackground=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.CheckerBorderBrush">
            <summary>
            Gets or sets the checker border brush.
            </summary>
            <value>The checker border brush.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.CheckerBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.CheckerTickBrush">
            <summary>
            Gets or sets the checker tick brush.
            </summary>
            <value>The checker tick brush.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.CheckerTickBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.PopUpLeftColumnBackground">
            <summary>
            Gets or sets the pop up left column background.
            </summary>
            <value>The pop up left column background.</value>
            <remarks>
            Default value is LightGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpLeftColumnBackground=Brushes.Gray;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.CustomHeaderText">
            <summary>
            Gets or sets the value of the CustomHeaderText dependency property.
            </summary>       
            <value>
            Type : String
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorBackground">
            <summary>
            Gets or sets the filter selector background.
            </summary>
            <value>The filter selector background.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorBackground=Brushes.Salmon;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorForeground">
            <summary>
            Gets or sets the filter selector foreground.
            </summary>
            <value>The filter selector foreground.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorForeground=Brushes.Black;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorBorderThickness">
            <summary>
            Gets or sets the filter selector border thickness.
            </summary>
            <value>The filter selector border thickness.</value>
            <remarks>
            Default value is (0,0,0,1).
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorBorderThickness=new Thickness(2);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorMouseOverForeground">
            <summary>
            Gets or sets the filter selector mouse over foreground.
            </summary>
            <value>The filter selector mouse over foreground.</value>
            <remarks>
            Default value is OldLace.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorMouseOverForeground=Brushes.White;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorBorderBrush">
            <summary>
            Gets or sets the filter selector border brush.
            </summary>
            <value>The filter selector border brush.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorDropdownBorderBrush">
            <summary>
            Gets or sets the filter selector dropdown border brush.
            </summary>
            <value>The filter selector dropdown border brush.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.FilterSelectorDropdownBackgroundBrush">
            <summary>
            Gets or sets the filter selector dropdown background brush.
            </summary>
            <value>The filter selector dropdown background brush.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedBorderBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedMouseOverBorderBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemMouseOverBorderBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedBackgroundBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemCheckedMouseOverBackgroundBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ItemMouseOverBackgroundBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.SelectedItem">
            <summary>
            Gets or sets the value of the SelectedItem dependency property.
            </summary>       
            <value>
            Type : SymbolPaletteItem
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.InternalSymbolFilters">
            <summary>
            Gets or sets the internal symbol filters.
            </summary>
            <value>The internal symbol filters.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteGroupBackground">
            <summary>
            Gets or sets the SymbolPaletteGroup background.
            </summary>
            <value>The symbol palette group background.</value>
            <remarks>
            Default value is Bisque
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.SymbolPaletteGroupBackground=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteGroupBorderBrush">
            <summary>
            Gets or sets the SymbolPaletteGroup border brush.
            </summary>
            <value>The symbol palette group border brush.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.SymbolPaletteGroupBorderBrush=Brushes.Pink;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.SymbolPaletteGroupForeground">
            <summary>
            Gets or sets the SymbolPaletteGroup foreground.
            </summary>
            <value>The symbol palette group foreground.</value>
            <remarks>
            Default value is SaddleBrown.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.SymbolPaletteGroupForeground=Brushes.Gray;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPalette.ShowFilter">
            <summary>
            Gets or sets the ShowFilter.
            </summary>
            <value>To toggle symbol palette filter.</value>
            <remarks>
            Default value is True.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ShowFilter=True;
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SymbolPaletteFilter">
            <summary>
            Represents SymbolPaletteFilter class.
            </summary>
            <remarks>
            A Symbol Palette filter can be added to the <see cref="T:Syncfusion.Windows.Diagram.SymbolPalette"/> control, using the SymbolFilters property, so that only desired Symbol Palette groups get displayed. The SetFilterIndexes property is used to specify the index value of the filters for which the group is to be displayed.
            <para/>
            The filter names are specified integer values,  with the first filter index starting from 0. Based on the filter indexes specified for that particular group, the visibility of the group is controlled. So the group gets displayed only when any of the specified filter names are selected.
            </remarks>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //SymbolPaletteFilter creates a filter for the palette groups.
            SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
            sfilter.Label = "Custom";
            Control.SymbolPalette.SymbolFilters.Add(sfilter);
            //SymbolPaletteGroup creates a group and assigns a specific filter index.
            SymbolPaletteGroup s = new SymbolPaletteGroup();
            s.Label = "Custom";
            SymbolPalette.SetFilterIndexes(s, new Int32Collection(new int[] { 0, 5 }));
            Control.SymbolPalette.SymbolGroups.Add(s);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.SymbolPaletteFilter"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteFilter.LabelProperty">
            <summary>
            Defines label of the filter.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteFilter.Label">
            <summary>
            Gets or sets the label of the filter.
            </summary>
            Type: <see cref="T:System.String"/>
            Text that names the SymbolPalette filter.
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //SymbolPaletteFilter creates a filter for the palette groups.
            SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
            sfilter.Label = "Custom";
            Control.SymbolPalette.SymbolFilters.Add(sfilter);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SymbolPaletteGroup">
            <summary>
            A control having a set of ColorGroupItems
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.DataSourceProperty">
            <summary>
            Identifies the DataSource dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.HeaderVisibilityProperty">
            <summary>
            Identifies the HeaderVisibility dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.PanelVisibilityproperty">
            <summary>
            Identifies the PanelVisibility dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.SymbolPaletteGroupBackgroundProperty">
            <summary>
            Identifies the <see cref="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.SymbolPaletteGroupBackgroundProperty"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.SymbolPaletteGroupForegroundProperty">
            <summary>
            Identifies the <see cref="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.SymbolPaletteGroupForegroundProperty"/>  dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteGroup.#ctor">
            <summary>
            Initializes a new instance of the SymbolPaletteGroup class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteGroup.LabelProperty">
            <summary>
            Identifies the HeaderName dependency property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteGroup.IsHeaderChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when IsHeaderChanged event is raised
            </summary>
            <param name="e">Property change details, such as old value and new value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteGroup.IsHeaderChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when HeaderName is changed
            </summary>
            <param name="o">SymbolPaletteGroup object where the change occures on</param>
            <param name="e">Property change details, such as old value and new value</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteGroup.OnApplyTemplate">
            <summary>
            Applies the Template for the control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteGroup.Label">
            <summary>
            Gets or sets the value of the HeaderName dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteGroup.HeaderVisibility">
            <summary>
            Gets or sets the value of the HeaderVisibility dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteGroup.PanelVisibility">
            <summary>
            Gets or sets the value of the PanelVisibility dependency property.
            </summary>        
            <value>
            Type : Visibility
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteGroup.SymbolPaletteGroupBackground">
            <summary>
            Gets or sets the value of the ThemeBackGround dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteGroup.SymbolPaletteGroupForeground">
            <summary>
            Gets or sets the value of the ThemeForeGround dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SymbolPaletteItem">
            <summary>
            A Class having a single color and its variants colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderMarginProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderMargin"/>  dependency property.
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.HeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderHeight"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemBorderThicknessProperty">
            <summary>
            Identifies the ItemBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCornerRadiusProperty">
            <summary>
            Identifies the ItemCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMarginProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMargin"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemPaddingProperty">
            <summary>
            Identifies the ItemPadding dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.PathDataProperty">
            <summary>
            Identifies the PathData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemNameProperty">
            <summary>
            Identifies the PathData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.WidthProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderWidth"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.PreviewBrushProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.PreviewBrush"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SymbolPaletteItem.PreviewSizeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.PreviewSize"/>  dependency property.
            </summary>     
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.#ctor">
            <summary>
            Creates the instance of SymbolPaletteItem control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.GetNumericListSeparator(System.IFormatProvider)">
            <summary>
            Gets the numeric list separator
            </summary>
            <param name="provider"></param>
            <returns>char</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.GetSymbolPaletteGroupFromChildren(System.Windows.FrameworkElement)">
            <summary>
            Method to find the parent of given element
            </summary>
            <param name="element">Element for which parent is to be found</param>
            <returns>Parent of type SymbolPaletteGroup</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.GoToState(System.Boolean,System.String[])">
            <summary>
            Called when changes in visual state of border takes place
            </summary>
            <param name="useTransitions">Indicate whether to apply transition or not</param>
            <param name="stateNames">Contain the state name</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.IsPresentationFrameworkCollection(System.Type)">
            <summary>
            Determines whether [is presentation framework collection] [the specified type].
            </summary>
            <param name="type">The type of the object.</param>
            <returns>
            <c>true</c> if [is presentation framework collection] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.OnApplyTemplate">
            <summary>
            Applies the Template for the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Event raised when mouse is left from the item.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Event raised when mouse left buttom is down on the item.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the PreviewMouseDown routed event that occurs when the  
            mouse pointer is over this control. 
            </summary>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.SymbolPaletteItem.Clone(System.Object)">
            <summary>
            Clones the specified obj.
            </summary>
            <param name="obj">The object to be cloned.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.PreviewBrush">
            <summary>
            Gets or sets the value of the PreviewBrush dependency property.
            </summary> 
            
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderHeight">
            <summary>
            Gets or sets the value of the BorderHeight dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderMargin">
            <summary>
            Gets or sets the value of the BorderMargin dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderThick">
            <summary>
            Gets or sets the value of the BorderThickness dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.BorderWidth">
            <summary>
            Gets or sets the value of the BorderWidth dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedBorderBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBorderBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMouseOverBorderBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedBackgroundBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBackgroundBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMouseOverBackgroundBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemMargin">
            <summary>
            Gets or sets the value of the ItemMargin dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.PathData">
            <summary>
            Gets or sets the value of the PathData dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.SymbolPaletteItem.ItemName">
            <summary>
            Gets or sets the value of the PathData dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DragObject">
            <summary>
            DragObject class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DragObject.SerializedItem">
            <summary>
            Gets or sets the XAML
            </summary>
            <value>The XAML string.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DragObject.DesiredSize">
            <summary>
            Gets or sets the size of the desired.
            </summary>
            <value>The size of the desired.</value>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramCommandManager">
            <summary>
            Represents the Diagram Command manager.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.alignleftcommand">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.aligncentercommand">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.alignrightcommand">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.aligntopcommand">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.alignmiddlecommand">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.alignbottomcommand">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.spacedowncommand">
            <summary>
            SpaceDown Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.spaceacrosscommand">
            <summary>
            SpaceAcross Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.samesizecommand">
            <summary>
            SameSize Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.samewidthcommand">
            <summary>
            SameWidth Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.sameheightcommand">
            <summary>
            SameHeight Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.deletecommand">
            <summary>
            Delete Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.groupcommand">
            <summary>
            Group Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.ungroupcommand">
            <summary>
            Ungroup Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mupcommand">
            <summary>
            Move up Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mdowncommand">
            <summary>
            Move Down Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mleftcommand">
            <summary>
            Move Left Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mrightcommand">
            <summary>
            Move Right Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mBringToFrontcommand">
            <summary>
            BringToFront command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mSendToBackcommand">
            <summary>
            SendToBack command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mMoveForwardcommand">
            <summary>
            MoveForward command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mSendBackwardcommand">
            <summary>
            SendBackward command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mUndocommand">
            <summary>
            Undo command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mRedocommand">
            <summary>
            Redo Command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.mDiagramView">
            <summary>
            DiagramView instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramCommandManager.i">
            <summary>
            Used to store the group count.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.DiagramCommandManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.#ctor(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramCommandManager"/> class.
            </summary>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.View_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the view control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.Delete_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Calls Delete_Executed method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.Delete_Enabled(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Calls Delete_Enabled method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.DeleteObjects(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Deletes the objects.
            </summary>
            <param name="mDiagramView">The diagram view instance.</param>
            <remarks>Select the shape to be deleted and press the Delete key.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.UpdateZOrder(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Updates the ZOrder.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.RedoCommand(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Performs Redo operation.
            </summary>
            <param name="mDiagramView">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.UndoCommand(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Performs Undo operation.
            </summary>
            <param name="mDiagramView">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteCutCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines when the Cut Commands are to be executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteCopyCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines when the Copy Commands are to be executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecutePasteCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines when the Paste Commands are to be executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteAlignmentCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines when the Alignment Commands are to be executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteDeleteCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Specifies when the Delete Command is to be executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteGroupCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Specifies when the Group Command is to be executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteNudgeCommands(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Specifies when the Nudge Commands are to be executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteOrderCommands(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Specifies whether the Order Commands can be executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteSpaceCommands(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the Space Commands can be executed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteUndoCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the Undo Command can be executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CanExecuteRedoCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the Redo Command can be executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnDeleteCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Delete Command is executed.
            </summary>
            <param name="sender">The diagram view.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnGroupCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Group Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnUngroupCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Ungroup Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnMoveUpCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the MoveUp Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnMoveDownCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the MoveDown Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnMoveLeftCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the MoveLeft Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnMoveRightCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the MoveRight Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnBringToFrontCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the BringToFront Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSendToBackCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SendToBack Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.GetIntersectionPoints(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Invoked when the MoveForward Command is executed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSendBackwardCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SendBackward Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CompareIndex(System.Windows.UIElement,Syncfusion.Windows.Diagram.DiagramView,System.Collections.Generic.List{System.Windows.UIElement})">
            <summary>
            Compares the index.
            </summary>
            <param name="element">The element.</param>
            <param name="view">The view instance.</param>
            <param name="selectionordered">The ordered list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.CompareBackwardIndex(System.Windows.UIElement,Syncfusion.Windows.Diagram.DiagramView,System.Collections.Generic.List{System.Windows.UIElement})">
            <summary>
            Compares the index of the backward.
            </summary>
            <param name="element">The element.</param>
            <param name="view">The view instance.</param>
            <param name="selectionordered">The ordered list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnCutCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Copy Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnCopyCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Copy Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnPasteCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Copy Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnAlignLeftCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the AlignLeft Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnAlignCenterCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the AlignCenter Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnAlignRightCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the AlignRight Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnAlignTopCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the AlignTop Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnAlignMiddleCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the AlignMiddle Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnAlignBottomCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the AlignBottom Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSpaceDownCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SpaceDown Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSpaceAcrossCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SpaceAcross Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSameSizeCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SameSize Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSameWidthCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SameWidth Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnSameHeightCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the SameHeight Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnUndoCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the UndoCommand  is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramCommandManager.OnRedoCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the RedoCommand  is executed.
            </summary>
            <param name="sender">The DiagramView.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.AlignLeft">
            <summary>
            Gets the AlignLeft RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.AlignLeft.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.AlignCenter">
            <summary>
            Gets the AlignCenter RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.AlignCenter.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.AlignRight">
            <summary>
            Gets the AlignRight RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.AlignRight.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.AlignTop">
            <summary>
            Gets the AlignTop RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.AlignTop.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.AlignMiddle">
            <summary>
            Gets the AlignMiddle RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.AlignMiddle.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.AlignBottom">
            <summary>
            Gets the AlignBottom RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.AlignBottom.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SpaceDown">
            <summary>
            Gets the SpaceDown RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SpaceDown.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SpaceAcross">
            <summary>
            Gets the SpaceAcross RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SpaceAcross.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SameSize">
            <summary>
            Gets the SameSize RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SameSize.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SameWidth">
            <summary>
            Gets the SameWidth RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SameWidth.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SameHeight">
            <summary>
            Gets the SameHeight RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SameHeight.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.Delete">
            <summary>
            Gets the Delete RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.Delete.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.Group">
            <summary>
            Gets the Group RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.Group.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.Ungroup">
            <summary>
            Gets the Ungroup RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.Ungroup.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.MoveUp">
            <summary>
            Gets the MoveUp RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.MoveUp.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.MoveDown">
            <summary>
            Gets the MoveDown RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.MoveDown.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.MoveLeft">
            <summary>
            Gets the MoveLeft RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.MoveLeft.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.MoveRight">
            <summary>
            Gets the MoveRight RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.MoveRight.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.BringToFront">
            <summary>
            Gets the BringToFront RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.BringToFront.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SendToBack">
            <summary>
            Gets the SendToBack RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SendToBack.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.MoveForward">
            <summary>
            Gets the MoveForward RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.MoveForward.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.SendBackward">
            <summary>
            Gets the SendBackward RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.SendBackward.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.Undo">
            <summary>
            Gets the Undo RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.Undo.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramCommandManager.Redo">
            <summary>
            Gets the Redo RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
            DiagramCommandManager.Redo.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramView">
            <summary>
            Represents the Diagram View.
            <para>The view obtains data from the model and presents them to the user. It typically manages the overall layout of the data obtained from model.
            Apart from presenting the data, view also handles navigation between the items, and some aspects of item selection. 
            The views also implements basic user interface features, such as rulers, and drag and drop. 
            It handles the events, which occur on the objects, obtained from the model. 
            Command mechanism is also implemented by the view.
            </para>
            </summary>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   ShowHorizontalGridLine="False" 
                                                   ShowVerticalGridLine="False"
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalRuler"/>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramView.VerticalRuler"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.DiagramPage"/>
            <summary>
            Represents the Diagram View Print and Export.
            </summary>
            <remarks>
            <para>The view obtains data from the model and presents them to the user. It typically manages the overall layout of the data obtained from model.
            Apart from presenting the data, view also handles navigation between the items, and some aspects of item selection. 
            The views also implements basic user interface features, such as rulers, and drag and drop, printing and exporting. 
            It handles the events, which occur on the objects, obtained from the model. 
            Command mechanism is also implemented by the view.
            </para>
            <para>
            The print feature enables the user to set a printer to be used, and it allows the user to define the pages and the number of copies that should be printed. It also provides an overview of the document, showing how the document will appear when printed.
            </para>
            <para>
            The page can also be exported to various image formats.
            </para>
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
            xmlns:local="clr-namespace:Sample" FontWeight="Bold"
            Icon="Images/App.ico" &gt;
            &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                     Background="LightGray"  
                                                     Bounds="0,0,12,12"  
                                                     ShowHorizontalGridLine="False" 
                                                     ShowVerticalGridLine="False"
                                                     Name="diagramView"  &gt;
                       &lt;syncfusion:DiagramView.HorizontalRuler&gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IView">
            <summary>
            Interface to the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IView.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IView.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.IView.ShowPage">
            <summary>
            Gets or sets a value indicating whether [show page].
            </summary>
            <value><c>true</c> if [show page]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.DefaultDim">
            <summary>
            Dimensions for printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.CPManager">
            <summary>
            Used to store copypastemanager.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.m_cursor">
            <summary>
            Used to store the cursor used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.scrollview">
            <summary>
            Used to store the scrollviewer instance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ispagedit">
            <summary>
            Used to store the IsPageEditable property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.otherevents">
            <summary>
             Used to store the other event's state
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.isvieworiginchanged">
            <summary>
            Used to store the View grid state
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.isdrag">
            <summary>
            Used to store the node drag information.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.screenStartPoint">
            <summary>
            Used to store the screen start point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.zoomTransform">
            <summary>
            Used to store  the scale transform
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.nodedel">
            <summary>
            Checks if node was deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.linedel">
            <summary>
            Checks if line was deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.isdupdel">
            <summary>
            Checks if deletion was done.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.intedges">
            <summary>
            Used to store internal edges collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.mOrigin">
            <summary>
            Used to store the origin point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.showRuler">
            <summary>
            Used to store ShowRulers property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.showPage">
            <summary>
            Used to store ShowPage property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.mModel">
            <summary>
            Used to store the model
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.mViewGrid">
            <summary>
            Used to store the DiagramViewGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.onReset">
            <summary>
            Used to store the OnReset command value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.viewgrid">
            <summary>
             Used to store the view grid
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.hortickbar">
            <summary>
             Used to store horizontal tickbar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.vertickbar">
            <summary>
             Used to store vertical tickbar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.dc">
            <summary>
             Used to store diagram Control instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.lessthanone">
            <summary>
            Used to store boolean value on zoom factor becoming less than one.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.morethanone">
            <summary>
            Used to store boolean value on zoom factor becoming more than one.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.firstzoom">
            <summary>
            Used to store boolean value on executing zoom for the first time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.i">
            <summary>
            Used to store a double value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.j">
            <summary>
            Used to store a double value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.count">
            <summary>
            Used to store count value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.isdragged">
            <summary>
            Used to check if node is dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.pixelvalue">
            <summary>
            Used to store pixel interval
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.leveloneexe">
            <summary>
            Used to store boolean value on executing level one once
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.zoominexe">
            <summary>
            Used to store boolean value on executing zoom once
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.m_groups">
            <summary>
            Used to store the groups in the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.measured">
            <summary>
            Checks if MeasureOveride  was called.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.undo">
            <summary>
            Checks if Undo command was executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.redo">
            <summary>
            Checks if Redo command was executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.dragged">
            <summary>
            Checks if <see cref="T:Syncfusion.Windows.Diagram.Node"/> was dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.resized">
            <summary>
            Checks if <see cref="T:Syncfusion.Windows.Diagram.Node"/> was resized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.undoresize">
            <summary>
            Checks if <see cref="T:Syncfusion.Windows.Diagram.Node"/> was resized as a resule of undo operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.redoresize">
            <summary>
            Checks if <see cref="T:Syncfusion.Windows.Diagram.Node"/> was resized as a resule of redo operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.deletecommandexe">
            <summary>
            Checks if Delete command was executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.delcount">
            <summary>
            Used to store the delete count.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.nodedragcount">
            <summary>
            Used to store the node drag count.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.oldselectionlist">
            <summary>
            Used to store the values in the selection list.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.resizecount">
            <summary>
            Used to store the count of the <see cref="T:Syncfusion.Windows.Diagram.Node"/> been resized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.rotatecount">
            <summary>
            Used to store the count of the <see cref="T:Syncfusion.Windows.Diagram.Node"/> been rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.undocommandstack">
            <summary>
            Refers to the undo stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.redocommandstack">
            <summary>
            Refers to the redo stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.layout">
            <summary>
            Checks if automatic layout is used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> class.
            </summary>        
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.DiagramProperties">
            <summary>
            It is used to store the Node, Lineconnector types and Properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.IsPageSavedProperty">
            <summary>
            Identifies the ViewGridOrigin property.This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized"/> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Invoked when the Diagram View is loaded.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the DiagramView control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorCanRemoveSegmentsEvent">
            <summary>
            Connector Additional Points Removing RoutedEvent
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.LineMovedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeMovedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ObjectDrawnEvent">
            <summary>
             NodeSelected Routed event. Is raised when the node is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeSelectedEvent">
            <summary>
             NodeSelected Routed event. Is raised when the node is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeUnSelectedEvent">
            <summary>
             NodeUnSelected Routed event. Is raised when the node is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.FitToPageExecutingEvent">
            <summary>
             BringToView Routed event. Is raised when fittopage is applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeDeletedEvent">
            <summary>
             NodeDeleted Routed event. Is raised when the node is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeDeletingEvent">
            <summary>
             NodeDeleted Routed event. Is raised when the node is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorDeletedEvent">
            <summary>
             ConnectorDeleted Routed event. Is raised when the connector is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorDeletingEvent">
            <summary>
             ConnectorDeleted Routed event. Is raised when the connector is deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.PreviewNodeDropEvent">
            <summary>
             PreviewNodeDrop Routed event. Is raised when a node is dropped and just before a node object is created.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.PreviewConnectorDropEvent">
            <summary>
             PreviewConnectorDrop Routed event. Is raised when the connector is dropped and before a line object is created.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeDragStartEvent">
            <summary>
             NodeDragStart Routed event. Is raised when the node drag is started.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeDragEndEvent">
            <summary>
             NodeDragEnd Routed event. Is raised when the node drag is completed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeClickEvent">
            <summary>
             NodeClick Routed event. Is raised when the node is clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeDoubleClickEvent">
            <summary>
             NodeDoubleClick Routed event. Is raised when the node is clicked twice in succession.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorDoubleClickEvent">
            <summary>
             ConnectorDoubleClick Routed event. Is raised when the Connector is clicked twice in succession.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeDropEvent">
            <summary>
             NodeDrop Routed event. Is raised when the node is dropped on the page from the symbol palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.GroupDropEvent">
            <summary>
             GroupDrop Routed event. Is raised when the Group is dropped on the page from the symbol palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorDropEvent">
            <summary>
             ConnectorDrop Routed event. Is raised when the Connector is dropped on the page from the symbol palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeResizedEvent">
            <summary>
             NodeResized Routed event. Is raised when the node is resized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeResizingEvent">
            <summary>
             NodeResized Routed event. Is raised when the node is being resized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeRotationChangedEvent">
            <summary>
             NodeRotationChanged Routed event. Is raised when the node is  rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeRotationChangingEvent">
            <summary>
             NodeRotationChanging Routed event. Is raised when the node is being  rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorDragStartEvent">
            <summary>
             ConnectorDragStart Routed event. Is raised when the connector drag is started.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorDragEndEvent">
            <summary>
             ConnectorDragEnd Routed event. Is raised when the connector drag is completed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.HeadNodeChangedEvent">
            <summary>
             HeadNodeChanged Routed event. Is raised when the connector's head node is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.TailNodeChangedEvent">
            <summary>
             TailNodeChanged Routed event. Is raised when the connector's tail node is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeLabelChangedEvent">
            <summary>
             NodeLabelChanged Routed event. Is raised when the node's label is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeStartLabelEditEvent">
            <summary>
             NodeStartLabelEdit Routed event. Is raised when the node's label is started to be edited.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorLabelChangedEvent">
            <summary>
             ConnectorLabelChanged Routed event. Is invoked when the connector's label is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ConnectorStartLabelEditEvent">
            <summary>
             ConnectorStartLabelEdit Routed event. Is raised when the connections's label is started to be edited.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.BeforeConnectionCreateEvent">
            <summary>
             BeforeConnectionCreate Routed event. Is raised just before the user starts to create a new connection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.AfterConnectionCreateEvent">
            <summary>
             AfterConnectionCreate Routed event. Is raised when a new connection has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.AutoScrolledEvent">
            <summary>
             AutoScrolled Routed event
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.LineRoutingEnabledProperty">
            <summary>
            Identifies the LineRoutingEnabled dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnLineRoutingEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [line routing enabled changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.EnableConnectionProperty">
            <summary>
            Identifies the EnableConnection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.IsZoomEnabledProperty">
            <summary>
            Identifies the IsZoomEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.IsPanEnabledProperty">
            <summary>
            Identifies the IsPanEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.PortVisibilityProperty">
            <summary>
            Identifies the PortVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.IsPageEditableProperty">
            <summary>
            Identifies the Selected item.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.SelectedItemProperty">
            <summary>
            Identifies the Selected item.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.PageProperty">
            <summary>
            Identifies the Page property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ShowGridProperty">
            <summary>
            Identifies the Show Grid property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.HorizontalGridLineStyleProperty">
            <summary>
            Identifies the HorizontalGridLineStyle property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.VerticalGridLineStyleProperty">
            <summary>
            Identifies the VerticalGridLineStyle property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.HorizontalRulerProperty">
            <summary>
            Identifies the HorizontalRuler property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.VerticalRulerProperty">
            <summary>
            Identifies the VerticalRuler property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ShowHorizontalGridLineProperty">
            <summary>
            Identifies the ShowHorizontalGridLine property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ShowVerticalGridLineProperty">
            <summary>
            Identifies the ShowVerticalGridLine property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ShowHorizontalRulerProperty">
            <summary>
            Identifies the ShowHorizontalRuler property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ShowVerticalRulerProperty">
            <summary>
            Identifies the ShowVerticalRuler property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ZoomFactorProperty">
            <summary>
            Identifies the ZoomFactor property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.CurrentZoomProperty">
            <summary>
            Identifies the CurrentZoom property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.ViewGridOriginProperty">
            <summary>
            Identifies the ViewGridOrigin property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.NodeContextMenuProperty">
            <summary>
            Identifies the NodeContextMenu property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.LineConnectorContextMenuProperty">
            <summary>
            Identifies the LineConnectorContextMenu property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.GetHorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the HorizontalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.GetVerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the VerticalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the HorizontalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the VerticalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.EnableDrawingToolsProperty">
            <summary>
            Enables the Drawingtool dependency property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnIsPageEditableChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [is page editable changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnShowGridChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowGridChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnGridHOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnGridHOffsetChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnGridVOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnGridVOffsetChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnHorizontalLineStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnHorizontalLineStyleChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnVerticalLineStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnVerticalLineStyleChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnShowHLineChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowHLineChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnShowVLineChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowVLineChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnShowHRulerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowHRulerChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnShowVRulerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowVRulerChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnZoomFactorChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnCurrentZoomChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCurrentZoomChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.GetRounding">
            <summary>
            Gets the rounding value for the measurement units.
            </summary>
            <returns>The rounding value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.GetDefaultPosition(System.Double)">
            <summary>
            Gets the position when the interval is default.
            </summary>
            <param name="x">The x value.</param>
            <returns>The position</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.GetPosition">
            <summary>
            Gets the position in the current unit interval.
            </summary>
            <returns>The position </returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.GetVerticalPosition">
            <summary>
            Gets the vertical ruler position
            </summary>
            <returns>The vertical ruler position</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.ConvertValue(System.Double)">
            <summary>
            Converts the value from pixels to the current measurement unit.
            </summary>
            <param name="value">The value.</param>
            <returns>The Converted value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.UpdateRuler(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Updates the rulers.
            </summary>
            <param name="view">DiagramView instance</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnViewGridOriginChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [view grid origin changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnHorizontalScrollBarVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [horizontal scroll bar visibility changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnVerticalScrollBarVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [vertical scroll bar visibility changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.ScrollToNode(Syncfusion.Windows.Diagram.Node)">
            <summary>
            Scrolls to the specified node.
            </summary>
            <param name="node">The node object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.BringIntoCenter(System.Object)">
            <summary>
            Bring the specified eleement into center or rect value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.ZoomIn(Syncfusion.Windows.Diagram.DiagramView,System.Object)">
            <summary>
            Invoked when ZoomIn Command is Executed.
            </summary>
            <param name="dview">The diagramview instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.ZoomOut(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Invoked when ZoomOut Command is Executed.
            </summary>
            <param name="dview">The diagramview instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Reset(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Invoked when Reset Command is Executed.
            </summary>
            <param name="dview">The diagramview instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked whenever a key is pressed and this control has the focus.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.MoveUp(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Invoked when MoveUp Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.ClearUndoRedoStack">
            <summary>
            Clears the undo redo stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.MoveDown(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Invoked when MoveUp Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.MoveLeft(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Invoked when MoveUp Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.MoveRight(Syncfusion.Windows.Diagram.DiagramView)">
            <summary>
            Invoked when MoveRight Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_PreviewMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Provides class handling for the PreviewMouseWheel routed event that occurs when the mouse
            wheel  is moved and the mouse pointer is over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseUp routed event that occurs when the mouse
            button  is released and the mouse pointer is over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_PreviewMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseUp routed event that occurs when the mouse
            button  is pressed and the mouse pointer is over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when
            the mouse pointer is over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the PreviewMouseMove routed event that occurs when
            the mouse pointer is over this control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged"/> event, using the specified information as part of the eventual event data.
            </summary>
            <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.CustomPathStyleProperty">
            <summary>
            Identifies the CustomPathStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.startPoint">
            <summary>
            Used to store the start point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.childcount">
            <summary>
            Used to refer to the child count value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.no">
            <summary>
            Used to refer to the children count.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.namecount">
            <summary>
            Used to refer to the name count
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnDrop(System.Windows.DragEventArgs)">
            <summary>
            Provides class handling for the OnDrop routed event that occurs when any item
            is dropped on this control..
            </summary>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.CreateSymbolPaletteItem">
            <summary>
            Create SymbolPaletteItem from the SelectionList
            </summary>
            <returns> return SymbolPaletteItem</returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.CreateSymbolPaletteItem(Syncfusion.Windows.Diagram.SymbolPaletteGroup)">
            <summary>
            Create SymbolPaletteItem from the SelectionList and it into SymbolGroup which is given in the parameter.
            </summary>
            <returns> return SymbolPaletteItem</returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.CreateSymbolPaletteItem(Syncfusion.Windows.Diagram.SymbolPaletteGroup,System.Collections.Generic.List{System.Windows.UIElement})">
            <summary>
            Create SymbolPaletteItem from the List of UIElement and add it into given Group. 
            </summary>
            <returns> return SymbolPaletteItem</returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonUp routed event that occurs when the mouse
            button is released while the mouse pointer is over this control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DiagramView_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseDown routed event that occurs when the mouse
            button is pressed while the mouse pointer is over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
            
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.sourceNode">
            <summary>
            Used to store the source node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.hitNode">
            <summary>
            Used to store the hit node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.previousHitNode">
            <summary>
            Used to store the previously hit node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.m_hitPort">
            <summary>
            Used to store the  current hit port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.previoushitport">
            <summary>
            Used to store the previously hit port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.sourceHitPort">
            <summary>
            Used to store the source port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramView.centerhit">
            <summary>
            Used to store the boolean information of center port being hit.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.HitTesting(System.Windows.Point)">
            <summary>
            Identifies the hit object.
            </summary>
            <param name="hitPoint">The point to be tested.</param>
            <returns>True if hit object is Node ,false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when the mouse
            pointer  is over this control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.DropLine(Syncfusion.Windows.Diagram.ConnectorType,System.Windows.Point,Syncfusion.Windows.Diagram.DiagramControl)">
            <summary>
            Drops the line.
            </summary>
            <param name="connectortype">The connector type.</param>
            <param name="position">The position.</param>
            <param name="diagctrl">The diagram control object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.OnPrintExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when [print execute].
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Print">
            <summary>
            Displays the PrintDialog.
            </summary>
            <returns>True, if it is shown, false otherwise.</returns>
            <example>
            C#:
            <code language="C#">
            diagramView.Print();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Print(Syncfusion.Windows.Diagram.PrintParameters)">
            <summary>
            Print based on PrintParameter
            </summary>
            <param name="printParam"></param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.IO.Stream,System.Windows.Rect)">
            <summary>
            Saves Diagram to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="saveArea">The area rect.</param>
            <example>
            C#:
            <code language="C#">
             System.IO.MemoryStream stream = new System.IO.MemoryStream();
             Rect rect = new Rect(new Point(100, 100), new Point(500, 500));
             diagramView.Save(stream, rect);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.String,System.Windows.Rect)">
            <summary>
            Saves Diagram to Diagram to specified file.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="saveArea">The save area.</param>
            <example>
            C#:
            <code language="C#">
             sting filename = "NewFile";
             Rect rect = new Rect(new Point(100, 100), new Point(500, 500));
             diagramView.Save(filename, rect);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.CreateByExtension(System.String)">
            <summary>
            Saves the diagram into specified extensions.
            </summary>
            <param name="extension">The format into which to save.</param>
            <returns>The encoder.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.String,System.Windows.Rect,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves Diagram to specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="saveArea">The save area.</param>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.IO.Stream,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves Diagram to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoder">The encoder.</param>
            <exception cref="T:System.ArgumentNullException">Internal border of Diagram control cannot be retrieved.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.IO.Stream)">
            <summary>
            Saves Diagram to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.String)">
            <summary>
            Saves Diagram to the file with specified filename.
            </summary>
            <param name="fileName">The filename.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.String,System.Boolean)">
            <summary>
            Saves Diagram to the file with specified filename.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="useVisualBrush"><para>Specify to export the diagram using visualbrush. </para> 
            <para>true:  Negative and positive side elements can be export </para>
            <para>false: Positive side elements only can export </para>
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.String,System.Windows.Size,Syncfusion.Windows.Diagram.ImageStretch)">
            <summary>
            Exports diagram as an image file.
            </summary>
            <param name="fileName">Name of the image file.</param>
            <param name="imageSize">Size of the image file</param>
            <param name="imageStretch"><para>Specify how to stretch the image. </para>
            <para>Expand: Image can expand but not shrink to fit the desired Size (image size) </para>
            <para>Shrink: Image can shrink but not expand to fit the desired Size (image size) </para>
            <para>Best Fit : Image will expand or shrink to fit the desired Size (image size) </para>
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.Save(System.String,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves Diagram to the file with specified filename using encoder.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.SaveToXps(System.IO.Stream)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.SaveToXps(System.String)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.SaveToXps(System.IO.Stream,System.Windows.Rect)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="saveArea">The save area.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.SaveToXps(System.String,System.Windows.Rect)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="filename">The filename.</param>
            <param name="saveArea">The save area.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramView.CopyToClipboard">
            <summary>
            Copies Diagram to clipboard.
            </summary>
            <exception cref="T:System.ArgumentNullException">Internal border of Diagram control cannot be retrieved.</exception>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsPageSaved">
            <summary>
             Gets or sets a value indicating whether [Is Page Saved].
            </summary>
            <value>
            	<c>true</c> if [Is Page Saved]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorCanRemoveSegments">
            <summary>
            Occurs when [Connector wants to remove existing Intermediate points]. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.LineMoved">
            <summary>
            Occurs when [line moved].
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeMoved">
            <summary>
            Occurs when [node moved].
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ObjectDrawn">
            <summary>
            NodeSelected Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeSelected">
            <summary>
            NodeSelected Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeUnSelected">
            <summary>
            NodeUnSelected Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.FitToPageExecuting">
            <summary>
            BringToView Event Handler
            </summary>
            Type: <see cref="!:InvokeBringIntoViewEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeDeleted">
            <summary>
            NodeDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeDeleting">
            <summary>
            NodeDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorDeleted">
            <summary>
            ConnectorDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.ConnectionDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorDeleting">
            <summary>
            ConnectorDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.ConnectionDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.PreviewNodeDrop">
            <summary>
            PreviewNodeDrop Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.PreviewNodeDropEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.PreviewConnectorDrop">
            <summary>
            PreviewConnectorDrop Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.PreviewConnectorDropEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeDragStart">
            <summary>
             NodeDragStart Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeDragEnd">
            <summary>
             NodeDragStart Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeClick">
            <summary>
             NodeClick Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeDoubleClick">
            <summary>
             NodeDoubleClick Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorDoubleClick">
            <summary>
             ConnectorDoubleClick Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.ConnChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeDrop">
            <summary>
             NodeDropped Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeDroppedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.GroupDrop">
            <summary>
             GroupDropped Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeDroppedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorDrop">
            <summary>
             ConnectorDropped Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.ConnectorDroppedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeResized">
            <summary>
             NodeResized Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeResizing">
            <summary>
             NodeResizing Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeRotationChanged">
            <summary>
             NodeRotationChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeRotationChanging">
            <summary>
             NodeRotationChanging Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorDragStart">
            <summary>
             ConnectorDragStart Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.ConnDragChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorDragEnd">
            <summary>
             ConnectorDragEnd Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.ConnDragEndChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.HeadNodeChanged">
            <summary>
             HeadNodeChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.TailNodeChanged">
            <summary>
             TailNodeChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeLabelChanged">
            <summary>
             NodeLabelChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.LabelChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.NodeStartLabelEdit">
            <summary>
             LabelChangedEventHandler Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.LabelChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorLabelChanged">
            <summary>
             LabelChangedEventHandler Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.LabelConnChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.ConnectorStartLabelEdit">
            <summary>
             ConnectorStartLabelEdit Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.LabelEditConnChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.BeforeConnectionCreate">
            <summary>
             BeforeConnectionCreate Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.BeforeCreateConnectionEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.AfterConnectionCreate">
            <summary>
             AfterConnectionCreate Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.BeforeCreateConnectionEventHandler"/>
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.AutoScrolled">
            <summary>
            AutoScrolled Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.Windows.Diagram.AutoScrolledEventHandler"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.LineRoutingEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is line routing enabled.
            Default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.LineRouter">
            <summary>
            Gets or sets the LineRouter value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.BisectConnectorOnDrop">
            <summary>
            Gets or sets a value indicating whether connection has to be created on Node drop or not.
            Default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.PortVisibility">
            <summary>
            Gets or sets the port visibility.
            </summary>
            <value>The port visibility.</value>
            <remarks>
            Setting PortVisibility from DiagramView applies to all the nodes in the page. However if any node has specifically set PortVisibility, then the node's PortVisibility property will be taken into account only for that node. So even if DiagramView's PortVisibility is set to false, if Node's <see cref="T:Syncfusion.Windows.Diagram.Node.PortVisibility"/> is set to true then the ports will be displayed for that node.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12" 
                                                   PortVisibility="False"
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.PortVisibility=false;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.EnableConnection">
            <summary>
            Gets or sets a value indicating whether [enable connection].
            </summary>
            <value><c>true</c> if [enable connection]; otherwise, <c>false</c>.</value>
            <remarks>
            This property is generally placed in the click event handler for setting the <see cref="T:Syncfusion.Windows.Diagram.LineConnector.ConnectorType"/>.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView EnableConnection="True"
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.EnableConnection=true;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.DrawingTool">
            <summary>
            Gets or sets the type of shape to be used.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.DrawingTools"/>
            Enum specifying the type of the Shape to be used.
            </value>
            <example>
            <para/>This example shows how to set DrawingTools in C#.
            <code language="C#">
            diagramView.DrawingTool = DrawingTools.Ellipse;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ViewGridOrigin">
            <summary>DrawingToolsProperty
            Gets or sets the page's position (0,0) with respect to the View.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.CurrentZoom">
            <summary>
            Gets or sets the current zoom.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ZoomFactor">
            <summary>
            Gets or sets the ZoomFactor .
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Zoom Factor in pixels.
            </value>
            <remarks>
            Default value is 0.2d .
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView ZoomFactor="1"
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in C#.
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ZoomFactor=1;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is zoom enabled.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if zooming is enabled, false otherwise.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  IsZoomEnabled="True" 
                                                   Background="LightGray"  
                                                   Bounds="0,0,12,12" 
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsZoomEnabled=true;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsPageEditable">
            <summary>
            Gets or sets a value indicating whether this instance is page editable.
            </summary>
            <value>
            <c>true</c> if this instance is page editable; otherwise, <c>false</c>.
            </value>
            <summary>
            Gets or sets a value indicating whether [enable connection].
            </summary>
            <value><c>true</c> if [enable connection]; otherwise, <c>false</c>.</value>
            <remarks>
            This property is generally placed in the click event handler for setting the <see cref="T:Syncfusion.Windows.Diagram.LineConnector.ConnectorType"/>.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView IsPageEditable="True"
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsPanEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is pan enabled.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if panning is enabled, false otherwise.
            </value>
            <summary>
            Gets or sets a value indicating whether [enable connection].
            </summary>
            <value><c>true</c> if [enable connection]; otherwise, <c>false</c>.</value>
            <remarks>
            This property is generally placed in the click event handler for setting the <see cref="T:Syncfusion.Windows.Diagram.LineConnector.ConnectorType"/>.
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.Windows.Diagram.DiagramView"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView IsPanEnabled="False"
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPanEnabled=false;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.SelectedItem">
            <summary>
            Gets the currently selected item. .
            </summary>
            <value>
            Type: <see cref="T:System.Object"/>
            Selected item.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Controls.Panel"/>
            Panel instance.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalGridLineStyle">
            <summary>
            Gets or sets the horizontal grid line style.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Pen"/>
            Line Style.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.VerticalGridLineStyle">
            <summary>
            Gets or sets the vertical grid line style.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Media.Pen"/>
            Line Style.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ShowHorizontalGridLine">
            <summary>
            Gets or sets a value indicating whether [show horizontal grid line].
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is to be displayed, false otherwise.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  ShowHorizontalGridLine="False" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowHorizontalGridLine=false;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ShowVerticalGridLine">
            <summary>
            Gets or sets a value indicating whether [show vertical grid line].
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is to be displayed, false otherwise.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  ShowVerticalGridLine="False" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowVerticalGridLine=false;
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ShowHorizontalRulers">
            <summary>
            Gets or sets a value indicating whether [show horizontal rulers].
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is to be displayed, false otherwise.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  ShowHorizontalRulers="False" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowHorizontalRulers=false;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalRuler"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ShowVerticalRulers">
            <summary>
            Gets or sets a value indicating whether [show vertical rulers].
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is to be displayed, false otherwise.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  ShowVerticalRulers="False" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                      &lt;syncfusion:DiagramView.VerticalRuler&gt;
                          &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowVerticalRulers=false;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramView.VerticalRuler"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalRuler">
            <summary>
            Gets or sets the horizontal ruler.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalRuler"/>
            HorizontalRuler instance.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  ShowHorizontalRulers="False" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowHorizontalRulers=false;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalRuler"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.VerticalRuler">
            <summary>
            Gets or sets the vertical ruler.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.DiagramView.VerticalRuler"/>
            VerticalRuler instance.
            </value>
            <example>
            <code language="XAML">
            &lt;Window x:Class="RulersAndUnits.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView  ShowHorizontalRulers="False" 
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                        &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                     &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                  &lt;/syncfusion:DiagramView&gt;
               &lt;/syncfusion:DiagramControl.View&gt;
            &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowVerticalRulers=false;
               }
               }
               }
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalRuler"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.SelectionList">
            <summary>
            Gets the selection list.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.NodeCollection"/>
            NodeCollection items.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowVerticalRulers=false;
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   View.SelectionList.Add(n);
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Diagram.NodeCollection"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.NodeContextMenu">
            <summary>
            Gets or sets the node context menu.
            </summary>
            <value>The node context menu.
            Type: <see cref="T:System.Windows.Controls.ContextMenu"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowVerticalRulers=false;
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.IsLabelEditable = true;
                   n.Label = "Start";
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   n.ToolTip="Start Node";
                   Model.Nodes.Add(n);
                   ContextMenu menu = new ContextMenu();
                   MenuItem m1 = new MenuItem();
                   m1.Header = "item1";
                   MenuItem m2 = new MenuItem();
                   m2.Header = "item2";
                   menu.Items.Add(m1);
                   menu.Items.Add(m2);
                   View.NodeContextMenu=menu;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ContextMenu"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.Node"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.LineConnectorContextMenu">
            <summary>
            Gets or sets the LineConnector context menu.
            </summary>
            <value>The lineConnector context menu.
            Type: <see cref="T:System.Windows.Controls.ContextMenu"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  View = new DiagramView ();
                  Control.View = View;
                  HorizontalRuler hruler = new HorizontalRuler();
                  View.HorizontalRuler = hruler;
                  View.ShowHorizontalGridLine = false;
                  View.ShowVerticalGridLine = false;
                  VerticalRuler vruler = new VerticalRuler();
                  View.VerticalRuler = vruler;
                  View.Bounds = new Thickness (0, 0, 1000, 1000);
                  View.IsPageEditable = true;
                  View.ShowVerticalRulers=false;
                   ContextMenu menu = new ContextMenu();
                   MenuItem m1 = new MenuItem();
                   m1.Header = "item1";
                   MenuItem m2 = new MenuItem();
                   m2.Header = "item2";
                   menu.Items.Add(m1);
                   menu.Items.Add(m2);
                   View.LineConnectorContextMenu=menu;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ContextMenu"/>
            <seealso cref="T:Syncfusion.Windows.Diagram.LineConnector"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.GetVerticalScrollBarVisibility">
            <summary>
            Gets the vertical scroll bar visibility.
            </summary>
            <value>
            The  vertical scroll bar visibility. Default value is Auto.
            Type: <see cref="T:System.Windows.Controls.ScrollBarVisibility"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            View = new DiagramView ();
            Control.View = View;
            HorizontalRuler hruler = new HorizontalRuler();
            View.HorizontalRuler = hruler;
            View.ShowHorizontalGridLine = false;
            View.ShowVerticalGridLine = false;
            VerticalRuler vruler = new VerticalRuler();
            View.VerticalRuler = vruler;
            View.Bounds = new Thickness (0, 0, 1000, 1000);
            View.IsPageEditable = true;
            View.ShowVerticalRulers=false;
            ScrollBarVisibility Vvisible=View.GetVerticalScrollBarVisibility;
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.GetHorizontalScrollBarVisibility">
            <summary>
            Gets the horizontal scroll bar visibility.
            </summary>
            <value>
            The  horizontal scroll bar visibility. Default value is Auto.
            Type: <see cref="T:System.Windows.Controls.ScrollBarVisibility"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            View = new DiagramView ();
            Control.View = View;
            HorizontalRuler hruler = new HorizontalRuler();
            View.HorizontalRuler = hruler;
            View.ShowHorizontalGridLine = false;
            View.ShowVerticalGridLine = false;
            VerticalRuler vruler = new VerticalRuler();
            View.VerticalRuler = vruler;
            View.Bounds = new Thickness (0, 0, 1000, 1000);
            View.IsPageEditable = true;
            View.ShowVerticalRulers=false;
            ScrollBarVisibility hvisible=View.GetHorizontalScrollBarVisibility;
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scroll bar visibility.
            </summary>
            <value>
            The  horizontal scroll bar visibility. Default value is Auto.
            Type: <see cref="T:System.Windows.Controls.ScrollBarVisibility"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            View = new DiagramView ();
            Control.View = View;
            HorizontalRuler hruler = new HorizontalRuler();
            View.HorizontalRuler = hruler;
            View.ShowHorizontalGridLine = false;
            View.ShowVerticalGridLine = false;
            VerticalRuler vruler = new VerticalRuler();
            View.VerticalRuler = vruler;
            View.Bounds = new Thickness (0, 0, 1000, 1000);
            View.IsPageEditable = true;
            View.ShowVerticalRulers=false;
            ScrollBarVisibility hvisible=View.HorizontalScrollBarVisibility;
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scroll bar visibility.
            </summary>
            <value>
            The  vertical scroll bar visibility. Default value is Auto.
            Type: <see cref="T:System.Windows.Controls.ScrollBarVisibility"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            View = new DiagramView ();
            Control.View = View;
            HorizontalRuler hruler = new HorizontalRuler();
            View.HorizontalRuler = hruler;
            View.ShowHorizontalGridLine = false;
            View.ShowVerticalGridLine = false;
            VerticalRuler vruler = new VerticalRuler();
            View.VerticalRuler = vruler;
            View.Bounds = new Thickness (0, 0, 1000, 1000);
            View.IsPageEditable = true;
            View.ShowVerticalRulers=false;
            ScrollBarVisibility Vvisible=View.VerticalScrollBarVisibility;
            }
            }
            }
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility"/>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.NodeResizedCount">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Diagram.Node"/> resized count.
            </summary>
            <value>The node resized count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.NodeRotateCount">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Diagram.Node"/> rotate count.
            </summary>
            <value>The node rotate count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.UndoStack">
            <summary>
            Gets or sets the undo stack.
            </summary>
            <value>The undo stack.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.RedoStack">
            <summary>
            Gets or sets the redo stack.
            </summary>
            <value>The redo stack.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ViewGrid">
            <summary>
            Gets or sets the view grid which contains the page.
            </summary>
            <value>The view grid.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.InternalGroups">
            <summary>
            Gets the internal groups collection.
            </summary>
            <value>The internal groups collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Isnodedeleted">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Syncfusion.Windows.Diagram.Node"/> is deleted.
            </summary>
            <value><c>true</c> if node is deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Islinedeleted">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.LineConnector"/> is deleted.
            </summary>
            <value><c>true</c> if is line deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.InternalEdges">
            <summary>
            Gets the internal edges.
            </summary>
            <value>The internal edges.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Ispositionchanged">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Windows.Diagram.Node"/> position is changed.
            </summary>
            <value><c>true</c> if position is changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ViewGridOriginChanged">
            <summary>
            Gets or sets a value indicating whether this instance is zoom changed.
            </summary>
            <value>
            <c>true</c> if this instance is zoom changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsOtherEvent">
            <summary>
            Gets or sets a value indicating whether this instance is other event.
            </summary>
            <value>
            <c>true</c> if this instance is other event; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.PageEdit">
            <summary>
            Gets or sets a value indicating whether [page edit].
            </summary>
            <value><c>true</c> if [page edit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Scrollviewer">
            <summary>
            Gets or sets the scrollviewer.
            </summary>
            <value>The scrollviewer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsLayout">
            <summary>
            Gets or sets a value indicating whether automatic layout is used.
            </summary>
            <value><c>true</c> if automatic layout is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Isdragdelta">
            <summary>
            Gets or sets a value indicating whether node is dragged.
            </summary>
            <value><c>true</c> if is dragged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.DupDeleted">
            <summary>
            Gets or sets a value indicating whether delete is done.
            </summary>
            <value><c>true</c> if [deleted]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.UndoRedoEnabled">
            <summary>
            Gets or sets a value indicating whether [undo redo  is enabled].
            </summary>
            <value><c>true</c> if [undo redo is enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Undone">
            <summary>
            Gets or sets a value indicating whether the Undo command is executed.
            </summary>
            <value><c>true</c> if undone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Redone">
            <summary>
            Gets or sets a value indicating whether the Redo command is executed.
            </summary>
            <value><c>true</c> if redone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsDragged">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> is dragged.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Syncfusion.Windows.Diagram.Node"/>  is dragged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsResized">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> is resized.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Syncfusion.Windows.Diagram.Node"/> is resized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsResizedUndone">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> is resized as a result of undo operation.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Syncfusion.Windows.Diagram.Node"/> is resized undone; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsResizedRedone">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Diagram.Node"/> is resized as a result of redo operation.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Syncfusion.Windows.Diagram.Node"/> is resized redone; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsDeleteCommandExecuted">
            <summary>
            Gets or sets a value indicating whether the delete command is executed.
            </summary>
            <value>
            <c>true</c> if delete command is executed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.DeleteCount">
            <summary>
            Gets or sets the delete count.
            </summary>
            <value>The delete count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.NodeDragCount">
            <summary>
            Gets or sets the node drag count.
            </summary>
            <value>The node drag count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.IsMeasureCalled">
            <summary>
            Gets or sets a value indicating whether the MeasureOverride of <see cref="T:Syncfusion.Windows.Diagram.DiagramPage"/> is called.
            </summary>
            <value>
            <c>true</c> if this instance is measure called; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.DrawingMode">
            <summary>
            Identifies the DrawingMode dependency property.
            </summary>
            
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ClearSelectionOnRightClick">
            <summary>
            Identifies the ClearSelectionOnRightClick dependency property.
            </summary>
            
        </member>
        <member name="E:Syncfusion.Windows.Diagram.DiagramView.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.IModel"/>
            IModel instance.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <value>
            Type: <see cref="T:System.Drawing.Point"/>
            The pan.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            Type: <see cref="T:System.Drawing.Rectangle"/>
            Bounds value.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.LayoutBounds">
            <summary>
            Gets or sets the LayoutBounds.
            </summary>
            <value>
            Type: <see cref="T:System.Windows.Rect"/>
            LayoutBounds value.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ShowRulers">
            <summary>
            Gets or sets a value indicating whether [show rulers].
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is to displayed, false otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.ShowPage">
            <summary>
            Gets or sets a value indicating whether [show page].
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            True, if it is to displayed, false otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.HitPort">
            <summary>
            Gets or sets the hit port.
            </summary>
            <value>The hit port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.HitNode">
            <summary>
            Gets or sets the node which is currently selected through HitTesting.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.Windows.Diagram.Node"/>
            The Node which was hit.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.PortMode">
            <summary>
            Identifies the PortMode dependency property.
            </summary>
            
        </member>
        <member name="P:Syncfusion.Windows.Diagram.DiagramView.NodeMode">
            <summary>
            Identifies the NodeMode dependency property.
            </summary>
            
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IDiagramCommandParameter">
            <summary>
            Represents common property for Commands.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.SnapLinePenProperty">
            <summary>
            Gets or sets the DrawingLinePen property.
            <value>
            Type: <see cref="T:System.Windows.Media.Pen"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.SnapAdjustmentDistanceProperty">
            <summary>
            Gets or sets the SnapAdjustmentDistance property.
            <value>
            Type: <see cref="T:System.Double"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.SnapPortProperty">
            <summary>
            Gets or sets the SnapPort property.
            <value>
            Type: <see cref="P:Syncfusion.Windows.Diagram.SnapSettings.SnapPort"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.EnableSnapNodeProperty">
            <summary>
            Gets or sets the EnableSnapNode property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.EnableSnapPortProperty">
            <summary>
            Gets or sets the EnableSnapNode property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.CenterYProperty">
            <summary>
            Gets or sets the CenterY property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.CenterXProperty">
            <summary>
            Gets or sets the CenterX property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.RightProperty">
            <summary>
            Gets or sets the Right property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.BottomProperty">
            <summary>
            Gets or sets the Bottom property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.LeftProperty">
            <summary>
            Gets or sets the EnableVerticalDrawingLine property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SnapSettings.TopProperty">
            <summary>
            Gets or sets the Top property.
            <value>
            Type: <see cref="T:System.Boolean"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SnapAdorner">
            <summary>
             MyAdorner class 
            </summary>
            
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ZoomCommands">
            <summary>
            Represents zoom commands.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ZoomCommands.zincommand">
            <summary>
            Zoom in command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ZoomCommands.zoutcommand">
            <summary>
            Zoom out command
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ZoomCommands.resetcommand">
            <summary>
            Reset command
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ZoomCommands.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Diagram.ZoomCommands"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ZoomCommands.CanExecuteZoomingCommands(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Specifies when the ZoomCommands are to be executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ZoomCommands.OnZoomInCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the ZoomIn Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ZoomCommands.OnZoomOutCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the ZoomIn Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.ZoomCommands.OnResetCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invoked when the Reset Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ZoomCommands.ZoomIn">
            <summary>
            Gets the ZoomIn RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
             ZoomCommands.ZoomIn.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ZoomCommands.ZoomOut">
            <summary>
            Gets the ZoomOut RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
             ZoomCommands.ZoomOut.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Diagram.ZoomCommands.Reset">
            <summary>
            Gets the Reset RoutedUICommand.
            </summary>
            Type:<see cref="T:System.Windows.Input.RoutedUICommand"/>
            <example>
            C#:
            <code language="C#">
             ZoomCommands.Reset.Execute(diagramView.Page, diagramView);
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DiagramPrintDialog">
            <summary>
            Interaction logic for DiagramPrintDialog.xaml
            </summary>
            <exclude/>
            <summary>
            DiagramPrintDialog
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPrintDialog.m_elementToPrint">
            <summary>
            Used to store the element to be printed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DiagramPrintDialog.m_nativePrintDialog">
            <summary>
            Represents Print dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Diagram.DiagramPrintDialog"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.ShowPrintDialog(System.Windows.FrameworkElement)">
            <summary>
            Shows the print dialog.
            </summary>
            <param name="element">The element to be printed.</param>
            <returns>The boolean value indicating the Dialog box is shown or not.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.ShowPrintDialog(System.Windows.FrameworkElement,System.Windows.Rect)">
            <summary>
            Shows the print dialog.
            </summary>
            <param name="element">The element to be printed.</param>
            <param name="printArea">The print area.</param>
            <returns> /// <returns>The boolean value indicating the Dialog box is shown or not.</returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.Print(System.Windows.FrameworkElement,System.Windows.Media.Stretch)">
            <summary>
            Prints the Diagram Page Directly.
            </summary>
            <param name="element">The element to be printed.</param>
            <param name="stretch">The s is a Stretch options.</param>        
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.StartPrint">
            <summary>
            Starts the print.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.OnPrintClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [print click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.OnCancelClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [cancel click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.OnColorClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [color click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.OnBlackAndWhiteClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [black and white click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.OnAdvancedClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [advanced click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.GetPrintSize(System.Windows.Media.Stretch,System.Windows.Size,System.Windows.Size)">
            <summary>
            Gets the size by specified stretch.
            </summary>
            <param name="stretch">The stretch.</param>
            <param name="viewport">The viewport.</param>
            <param name="original">The original.</param>
            <returns>The size to be printed.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.PrintStrech_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Calls SelectionChanged Event 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.SetViewport(System.Windows.Media.VisualBrush,System.Windows.Size)">
            <summary>
            Sets the viewport.
            </summary>
            <param name="brush">The brush.</param>
            <param name="size">The size of the viewport.</param>
        </member>
        <member name="M:Syncfusion.Windows.Diagram.DiagramPrintDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectionMode">
            <summary>
            Specifies the Mode for Connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionMode.Connect">
            <summary>
            Connect
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectionMode.Move">
            <summary>
            Move
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DecoratorShape">
            <summary>
            Specifies the decorator shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorShape.None">
            <summary>
            None shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorShape.Arrow">
            <summary>
            Arrow shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorShape.Diamond">
            <summary>
            Diamond shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorShape.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DecoratorShape.Custom">
            <summary>
            Custom Shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ImageStretch.None">
            <summary>
            Image is not stretched. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ImageStretch.Expand">
            <summary>
            Image can be expanded by scaling. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ImageStretch.Shrink">
            <summary>
            Image can be shrunk by scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ImageStretch.BestFit">
            <summary>
            Image can be shrunk / expanded by scaling.   
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LayoutHorizontalAlignment">
            <summary>
            Specifies the LayoutHorizontalAlignment Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutHorizontalAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutHorizontalAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutHorizontalAlignment.Center">
            <summary>
             Center
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LayoutVerticalAlignment">
            <summary>
            Specifies the LayoutVerticalAlignment Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutVerticalAlignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutVerticalAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutVerticalAlignment.Center">
            <summary>
             Center
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelOrientation.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelOrientation.Horizontal">
            <summary>
            Horizonatl Orientation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LabelOrientation.Vertical">
            <summary>
            Vertical Orientation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PortShapes">
            <summary>
            Specifies the Port shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortShapes.None">
            <summary>
            None shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortShapes.Arrow">
            <summary>
            Arrow shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortShapes.Diamond">
            <summary>
            Diamond shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortShapes.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortShapes.Custom">
            <summary>
            Custom Shape
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.LayoutType">
            <summary>
            Specifies the layout types.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutType.None">
            <summary>
            None type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutType.DirectedTreeLayout">
            <summary>
            Directed tree layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutType.HierarchicalTreeLayout">
            <summary>
            Hierarchical tree layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutType.TableLayout">
            <summary>
            Table layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutType.RadialTreeLayout">
            <summary>
            Radial tree layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LayoutType.BowtieLayout">
            <summary>
            Bowtie Layout
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.TreeOrientation">
            <summary>
            Specifies the tree orientation .
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TreeOrientation.LeftRight">
            <summary>
            Left to right
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TreeOrientation.RightLeft">
            <summary>
            Right to left
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TreeOrientation.TopBottom">
            <summary>
            Top to Bottom
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.TreeOrientation.BottomTop">
            <summary>
            Bottom to top
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ExpandMode">
            <summary>
            Specifies the Expand Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ExpandMode.Horizontal">
            <summary>
            Horizontal expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ExpandMode.Vertical">
            <summary>
            Vertical expansion.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Shapes">
            <summary>
            Specifies the shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Rectangle">
            <summary>
            Rectangle shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Star">
            <summary>
            Star shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Hexagon">
            <summary>
            Hexagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Octagon">
            <summary>
            Octagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Pentagon">
            <summary>
            Pentagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Heptagon">
            <summary>
            Heptagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Triangle">
            <summary>
            Triangle shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Ellipse">
            <summary>
            Ellipse shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Plus">
            <summary>
            Plus shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.RoundedRectangle">
            <summary>
            Rounded Rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.RoundedSquare">
            <summary>
            Rounded Square
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.RightTriangle">
            <summary>
            Right Triangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.ThreeDBox">
            <summary>
            ThreeDBox shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Process">
            <summary>
            FlowChart Process shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Start">
            <summary>
            FlowChart Start shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Decision">
            <summary>
            FlowChart Decision shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Predefined">
            <summary>
            FlowChart_Predefined shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_StoredData">
            <summary>
            FlowChart_StoredData shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Document">
            <summary>
            FlowChart_Document shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Data">
            <summary>
            FlowChart_Data shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_InternalStorage">
            <summary>
            FlowChart_InternalStorage shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_PaperTape">
            <summary>
            FlowChart_PaperTape shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_SequentialData">
            <summary>
            FlowChart_SequentialData shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_DirectData">
            <summary>
            FlowChart_DirectData shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_ManualInput">
            <summary>
            FlowChart_ManualInput shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Card">
            <summary>
            FlowChart_Card shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Delay">
            <summary>
            FlowChart_Delay shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Terminator">
            <summary>
            FlowChart_Terminator shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Display">
            <summary>
            FlowChart_Display shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_LoopLimit">
            <summary>
            FlowChart_LoopLimit shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Preparation">
            <summary>
            FlowChart_Preparation shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_ManualOperation">
            <summary>
            FlowChart_ManualOperation shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_OffPageReference">
            <summary>
            FlowChart_OffPageReference shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.FlowChart_Star">
            <summary>
            FlowChart_Star shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.Default">
            <summary>
            Default shape
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Shapes.CustomPath">
            <summary>
            CustomPath shape
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.MeasureUnits">
            <summary>
            Specifies the units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Pixel">
            <summary>
            Pixel unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Point">
            <summary>
            Points unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Document">
            <summary>
            Document unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Display">
            <summary>
            Display unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.SixteenthInch">
            ENGLISH
            <summary>
            Sixteenth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.EighthInch">
            <summary>
            Eighth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.QuarterInch">
            <summary>
            Quarter Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.HalfInch">
            <summary>
            Half Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Inch">
            <summary>
            Inches unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Foot">
            <summary>
            Feet measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Yard">
            <summary>
            Yards measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Mile">
            <summary>
            Miles measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Millimeter">
            METRIC
            <summary>
            Millimeters unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Centimeter">
            <summary>
            Centimeters unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Meter">
            <summary>
            Meters measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.MeasureUnits.Kilometer">
            <summary>
            Kilometers measurement unit
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ConnectorType">
            <summary>
            Specifies the connector types.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorType.Orthogonal">
            <summary>
            Orthogonal line
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorType.Bezier">
            <summary>
            Bezier line
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorType.Straight">
            <summary>
            Straight line
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ConnectorType.Arc">
            <summary>
            Arc line
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.IntersectionMode">
            <summary>
            Specifies the intersection mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.IntersectionMode.OnContent">
            <summary>
            Connects to the content.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.IntersectionMode.OnBorder">
            <summary>
            Connects to outer boudaries
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.Themes">
            <summary>
            Specifies Theme styles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.Default">
            <summary>
            Default Theme
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.Custom">
            <summary>
            Custom Theme
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.OutLineBlack">
            <summary>
            OutLine Themes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.FillBlack">
            <summary>
            Fill Themes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.OutLineFillBlack">
            <summary>
            OutLine Fill Themes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.SubtleEffectBlack">
            <summary>
            SubtleEffect Themes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.Themes.ModerateEffectBlack">
            <summary>
            ModerateEffect Themes
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SelectionFilter">
            <summary>
            Specifies Command's Parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SelectionFilter.None">
            <summary>
            Both Nodes and Line Connectors
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SelectionFilter.FilterLines">
            <summary>
            Only Nodes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SelectionFilter.FilterNodes">
            <summary>
            Only Line Connectors
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ItemSelectionMode">
            <summary>
            Specifies Selection Option for Node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ItemSelectionMode.Single">
            <summary>
            Only one Item selected
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ItemSelectionMode.Multiple">
            <summary>
            Many Items selected
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ZOrderModes">
            <summary>
            Specifies the Ordering Mode for DiagramControl Items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieSubTreePlacement.Left">
            <summary>
            Left
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.BowtieSubTreePlacement.Right">
            <summary>
            Right
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CustomLabelPositions.Auto">
            <summary>
            Default position
            </summary>        
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CustomLabelPositions.Custom">
            <summary>
            Customized Position
            </summary>        
        </member>
        <member name="F:Syncfusion.Windows.Diagram.CustomLabelPositions.Drag">
            <summary>
            Dragging Position
            </summary>        
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineUnit.AbsoluteFraction">
            <summary>
            Absolute values in fraction
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineUnit.RelativeFraction">
            <summary>
            Relative value in fraction
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineUnit.AbsoluteValue">
            <summary>
            Absolute value in pixel
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.LineUnit.RelativeValue">
            <summary>
            Relative value in pixel
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.SegmentOrientation">
            <summary>
            Specifies the Orientation of the FirstSegment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SegmentOrientation.Auto">
            <summary>
            Default Value
            </summary>     
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SegmentOrientation.Horizontal">
            <summary>
            First Segment Horizontal to HeadNode
            </summary>     
        </member>
        <member name="F:Syncfusion.Windows.Diagram.SegmentOrientation.Vertical">
            <summary>
            First Segment Vertical to HeadNode
            </summary>   
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DateTimeFormatSetting">
            <summary>
            Customize the DateTime format string for the Rulers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DateTimeFormatSetting.Auto">
            <summary>
            DateTime format sting will be update automatically based on DateTimeSettings
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DateTimeFormatSetting.Custom">
            <summary>
            Allows user to specify a custom format string for DateTime.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.PortVisibility">
            <summary>
            Options for port Visibility
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortVisibility.AlwaysVisible">
            <summary>
            Port will be visible always
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortVisibility.AlwaysHidden">
            <summary>
            Port will not be visible
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.PortVisibility.MouseOverNode">
            <summary>
            Visible when mouse is over the Node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DrawingMode">
            <summary>
            Options for Drawing
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DrawingMode.Default">
            <summary>
            Port will be visible always
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DrawingMode.Continous">
            <summary>
            Port will not be visible
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.DeletingMode">
            <summary>
            Options for Node Deleting
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DeletingMode.DeleteDependentEdges">
            <summary>
            Node and its children are all will be deleted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.DeletingMode.None">
            <summary>
            Delete Node only
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Diagram.ItemGenerateMode">
            <summary>
            Options for Node Deleting
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ItemGenerateMode.ItemsSource">
            <summary>
            Node and its children are all will be deleted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Diagram.ItemGenerateMode.Manual">
            <summary>
            Delete Node only
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
