<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfAccordion.WPF</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Windows.Controls.Layout.AccordionAction">
            <summary>
            Determines the action the AccordionItem will perform.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionAction.None">
            <summary>
            No action will be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionAction.Collapse">
            <summary>
            A collapse will be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionAction.Expand">
            <summary>
            An expand will be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionAction.Resize">
            <summary>
            A resize will be performed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.AccordionButton">
            <summary>
            Represents the header for an accordion item.
            </summary>
            <remarks>By creating a seperate control, there is more flexibility in 
            the templating possibilities.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.AccordionButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Controls.Layout.AccordionButton"/> 
            class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.AccordionButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs when the focus is obtained
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.AccordionButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs when the focus is lost
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.AccordionButton.UpdateVisualState(System.Boolean)">
            <summary>
            Updates the state of the visual.
            </summary>
            <param name="useTransitions">If set to <c>true</c> use transitions.</param>
            <remarks>The header will follow the parent accordionitem states.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.AccordionButton.ParentAccordionItem">
            <summary>
            Gets or sets a reference to the parent AccordionItem 
            of an AccordionButton.
            </summary>
            <value>The parent accordion item.</value>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.AccordionButton.AccentBrush">
            <summary>
            Gets or sets the accent brush
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.AccordionSelectionMode">
            <summary>
            Defines the minimum and maximum number of selected items allowed in an Accordion control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionSelectionMode.One">
            <summary>
            Exactly one item must be selected in the Accordion.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionSelectionMode.OneOrMore">
            <summary>
            At least one item must be selected in the Accordion. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionSelectionMode.ZeroOrOne">
            <summary>
            No more than one item can be selected in the accordion.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.AccordionSelectionMode.ZeroOrMore">
            <summary>
            Any number of  items can be selected in the Accordion. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.ExpandableContentControl">
            <summary>
            Represents a control with a single piece of content that expands or 
            collapses in a sliding motion to a specified desired size.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.ElementContentSiteName">
            <summary>
            The name of the ContentSite template part.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ExpandableContentControl._clippingRectangle">
            <summary>
            The Geometry used to clip this control. The control will potentially
            have less available space than the content it is arranging. That
            part will be clipped.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ExpandableContentControl._contentSite">
            <summary>
            BackingField for the ContentSite property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.PercentageProperty">
            <summary>
            Identifies the Percentage dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.OnPercentagePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PercentageProperty property changed handler.
            </summary>
            <param name="d">Page that changed its Percentage.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.TargetSizeProperty">
            <summary>
            Identifies the TargetSize dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.OnTargetSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TargetSizeProperty property changed handler.
            </summary>
            <param name="d">ExpandableContentControl that changed its TargetSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Does a measure pass of the control and its content. The content will
            get measured according to the TargetSize and is clipped.
            </summary>
            <param name="availableSize">The available size that this object can 
            give to child objects. Infinity can be specified as a value to 
            indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based 
            on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.MeasureContent(System.Windows.Size)">
            <summary>
            Measures the content with a specific size.
            </summary>
            <param name="desiredSize">The size passed to the content.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.CalculateDesiredContentSize">
            <summary>
            Interprets TargetSize.
            </summary>
            <returns>A size that can be safely used to measure content.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the control and its content. Content is arranged according
            to the TargetSize and clipped.
            </summary>
            <param name="finalSize">The final area within the parent that this 
            object should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.UpdateClip(System.Windows.Size)">
            <summary>
            Updates the clip geometry.
            </summary>
            <param name="arrangeSize">Size of the visible part of the control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.RecalculatePercentage(System.Windows.Size)">
            <summary>
            Recalculates the percentage based on a new size.
            </summary>
            <param name="value">The new size used to base percentages on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.SetRevealDimension">
            <summary>
            Sets the dimensions according to the current percentage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.SetNonRevealDimension">
            <summary>
            Sets the opposite dimension.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Controls.Layout.ExpandableContentControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ExpandableContentControl control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.OnContentSiteSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Raises the ContentSizeChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:Windows.UI.Xaml.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.Dispose">
            <summary>
            Represents dispose method for disposing unwanted objects
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.Dispose(System.Boolean)">
            <summary>
            To remove all the instance which is used in ExpandableContentControl
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.ContentSite">
            <summary>
            Gets or sets the ContentSite template part.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.Percentage">
            <summary>
            Gets or sets the relative percentage of the content that is 
            currently visible. A percentage of 1 corresponds to the complete
            TargetSize.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.TargetSize">
            <summary>
            Gets or sets the desired size of the ExpandableContentControl content.
            </summary>
            <remarks>Use the percentage property to animate to this size.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.ContentSizeChanged">
            <summary>
            Occurs when the content changed its size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ExpandableContentControl.RelevantContentSize">
            <summary>
            Gets the content current visible size.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.InteractionHelper.GetLogicalKey(System.Windows.FlowDirection,System.Windows.Input.Key)">
            <summary>
            Translates keys for proper RightToLeft mode support.
            </summary>
            <param name="flowDirection">Control's flow direction mode.</param>
            <param name="originalKey">Original key.</param>
            <returns>
            A translated key code, indicating how the original key should be interpreted.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.SfAccordion">
            <summary>
            Represents a collection of collapsed and expanded AccordionItem controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.AccordionButtonStyleName">
            <summary>
            The name used to indicate AccordionButtonStyle property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._scheduledActions">
            <summary>
            The items that are currently waiting to perform an action.
            </summary>
            <remarks>An action can be expanding, resizing or collapsing.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isloaded">
            <summary>
            Determines whether the control is loaded or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isAllowedToWriteSelectedItems">
            <summary>
            Determines whether the SelectedItemsProperty may be written.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isAllowedToWriteSelectedIndices">
            <summary>
            Determines whether the SelectedIndicesProperty may be written.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isIgnoringSelectedIndicesChanges">
            <summary>
            Indicates that changes to the SelectedIndices collection should
            be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isIgnoringSelectedItemsChanges">
            <summary>
            Indicates that changes to the SelectedItems collection should
            be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isInSelectedItemsCollectionChanged">
            <summary>
            Determines whether we are currently in the SelectedItems Collection
            Changed handling.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._isInSelectedIndicesCollectionChanged">
            <summary>
            Determines whether we are currently in the SelectedIndices Collection
            Changed handling.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._currentActioningItem">
            <summary>
            The item that is currently visually performing an action.
            </summary>
            <remarks>An action can be expanding, resizing or collapsing.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.AccentBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for AccentBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.HeaderTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.HeaderTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderTemplateSelector.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.ContentTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ContentTemplateSelector.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.IsValidItemForSelection(System.Object)">
            <summary>
            Determines whether the new value can be selected.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            	<c>True</c> if this item can be selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._selectedItemNestedLevel">
            <summary>
            Nested level for SelectedItemCoercion.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectedIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedIndexProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectedIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.IsValidIndexForSelection(System.Int32)">
            <summary>
            Determines whether the new value can be selected.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            	<c>True</c> if this item can be selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion._selectedIndexNestedLevel">
            <summary>
            Coercion level.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedItemsProperty">
            <summary>
            Identifies the SelectedItems dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectedItemsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler of SelectedItems.
            </summary>
            <param name="d">Accordion that changed the collection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedIndicesProperty">
            <summary>
            Identifies the SelectedIndices dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectedIndicesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler of SelectedIndices.
            </summary>
            <param name="d">Accordion that changed the collection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            TreeView that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.ContentTemplateProperty">
            <summary>
            Identifies the ContentTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedEvent">
            <summary>
            Defines an event for the Selection of Items
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Controls.Layout.SfAccordion"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Accordion control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given 
            item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own 
            container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            True if the item is (or is eligible to be) its own container; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)"/> 
            method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item that should be cleared.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> 
            property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.InitializeNewItemsSource">
            <summary>
            Initializes the SelectedItem property when a new ItemsSource is set.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnAccordionItemUnselected(Syncfusion.Windows.Controls.Layout.SfAccordionItem)">
            <summary>
            Called when an AccordionItem is unselected.
            </summary>
            <param name="accordionItem">The accordion item that was unselected.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.UnselectItem(System.Int32,System.Object)">
            <summary>
            Unselects the item.
            </summary>
            <param name="index">The index of the item that will be unselected.</param>
            <param name="item">The item that will be unselected. Can be null.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnAccordionItemSelected(Syncfusion.Windows.Controls.Layout.SfAccordionItem)">
            <summary>
            Called when an AccordionItem selected.
            </summary>
            <param name="accordionItem">The accordion item that was selected.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectItem(System.Int32)">
            <summary>
            Selects the item.
            </summary>
            <param name="index">The index of the item to select.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.ChangeSelectedIndex(System.Int32,System.Int32)">
            <summary>
            Changes the selected item, by unselecting and selecting where 
            necessary.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when selected items collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnSelectedIndicesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when selected indices collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.ProposeSelectedIndexCandidate(System.Int32)">
            <summary>
            Gets an item that is suitable for selection.
            </summary>
            <param name="nonCandidateIndex">Index that should not be considered if 
            possible.</param>
            <returns>An item that should be selected. This could be nonCandidateIndex, 
            if no other possibility was found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectAll">
            <summary>
            Selects all the AccordionItems in the Accordion control.
            </summary>
            <remarks>If the Accordion SelectionMode is OneOrMore or ZeroOrMore all 
            AccordionItems would be selected. If the Accordion SelectionMode is 
            One or ZeroOrOne all items would be selected and unselected. Only 
            the last AccordionItem would remain selected. </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.UnselectAll">
            <summary>
            Unselects all the AccordionItems in the Accordion control.
            </summary>
            <remarks>If the Accordion SelectionMode is Zero or ZeroOrMore all 
            AccordionItems would be Unselected. If SelectionMode is One or  
            OneOrMode  than all items would be Unselected and selected. Only the 
            first AccordionItem would still be selected.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.UpdateAccordionItemsSelection(System.Boolean)">
            <summary>
            Updates all accordionItems to be selected or unselected.
            </summary>
            <param name="selectedValue">True to select all items, false to unselect.</param>
            <remarks>Will not attempt to change a locked accordionItem.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.SetLockedProperties">
            <summary>
            Sets the locked properties on all the items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.RaiseOnSelectedItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise the SelectedItemsCollectionChanged event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
            <remarks>This event is raised after the changes to the collection 
            have been processed.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnAccordionSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the size of the Accordion changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:Windows.UI.Xaml.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnHeaderSizeChange(Syncfusion.Windows.Controls.Layout.SfAccordionItem)">
            <summary>
            Called when size of a Header on the item changes.
            </summary>
            <param name="item">The item whose Header changed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.StartNextAction">
            <summary>
            Starts the next action in the list, in a particular order.
            </summary>
            <remarks>An AccordionItem is should always signal that it is 
            finished with an action.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.LayoutChildren">
            <summary>
            Determines and sets the height of the accordion items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.SetPanelOrientation">
            <summary>
            Sets the orientation of the panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs when the focus is obtained
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs when the focus is lost
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when the focus is lost
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when the focus is obtained
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.Syncfusion#Windows#Controls#Layout#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Controls.Layout.SfAccordion.Dispose" -->
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordion.Dispose(System.Boolean)">
            <summary>
            To remove all the instance which is used in SfAccordion
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.ItemsControlHelper">
            <summary>
            Gets the ItemsControlHelper that is associated with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.IsResizing">
            <summary>
            Gets a value indicating whether this instance is currently resizing.
            </summary>
            <value>True if this instance is resizing; otherwise, false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.AccentBrush">
            <summary>
            Gets or sets the accent brush
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.HeaderTemplate">
            <summary>
            Gets or sets the template for the header
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.HeaderTemplateSelector">
            <summary>
            Gets or sets the TemplateSelector for the header
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.ContentTemplateSelector">
            <summary>
            Gets or sets the TemplateSelector for the Content
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectionMode">
            <summary>
            Gets or sets the AccordionSelectionMode used to determine the minimum 
            and maximum selected AccordionItems allowed in the Accordion.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.IsMinimumOneSelected">
            <summary>
            Gets a value indicating whether at least one item is selected at 
            all times.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.IsMaximumOneSelected">
            <summary>
            Gets a value indicating whether at most one item is selected at all times.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <remarks>
            The default value is null.
            When multiple items are allowed (IsMaximumOneSelected false), 
            return the first of the selectedItems.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected AccordionItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <remarks>Does not allow setting.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedIndices">
            <summary>
            Gets the indices of the currently selected AccordionItems.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element
            generated for each item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordion.ContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content 
            of each generated AccordionItem. 
            </summary>
            <remarks>Either ContentTemplate or ItemTemplate is used. 
            Setting both will result in an exception.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectionChanged">
            <summary>
            Occurs when the <see 
            cref="T:Syncfusion.UI.Xaml.Controls.Navigation.SfTreeNavigatorItem"/> has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Controls.Layout.SfAccordion.SelectedItemsChanged">
            <summary>
            Occurs when the SelectedItems collection changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.SfAccordionItem">
            <summary>
            Represents a control that displays a header and has a collapsible 
            content window.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ElementExpandSiteName">
            <summary>
            The name of the ExpandSite template part.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's 
            used to select and unselect this AccordionItem.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._expandSite">
            <summary>
            BackingField for the ExpandSite property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._collapseStoryboard">
            <summary>
            BackingField for CollapseStoryboard.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._expandStoryboard">
            <summary>
            BackingField for ExpandStoryboard.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._isBusyWithAction">
            <summary>
            Indicates that the control is currently executing an action.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the 
            old and new values.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._isSelectedNestedLevel">
            <summary>
            Nested level for IsSelectedCoercion.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._isLocked">
            <summary>
            BackingField for IsLocked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem.AccordionButtonStyleProperty">
            <summary>
            Identifies the AccordionButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnAccordionButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AccordionButtonStyleProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its AccordionButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnAccordionButtonStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when AccordionButtonStyle is changed.
            </summary>
            <param name="oldStyle">The old style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ExpandableContentControlStyleProperty">
            <summary>
            Identifies the ExpandableContentControlStyle dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnExpandableContentControlStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandableContentControlStyleProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its ExpandableContentControlStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnExpandableContentControlStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when ExpandableContentControlStyle is changed.
            </summary>
            <param name="oldStyle">The old style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._allowedToWriteContentTargetSize">
            <summary>
            Determines whether it is allowed to set the ContentTargetSize
            property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ContentTargetSizeProperty">
            <summary>
            Identifies the ContentTargetSize dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnContentTargetSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentTargetSizeProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its ContentTargetSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.#ctor">
            <summary>
            Initializes a new instance of the AccordionItem class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnHeaderSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the size of the control changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:Windows.UI.Xaml.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.Schedule(Syncfusion.Windows.Controls.Layout.AccordionAction)">
            <summary>
            Schedules the specified action.
            </summary>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.StartAction">
            <summary>
            Starts an action, such as resize, collapse or expand.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnStoryboardFinished(System.Object,System.Object)">
            <summary>
            Called when a storyboard finishes.
            </summary>
            <param name="sender">The AccordionItem that finished a storyboard.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing 
            the event data.</param>
            <remarks>AccordionItem is required to make this call.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnExpandSiteContentSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the content changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:Windows.UI.Xaml.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the AccordionItem control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.PreparePrepareHeaderedContentControlContainerForItemOverride(System.Windows.Controls.HeaderedContentControl,System.Object,System.Windows.Controls.ItemsControl,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">Specified item to display.</param>
            <param name="parent">The parent ItemsControl.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Check whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>
            True if the property has the default value; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnSelected">
            <summary>
            Raises the Selected event when the IsSelected property changes 
            from false to true.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnUnselected">
            <summary>
            Raises the Unselected event when the IsSelected property changes 
            from true to false.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ToggleSelected(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsSelected property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnExpanderButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.SfAccordionItem._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs when the focus is obtained
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs when the focus is lost
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when the focus is obtained
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when the focus is obtained
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.Syncfusion#Windows#Controls#Layout#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.Dispose">
            <summary>
            Represents dispose method for disposing unwanted objects
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.SfAccordionItem.Dispose(System.Boolean)">
            <summary>
            To remove all the instance which is used in SfAccordionItem
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ExpandSite">
            <summary>
            Gets or sets the expand site template part.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.CollapseStoryboard">
            <summary>
            Gets or sets the collapse storyboard.
            </summary>
            <value>The collapse storyboard.</value>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ExpandStoryboard">
            <summary>
            Gets or sets the expand storyboard.
            </summary>
            <value>The expand storyboard.</value>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the AccordionItem is 
            selected and its content window is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.IsLocked">
            <summary>
            Gets a value indicating whether the AccordionItem cannot be 
            selected by the user.
            </summary>
            <value><c>True</c> if this instance is locked; otherwise, <c>false</c>.</value>
            <remarks>The IsSelected property may not be changed when the 
            AccordionItem is locked. Locking occurs when the item is the first 
            in the list, the SelectionMode of Accordion requires atleast one selected
            AccordionItem and the AccordionItem is currently selected.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.AccordionButtonStyle">
            <summary>
            Gets or sets the Style used by AccordionButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ExpandableContentControlStyle">
            <summary>
            Gets or sets the Style used by ExpandableContentControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ContentTargetSize">
            <summary>
            Gets the Size that the content will animate to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ParentAccordion">
            <summary>
            Gets or sets a reference to the parent Accordion of an
            AccordionItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.ScheduledAction">
            <summary>
            Gets the scheduled action.
            </summary>
            <value>The scheduled action.</value>
        </member>
        <member name="E:Syncfusion.Windows.Controls.Layout.SfAccordionItem.Selected">
            <summary>
            Occurs when the accordionItem is selected.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Controls.Layout.SfAccordionItem.Unselected">
            <summary>
            Occurs when the accordionItem is unselected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.SfAccordionItem.RelevantContentSize">
            <summary>
            Gets the relevant size of the current content.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Controls.Layout.LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer.TransformRootName">
            <summary>
            Name of the TransformRoot template part.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer.PresenterName">
            <summary>
            Name of the Presenter template part.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer._transformRoot">
            <summary>
            Root element for performing transformations.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer._contentPresenter">
            <summary>
            ContentPresenter element for displaying the content.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Controls.Layout.LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformer class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the LayoutTransformer control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.LayoutTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">Source of the change.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Controls.Layout.LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="P:Syncfusion.Windows.Controls.Layout.LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="T:Syncfusion.SfAccordionBaseAssembly">
            <summary>
            SharedBase assembly class.
            </summary>
        </member>
        <member name="F:Syncfusion.SfAccordionBaseAssembly.Name">
            <summary>
            Name of the assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.SfAccordionBaseAssembly.Assembly">
            <summary>
            Defines assembly object reference variable.
            </summary>
        </member>
        <member name="F:Syncfusion.SfAccordionBaseAssembly.RootNamespace">
            <summary>
            Root namespace of the assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.SfAccordionBaseAssembly.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.SfAccordionBaseAssembly"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SfAccordionBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            Assemblies the resolver.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns>Assembly object.</returns>
        </member>
        <member name="T:Syncfusion.AssemblyInfo">
            <summary>
            Assembly info class
            </summary>
        </member>
        <member name="T:Syncfusion.Licensing.EnvironmentTestNotification">
            <summary>
            Checking whether partial trust allowed or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.EnvironmentTestNotification.ValidateLicense(System.Type)">
            <summary>
            Validates the license.
            </summary>
            <param name="controltype">The control type.</param>
        </member>
        <member name="M:Syncfusion.Licensing.EnvironmentTestNotification.StartValidateLicense(System.Type)">
            <summary>
            Starts the validate license.
            </summary>
            <param name="controltype">The controltype.</param>
        </member>
        <member name="P:Syncfusion.Licensing.EnvironmentTestNotification.IsSecurityGranted">
            <summary>
            Gets a value indicating whether security permission can be granted. Read-only.
            </summary>
        </member>
    </members>
</doc>
